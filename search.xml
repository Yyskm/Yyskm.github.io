<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Lexington Informatics Tournament2025</title>
      <link href="/2025/08/26/Lexington%20Informatics%20Tournament2025/"/>
      <url>/2025/08/26/Lexington%20Informatics%20Tournament2025/</url>
      
        <content type="html"><![CDATA[<h1 id="one-hint">one hint</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">\<span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vigenere</span>(<span class="params">pt,key</span>):</span><br><span class="line"></span><br><span class="line">  res = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pt)):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> pt[i] <span class="keyword">in</span> <span class="string">&quot;LITCTF&#123;_&#125;&quot;</span>:</span><br><span class="line"></span><br><span class="line">      res += pt[i]</span><br><span class="line"></span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    res += <span class="built_in">chr</span>((<span class="built_in">ord</span>(pt[i])+<span class="built_in">ord</span>(key[i%<span class="built_in">len</span>(key)])-<span class="number">2</span>*<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))%<span class="number">26</span>+<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">power</span>(<span class="params">pt,n</span>):</span><br><span class="line"></span><br><span class="line">  a = pt</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line"></span><br><span class="line">    a = vigenere(a, vigenere(a, a))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;LITCTF&#123;redacted&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hint 1: &quot;</span> + power(flag, <span class="number">2345</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hint 1: LITCTF&#123;fkxlafg_plk_qkuxbkgp_hucknkxk_khkx&#125;</span><br></pre></td></tr></table></figure><p>题目给出了自定义的 Vigenere 变种加密函数和一个迭代加密函数</p><p>vigenere函数：</p><ul><li>对不在 <code>"LITCTF&#123;_&#125;"</code> 中的字符进行加密</li><li>加密公式：<code>c = (pt_char + key_char - 2*'a') % 26 + 'a'</code></li><li>等价于：<code>c = (pt_char_index + key_char_index) % 26</code>（字母索引计算）</li></ul><p>power函数：</p><ul><li>进行n次迭代加密</li><li>每次迭代：<code>a = vigenere(a, vigenere(a, a))</code></li><li>分析发现：<code>vigenere(a, a)</code>相当于每个字符索引翻倍（模26）</li><li>因此一次迭代相当于：<code>a_next[i] = (3 * a[i]_index) % 26 + 'a'</code></li><li>n次迭代后：每个字符变换为<code>(3^n * original_index) % 26</code></li></ul><p>对于2345次迭代：</p><ul><li>计算 <code>3^2345 mod 26</code></li><li>由于 <code>3^3 = 27 ≡ 1 mod 26</code>，阶为3</li><li><code>2345 ÷ 3 = 781 * 3 + 2</code>，余数为2</li><li>所以 <code>3^2345 ≡ 3^2 ≡ 9 mod 26</code></li></ul><p>加密变换为乘以9（模26），因此解密需要乘以9的逆元：</p><ul><li>求 <code>9 * x ≡ 1 mod 26</code></li><li><code>9 * 3 = 27 ≡ 1 mod 26</code>，所以逆元为3</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_power</span>(<span class="params">hint, n_iterations=<span class="number">2345</span></span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算加密乘因子: 3^n_iterations mod26</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 由于3^3=1 mod26，所以乘因子 = 3^(n_iterations % 3) mod26</span></span><br><span class="line"></span><br><span class="line">​    exp_factor = <span class="built_in">pow</span>(<span class="number">3</span>, n_iterations, <span class="number">26</span>)  <span class="comment"># 这等于9</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 然后求逆元</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 找x使得 (exp_factor * x) %26=1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对于9，逆元是3（因为9*3=27=1 mod26）</span></span><br><span class="line"></span><br><span class="line">​    inv_mult = <span class="literal">None</span></span><br><span class="line">​    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">​        <span class="keyword">if</span> (exp_factor * x) %<span class="number">26</span> ==<span class="number">1</span>:</span><br><span class="line">​            inv_mult = x</span><br><span class="line">​            <span class="keyword">break</span></span><br><span class="line">​    <span class="keyword">if</span> inv_mult <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">​        <span class="keyword">raise</span> ValueError(<span class="string">&quot;No inverse found&quot;</span>)</span><br><span class="line">​    </span><br><span class="line">​    res = <span class="string">&quot;&quot;</span></span><br><span class="line">​    <span class="keyword">for</span> c <span class="keyword">in</span> hint:</span><br><span class="line">​        <span class="keyword">if</span> c <span class="keyword">in</span> <span class="string">&quot;LITCTF&#123;_&#125;&quot;</span>:</span><br><span class="line">​            res += c</span><br><span class="line">​        <span class="keyword">else</span>:</span><br><span class="line">​            idx_ct = <span class="built_in">ord</span>(c) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">​            idx_pt = (idx_ct * inv_mult) %<span class="number">26</span></span><br><span class="line">​            res += <span class="built_in">chr</span>(idx_pt + <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">​    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">hint = <span class="string">&quot;LITCTF&#123;fkxlafg_plk_qkuxbkgp_hucknkxk_khkx&#125;&quot;</span></span><br><span class="line">flag = decrypt_power(hint)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h1 id="sign">sign</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">\<span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long <span class="keyword">as</span> btl</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad <span class="keyword">as</span> hashing</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">t = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, t)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;e = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;n = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">flag = flag.encode()</span><br><span class="line"></span><br><span class="line">enc = <span class="built_in">pow</span>(btl(flag), e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;enc = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">sign = <span class="built_in">pow</span>(btl(hashing(flag, <span class="number">256</span>)), d, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;sign = &#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>这里考察的是RSA中的签名</p><p>签名过程</p><p>先是对flag进行填充</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashing(flag, 256)</span><br></pre></td></tr></table></figure><p>然后对填充字节转为整数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">btl(hashing(flag, 256))</span><br></pre></td></tr></table></figure><p>最后是用私钥进行签名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sign = pow(btl(hashing(flag, 256)), d, n)</span><br></pre></td></tr></table></figure><p>签名计算就是如下等式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sign = (pad(flag, <span class="number">256</span>))^d mod n</span><br></pre></td></tr></table></figure><p>根据欧拉定理 <spanclass="math display">(<em>m</em><sup><em>e</em></sup>)<sup><em>d</em></sup> mod  <em>n</em> = <em>m</em><sup><em>e</em> * <em>d</em></sup> mod  <em>n</em> = <em>m</em><sup>1 + <em>k</em> * <em>φ</em>(<em>n</em>)</sup> mod  <em>n</em> = <em>m</em> mod  <em>n</em></span>所以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sign^e = (pad(flag, 256))^(d*e) = pad(flag, 256) mod n</span><br></pre></td></tr></table></figure><p>因此，计算<code>m = sign^e mod n</code>即可得到填充后的消息<code>pad(flag, 256)</code></p><p>最后去除填充即可得到原始flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">28720310163698579785590409431244488502590518896114002560615035101872706254575673226701273452266044763379371347175490772833687557638193161203442701390842338726680883158060043516615180759468749002859934101042225109339060841430076215460950001496422014817369538803906181940671644497607497588494548107578139030246710304659121835681466614082387895636652987625506231425635937025960541486880824071903428563319272223449602650009455406871550491147456125891228766395361048688453313744200332284228661669385987688182529904303370060855844163590429388043008170533746319606379457862846257781629063966348729803646974228947658975816397</span></span><br><span class="line"></span><br><span class="line">enc = <span class="number">28622274173454751770425162522510657578255182655076851217407818429087697323190577802242456771214850549746446507706653313042057593379659705765532892268852740105589258308684132958276551073639787381340659764512440431614091062678114371089265383600952938737174680538339955267319021442184851847628241496769952842522557307346991056557448136450999928593799714420370025506694266924139490626538253626051572437799338532577579795987845669725423644191131632856219518165150234626040583326103289158950261130615392010672381664407880524072421107969847707990340309409099437843249519731209835667579473831944170863554281708120873440754999</span></span><br><span class="line"></span><br><span class="line">sign = <span class="number">13347520343804927847619065202065217836879984453006249407611353191409157302332065972903532015282229744284677309671725411375707706894638641694057135257768299781877077021376667459594883760258356475573151469487363169214012061817199685037363785333516662036329205820120312268834684818014608203312923165179884189461072393686643809307452885991065622646622558149438096015921040528472490412757534851295013865651002130260213027431057502650933677854772978321133895346051674016006963172506825876634054025209746366903230914159762719784407670815205227721887604953882373776567997690485937876918420481954105325928897076354153411410671</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 计算 m = sign^e mod n</span></span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(sign, e, n)</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 将m转换为字节串</span></span><br><span class="line"></span><br><span class="line">padded_flag = long_to_bytes(m)</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 去除PKCS#7填充（块大小为256字节）</span></span><br><span class="line"></span><br><span class="line">flag = unpad(padded_flag, <span class="number">256</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag.decode())</span><br></pre></td></tr></table></figure><h1 id="lcgcg">lcgcg</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">\<span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># inferior rngs</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> SystemRandom</span><br><span class="line"></span><br><span class="line">random = SystemRandom()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LCG</span>:</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b, x</span>):</span><br><span class="line"></span><br><span class="line">​    <span class="variable language_">self</span>.a = a</span><br><span class="line"></span><br><span class="line">​    <span class="variable language_">self</span>.b = b</span><br><span class="line"></span><br><span class="line">​    <span class="variable language_">self</span>.x = x</span><br><span class="line"></span><br><span class="line">​    <span class="variable language_">self</span>.m = p</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">​    <span class="variable language_">self</span>.x = (<span class="variable language_">self</span>.a * <span class="variable language_">self</span>.x + <span class="variable language_">self</span>.b) % <span class="variable language_">self</span>.m</span><br><span class="line"></span><br><span class="line">​    ret = <span class="variable language_">self</span>.x</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LCG2</span>:</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, baselcg, n=<span class="number">100</span></span>):</span><br><span class="line"></span><br><span class="line">​    <span class="variable language_">self</span>.lcg = baselcg</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line"></span><br><span class="line">​      a = <span class="variable language_">self</span>.lcg.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">​      b = <span class="variable language_">self</span>.lcg.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">​      x = <span class="variable language_">self</span>.lcg.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">​      <span class="variable language_">self</span>.lcg = LCG(a,b,x)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> <span class="variable language_">self</span>.lcg.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">a = random.randint(<span class="number">1</span>, <span class="number">2</span>**<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">b = random.randint(<span class="number">1</span>, <span class="number">2</span>**<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">x = random.randint(<span class="number">1</span>, <span class="number">2</span>**<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">lcg = LCG(a, b, x)</span><br><span class="line"></span><br><span class="line">lcg2 = LCG2(lcg)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(lcg2.<span class="built_in">next</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes <span class="keyword">as</span> l2b</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"></span><br><span class="line">r = lcg.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">k = pad(l2b(r**<span class="number">2</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">iv = urandom(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">cipher = AES.new(k, AES.MODE_CBC, iv=iv)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(iv.<span class="built_in">hex</span>())</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&#x27;rb&#x27;</span>).read().strip()</span><br><span class="line"></span><br><span class="line">enc = cipher.encrypt(pad(f,<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(enc.<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">15471456606036645889</span><br><span class="line">3681934504574973317</span><br><span class="line">4155039551524372589</span><br><span class="line">9036939555423197298</span><br><span class="line">6c9315b13f092fbc49adffbf1c770b54</span><br><span class="line">af9dc7dfd04bdf4b61a1cf5ec6f9537819592e44b4a20c87455d01f67d738c035837915903330b67168ca91147299c422616390dae7be68212e37801b76a74d4</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LCG</span>:</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b, x</span>):</span><br><span class="line"></span><br><span class="line">​    <span class="variable language_">self</span>.a = a</span><br><span class="line"></span><br><span class="line">​    <span class="variable language_">self</span>.b = b</span><br><span class="line"></span><br><span class="line">​    <span class="variable language_">self</span>.x = x</span><br><span class="line"></span><br><span class="line">​    <span class="variable language_">self</span>.m = p</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">​    <span class="variable language_">self</span>.x = (<span class="variable language_">self</span>.a * <span class="variable language_">self</span>.x + <span class="variable language_">self</span>.b) % <span class="variable language_">self</span>.m</span><br><span class="line"></span><br><span class="line">​    ret = <span class="variable language_">self</span>.x</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LCG2</span>:</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, baselcg, n=<span class="number">100</span></span>):</span><br><span class="line"></span><br><span class="line">​    <span class="variable language_">self</span>.lcg = baselcg</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line"></span><br><span class="line">​      a = <span class="variable language_">self</span>.lcg.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">​      b = <span class="variable language_">self</span>.lcg.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">​      x = <span class="variable language_">self</span>.lcg.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">​      <span class="variable language_">self</span>.lcg = LCG(a,b,x)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> <span class="variable language_">self</span>.lcg.<span class="built_in">next</span>()</span><br></pre></td></tr></table></figure><p>给了两个线性同余生成器，这里的LCG2是一个嵌套的 LCG</p><p>我们要做的是恢复参数求出r即可解密flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse</span>(<span class="params">a, m</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(a, -<span class="number">1</span>, m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据 LCG 的三个连续输出来恢复其参数 a, b</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recover_params</span>(<span class="params">o1, o2, o3, p</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># o2 = (a * o1 + b) % p</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># o3 = (a * o2 + b) % p</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># o3 - o2 = a * (o2 - o1) % p</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># a = (o3 - o2) * modInverse(o2 - o1) % p</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># b = (o2 - a * o1) % p</span></span><br><span class="line"></span><br><span class="line">​    diff1 = (o2 - o1 + p) % p</span><br><span class="line">​    diff2 = (o3 - o2 + p) % p</span><br><span class="line">​    </span><br><span class="line">​    a = (diff2 * inverse(diff1, p)) % p</span><br><span class="line">​    b = (o2 - a * o1) % p</span><br><span class="line">​    <span class="keyword">return</span> a, b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据 LCG 的参数和第一个输出来恢复其种子 x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recover_seed</span>(<span class="params">a, b, o1, p</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># o1 = (a * x + b) % p</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># x = (o1 - b) * modInverse(a) % p</span></span><br><span class="line"></span><br><span class="line">​    seed = ((o1 - b + p) % p * inverse(a, p)) % p</span><br><span class="line">​    <span class="keyword">return</span> seed</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 从程序的输出中获取这些值 ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例值，请替换为你的实际输出</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">15471456606036645889</span>  <span class="comment"># 第一行输出</span></span><br><span class="line">outputs = [</span><br><span class="line"><span class="number">3681934504574973317</span>,</span><br><span class="line"><span class="number">4155039551524372589</span>,</span><br><span class="line"><span class="number">9036939555423197298</span>   <span class="comment"># 第四行输出</span></span><br><span class="line">]</span><br><span class="line">iv_hex = <span class="string">&quot;6c9315b13f092fbc49adffbf1c770b54&quot;</span>  <span class="comment"># 加密 iv 的 hex</span></span><br><span class="line">enc_hex = <span class="string">&quot;af9dc7dfd04bdf4b61a1cf5ec6f9537819592e44b4a20c87455d01f67d738c035837915903330b67168ca91147299c422616390dae7be68212e37801b76a74d4&quot;</span> <span class="comment"># 加密 flag 的 hex</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># `outputs` 当前是 lcg_100 的前三个输出</span></span><br><span class="line"></span><br><span class="line">current_outputs = outputs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环 100 次，从 lcg_100 回溯到 lcg_0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 恢复 lcg_&#123;100-i&#125; 的参数 a 和 b</span></span><br><span class="line"></span><br><span class="line">​    a_i, b_i = recover_params(current_outputs[<span class="number">0</span>], current_outputs[<span class="number">1</span>], current_outputs[<span class="number">2</span>], p)</span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 恢复 lcg_&#123;100-i&#125; 的种子 x</span></span><br><span class="line"></span><br><span class="line">​    x_i = recover_seed(a_i, b_i, current_outputs[<span class="number">0</span>], p)</span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">    <span class="comment"># lcg_&#123;100-i&#125; 的参数 a, b 和种子 x 是 lcg_&#123;99-i&#125; 的三个连续输出</span></span><br><span class="line"></span><br><span class="line">​    current_outputs = [a_i, b_i, x_i]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环结束后, current_outputs 是 lcg_0 的前三个输出</span></span><br><span class="line"></span><br><span class="line">out1_lcg0, out2_lcg0, out3_lcg0 = current_outputs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复 lcg_0 的参数 a_0 和 b_0</span></span><br><span class="line"></span><br><span class="line">a_0, b_0 = recover_params(out1_lcg0, out2_lcg0, out3_lcg0, p)</span><br><span class="line"></span><br><span class="line"><span class="comment"># lcg_0 在生成前三个输出后，其内部状态为 out3_lcg0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 lcg_0 的第四个输出 r，它被用作加密密钥</span></span><br><span class="line"></span><br><span class="line">r = (a_0 * out3_lcg0 + b_0) % p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 r 生成 AES 密钥</span></span><br><span class="line"></span><br><span class="line">k = pad(long_to_bytes(r**<span class="number">2</span>), <span class="number">16</span>)</span><br><span class="line">iv = <span class="built_in">bytes</span>.fromhex(iv_hex)</span><br><span class="line">enc = <span class="built_in">bytes</span>.fromhex(enc_hex)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line"></span><br><span class="line">cipher = AES.new(k, AES.MODE_CBC, iv)</span><br><span class="line">flag = unpad(cipher.decrypt(enc), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[*] Recovered a_0: <span class="subst">&#123;a_0&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[*] Recovered b_0: <span class="subst">&#123;b_0&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[*] Recovered r: <span class="subst">&#123;r&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[*] AES Key (k): <span class="subst">&#123;k.<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[*] Flag: <span class="subst">&#123;flag.decode()&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="encryption-two-ways">encryption two ways</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes <span class="keyword">as</span> ltb, bytes_to_long <span class="keyword">as</span> btl, getPrime</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">flag = btl(<span class="string">b&#x27;LITCTF&#123;[redacted]&#125;&#x27;</span> + os.urandom(<span class="number">32</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Xor cipher:&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag^p)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag^q)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;RSA:&quot;</span>)</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">N = p*q</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(e,N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(flag, e, N))</span><br><span class="line"></span><br><span class="line">flag ^ p = <span class="number">108045183697150150388387022354644400710478293913561934644429795432215423775530425605908182580593052688767602845916543591389876983482042029936174739737106705637912307780034509466169441898226514099166553884646148238091201176833192660464799051971513299469099698642852622112851519420837770557753663006410171424954</span></span><br><span class="line"></span><br><span class="line">flag ^ q = <span class="number">162425027220271125112526550171672938857893430024995932152889092099422586505033382180804478364393931237258447320092961243322668725158329284375314631413196322424161078014098879996836910267428123607993248647460893768237405563780856627795204647838831725719393299863570484674672516697933717612728478431715684934592</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">17549241903028807175848697296476902180173000665558251909525417072566389777554685273914493627088689101480604403676280727929113896976807159352508389369627695539558624802791339988787869402402630026664052058891704214906198713997370416403885783996622003881424532493528115742721432687906907253783461267540168556557474688342693447888469393204411905072363126771586961835579420717423443143174165744502775543261555553300815721003846650007143264701287458594708569998427388990790314519857410381171087321730943418024966767600200818019264395953839395615095086827909298793968510748073265397345829272224944838568259203556901938490251</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">15771531968759255206472217913622670911079136848159367178271327606545875119033854273178826969494590977340221396142610245587819870438040088763642130539085898823155632887807140504582510904126243920797047908446371848070010831250500867803653544089236908734881494176567631239714888177579409037101004801324365329294451645055770640691767024180084714636110900526184856411276742567769773926457049290824684230273083289562143369775700813949916517084557583295679402702854150346124209715938583306569988576420229217836860768395518641691096169891458896583547743891498844372591813522456434048363032013126358398207594342936230289578536</span></span><br></pre></td></tr></table></figure><p>给了两个等式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flag ^ p = 108045183697150150388387022354644400710478293913561934644429795432215423775530425605908182580593052688767602845916543591389876983482042029936174739737106705637912307780034509466169441898226514099166553884646148238091201176833192660464799051971513299469099698642852622112851519420837770557753663006410171424954</span><br><span class="line"></span><br><span class="line">flag ^ q = 162425027220271125112526550171672938857893430024995932152889092099422586505033382180804478364393931237258447320092961243322668725158329284375314631413196322424161078014098879996836910267428123607993248647460893768237405563780856627795204647838831725719393299863570484674672516697933717612728478431715684934592</span><br></pre></td></tr></table></figure><p>我们将两式异或可以得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag^p^flag^q=p^q</span><br></pre></td></tr></table></figure><p>然后用剪枝算法求出p，q即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">p_ = <span class="number">108045183697150150388387022354644400710478293913561934644429795432215423775530425605908182580593052688767602845916543591389876983482042029936174739737106705637912307780034509466169441898226514099166553884646148238091201176833192660464799051971513299469099698642852622112851519420837770557753663006410171424954</span></span><br><span class="line"></span><br><span class="line">q_ = <span class="number">162425027220271125112526550171672938857893430024995932152889092099422586505033382180804478364393931237258447320092961243322668725158329284375314631413196322424161078014098879996836910267428123607993248647460893768237405563780856627795204647838831725719393299863570484674672516697933717612728478431715684934592</span></span><br><span class="line"></span><br><span class="line">p_q = p_ ^ q_</span><br><span class="line"></span><br><span class="line">n = <span class="number">17549241903028807175848697296476902180173000665558251909525417072566389777554685273914493627088689101480604403676280727929113896976807159352508389369627695539558624802791339988787869402402630026664052058891704214906198713997370416403885783996622003881424532493528115742721432687906907253783461267540168556557474688342693447888469393204411905072363126771586961835579420717423443143174165744502775543261555553300815721003846650007143264701287458594708569998427388990790314519857410381171087321730943418024966767600200818019264395953839395615095086827909298793968510748073265397345829272224944838568259203556901938490251</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">15771531968759255206472217913622670911079136848159367178271327606545875119033854273178826969494590977340221396142610245587819870438040088763642130539085898823155632887807140504582510904126243920797047908446371848070010831250500867803653544089236908734881494176567631239714888177579409037101004801324365329294451645055770640691767024180084714636110900526184856411276742567769773926457049290824684230273083289562143369775700813949916517084557583295679402702854150346124209715938583306569988576420229217836860768395518641691096169891458896583547743891498844372591813522456434048363032013126358398207594342936230289578536</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">sys.setrecursionlimit(<span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line">gift = p_q</span><br><span class="line"></span><br><span class="line">N = n</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">findp</span>(<span class="params">p,q</span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(p) == <span class="number">1024</span>:</span><br><span class="line"></span><br><span class="line">​    pp = <span class="built_in">int</span>(p,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> N % pp == <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">​      <span class="built_in">print</span>(<span class="string">&quot;p = &quot;</span>,pp)</span><br><span class="line"></span><br><span class="line">​      <span class="built_in">print</span>(<span class="string">&quot;q = &quot;</span>,N // pp)</span><br><span class="line"></span><br><span class="line">​      </span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">​    l = <span class="built_in">len</span>(p)</span><br><span class="line"></span><br><span class="line">​    pp = <span class="built_in">int</span>(p,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">​    qq = <span class="built_in">int</span>(q,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> (pp ^ qq) % (<span class="number">2</span> ** l) == gift %(<span class="number">2</span>**l) <span class="keyword">and</span> pp * qq %(<span class="number">2</span> ** l) == N % (<span class="number">2</span>**l):</span><br><span class="line"></span><br><span class="line">​      findp(<span class="string">&#x27;1&#x27;</span> + p,<span class="string">&#x27;1&#x27;</span> + q)</span><br><span class="line"></span><br><span class="line">​      findp(<span class="string">&#x27;1&#x27;</span> + p,<span class="string">&#x27;0&#x27;</span> + q)</span><br><span class="line"></span><br><span class="line">​      findp(<span class="string">&#x27;0&#x27;</span> + p,<span class="string">&#x27;1&#x27;</span> + q)</span><br><span class="line"></span><br><span class="line">​      findp(<span class="string">&#x27;0&#x27;</span> + p,<span class="string">&#x27;0&#x27;</span> + q)</span><br><span class="line"></span><br><span class="line">findp(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p =  <span class="number">108045183697150150388387022354644400710478293913561934644429795432215423775530425605908182580593052688767602845916543591389876983486365655433122184730638261805104817521990528440087160333620946042644532377495148124034395624084891184068389351273643076713603146320842702638033574169713784743740616625029744269901</span></span><br><span class="line"></span><br><span class="line">q =  <span class="number">162425027220271125112526550171672938857893430024995932152889092099422586505033382180804478364393931237258447320092961243322668725162648364707802747415904697459860150694631370547480969861302019742765437290474761611392061846348666931019756117786729418306582157981576014548722349380873871951268540431460375255351</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c,d,N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure><h1 id="plug-and-chug">plug and chug</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime</span><br><span class="line"></span><br><span class="line">n = getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">a = getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">tries = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess</span>():</span><br><span class="line"></span><br><span class="line">  <span class="keyword">global</span> n</span><br><span class="line"></span><br><span class="line">  ans = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;What is n? &quot;</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ans == n:</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">print</span>(<span class="string">f&quot;flag: <span class="subst">&#123;f.read()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">print</span>(<span class="string">&quot;Wrong&quot;</span>)</span><br><span class="line"></span><br><span class="line">  exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> tries &lt; <span class="number">10</span>:</span><br><span class="line"></span><br><span class="line">  inp = <span class="built_in">input</span>(<span class="string">&quot;Gimme a number (or type &#x27;guess&#x27; to guess): &quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> inp == <span class="string">&quot;guess&quot;</span>:</span><br><span class="line"></span><br><span class="line">​    guess()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">​    x = <span class="built_in">int</span>(inp)</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> x**<span class="number">2</span> &lt; <span class="number">996491788296388609</span>:</span><br><span class="line"></span><br><span class="line">​      <span class="built_in">print</span>(<span class="string">&quot;Too small&quot;</span>)</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">​    <span class="built_in">print</span>(<span class="built_in">pow</span>(a, x, n))</span><br><span class="line"></span><br><span class="line">​    tries += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;You have used your ten guesses.&quot;</span>)</span><br><span class="line"></span><br><span class="line">guess()</span><br></pre></td></tr></table></figure><p>题目代码不难看懂</p><p>生成两个1014位的素数a,n</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n = getPrime(1024)</span><br><span class="line"></span><br><span class="line">a = getPrime(1024)</span><br></pre></td></tr></table></figure><p>我们可以输入x，保证 <spanclass="math display"><em>x</em><sup>2</sup> &gt;  = 996491788296388609</span>然后得到pow(a, x, n)</p><p>这里我们最多能查询10次</p><p>所以想要求得flag，就要在10次之内用返回结果求出n</p><p>我们可以利用指数的倍数关系，建立关于模数 n 的方程 <spanclass="math display"><em>a</em><sup>2<em>x</em></sup> mod  <em>n</em> = (<em>a</em><sup><em>x</em></sup> ⋅ <em>a</em><sup><em>x</em></sup>) mod  <em>n</em> = ((<em>a</em><sup><em>x</em></sup> mod  <em>n</em>) ⋅ (<em>a</em><sup><em>x</em></sup> mod  <em>n</em>)) mod  <em>n</em></span>换句话说，如果我们知道 <spanclass="math inline"><em>y</em> = <em>a</em><sup><em>x</em></sup> mod  <em>n</em></span>，那么<spanclass="math inline"><em>a</em><sup>2<em>x</em></sup> mod  <em>n</em></span>就等于 <spanclass="math inline"><em>y</em><sup>2</sup> mod  <em>n</em></span></p><p>解密流程是这样的</p><p>1、首先我们选择一个x发送给服务器</p><p>2、服务器返回给我们<spanclass="math inline"><em>y</em> = <em>a</em><sup><em>x</em></sup> mod  <em>n</em></span></p><p>3、我们再发送给服务器2*x</p><p>4、服务器返回<spanclass="math inline"><em>z</em> = <em>a</em><sup>2<em>x</em></sup> mod  <em>n</em></span></p><p>根据上面的推导我们知道y^2 和 z 在模 n 下同余</p><p>也就是 <spanclass="math display"><em>y</em><sup>2</sup> ≡ <em>z</em> (mod  <em>n</em>)</span>所以n就是y^2-z的因子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;litctf.org&#x27;</span>, <span class="number">31789</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 满足 x^2 &gt;= 996491788296388609 的最小 x</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sqrt(996491788296388609) = 998244353</span></span><br><span class="line"></span><br><span class="line">min_x = <span class="number">998244353</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 第一次交互，获取 D1 ---</span></span><br><span class="line"></span><br><span class="line">x1 = min_x</span><br><span class="line">x2 = <span class="number">2</span> * x1</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">f&quot;Sending x1 = <span class="subst">&#123;x1&#125;</span>&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;Gimme a number (or type &#x27;guess&#x27; to guess): &quot;</span>, <span class="built_in">str</span>(x1).encode())</span><br><span class="line">y1 = <span class="built_in">int</span>(p.recvline().strip())</span><br><span class="line">log.success(<span class="string">f&quot;Received y1 = <span class="subst">&#123;y1&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">f&quot;Sending x2 = <span class="subst">&#123;x2&#125;</span>&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;Gimme a number (or type &#x27;guess&#x27; to guess): &quot;</span>, <span class="built_in">str</span>(x2).encode())</span><br><span class="line">y2 = <span class="built_in">int</span>(p.recvline().strip())</span><br><span class="line">log.success(<span class="string">f&quot;Received y2 = <span class="subst">&#123;y2&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 D1 = y1^2 - y2</span></span><br><span class="line"></span><br><span class="line">D1 = y1**<span class="number">2</span> - y2</span><br><span class="line">log.info(<span class="string">f&quot;Calculated D1 = y1^2 - y2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 第二次交互，获取 D2 ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个不同的 x 来生成另一组关系</span></span><br><span class="line"></span><br><span class="line">x3 = min_x + <span class="number">1</span></span><br><span class="line">x4 = <span class="number">2</span> * x3</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">f&quot;Sending x3 = <span class="subst">&#123;x3&#125;</span>&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;Gimme a number (or type &#x27;guess&#x27; to guess): &quot;</span>, <span class="built_in">str</span>(x3).encode())</span><br><span class="line">y3 = <span class="built_in">int</span>(p.recvline().strip())</span><br><span class="line">log.success(<span class="string">f&quot;Received y3 = <span class="subst">&#123;y3&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">f&quot;Sending x4 = <span class="subst">&#123;x4&#125;</span>&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;Gimme a number (or type &#x27;guess&#x27; to guess): &quot;</span>, <span class="built_in">str</span>(x4).encode())</span><br><span class="line">y4 = <span class="built_in">int</span>(p.recvline().strip())</span><br><span class="line">log.success(<span class="string">f&quot;Received y4 = <span class="subst">&#123;y4&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 D2 = y3^2 - y4</span></span><br><span class="line"></span><br><span class="line">D2 = y3**<span class="number">2</span> - y4</span><br><span class="line">log.info(<span class="string">f&quot;Calculated D2 = y3^2 - y4&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 计算 n 并提交 ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># n 是 D1 和 D2 的最大公约数</span></span><br><span class="line"></span><br><span class="line">n_guess = math.gcd(D1, D2)</span><br><span class="line">log.success(<span class="string">f&quot;Found potential n: <span class="subst">&#123;n_guess&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;Sending &#x27;guess&#x27; command&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;Gimme a number (or type &#x27;guess&#x27; to guess): &quot;</span>, <span class="string">b&quot;guess&quot;</span>)</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">f&quot;Submitting final guess for n: <span class="subst">&#123;n_guess&#125;</span>&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;What is n? &quot;</span>, <span class="built_in">str</span>(n_guess).encode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收 flag</span></span><br><span class="line"></span><br><span class="line">flag = p.recvline().decode()</span><br><span class="line">log.success(<span class="string">f&quot;Flag: <span class="subst">&#123;flag.strip()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h1 id="rng5050">rng5050</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long <span class="keyword">as</span> btl, long_to_bytes <span class="keyword">as</span> ltb</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">key = <span class="string">b&quot;LITCTF&#123;[redacted]&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">keyLen = <span class="built_in">len</span>(key)</span><br><span class="line"></span><br><span class="line">keyInt = btl(key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getRand</span>():</span><br><span class="line"></span><br><span class="line">​    copy = keyInt</span><br><span class="line"></span><br><span class="line">​    res = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(keyLen*<span class="number">8</span>):</span><br><span class="line"></span><br><span class="line">​        bit = copy % <span class="number">2</span></span><br><span class="line"></span><br><span class="line">​        copy &gt;&gt;= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">​        add = <span class="built_in">int</span>(random() / random() + <span class="number">0.5</span>) % <span class="number">2</span></span><br><span class="line"></span><br><span class="line">​        res += <span class="built_in">str</span>(bit ^ add)</span><br><span class="line"></span><br><span class="line">​    res = res[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">print</span>(getRand())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ltb(<span class="built_in">int</span>(getRand(), <span class="number">2</span>) ^ btl(key)).<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure><p>求出来的flag是LITCTF{n0t_4_c0!n[fliP…c66f2b}</p><p>不知道哪里出了问题交不上</p>]]></content>
      
      
      <categories>
          
          <category> Wp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NetDream2025</title>
      <link href="/2025/08/19/NetDream2025/"/>
      <url>/2025/08/19/NetDream2025/</url>
      
        <content type="html"><![CDATA[<h1 id="ezrsa">EzRSA</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">FLAG = <span class="string">b&quot;flag&#123;xxxxxxx&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">BIT_SIZE = <span class="number">512</span></span><br><span class="line"></span><br><span class="line">DIFF = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_close_primes</span>(<span class="params">bit_size, diff</span>):</span><br><span class="line"></span><br><span class="line">  start = random.getrandbits(bit_size) | <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  p = nextprime(start)</span><br><span class="line"></span><br><span class="line">  q = nextprime(p + diff)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flag_to_int</span>(<span class="params">flag_bytes</span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">int</span>.from_bytes(flag_bytes, byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">  p, q = generate_close_primes(BIT_SIZE, DIFF)</span><br><span class="line"></span><br><span class="line">  n = p * q</span><br><span class="line"></span><br><span class="line">  e = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  m = flag_to_int(FLAG)</span><br><span class="line"></span><br><span class="line">  c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">  main()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">n = 3256593900815599638610948588846270419272266309072355018531019815816383416972716648196614202756266923662468043040766972587895880348728177684427108179441398076920699534139836200520410133083399544975367893285080239622582380507397956076038256757810824984700446326253944197017126171652309637891515864542581815539</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">e = 3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">c = 1668144786169714702301094076704686642891065952249900945234348491495868262367689770718451252978033214169821458376529832891775500377565608075759008139982766645172498702491199793075638838575243018129218596030822468832530007275522627172632933</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>先说一个非预期的解法吧</p><p>因为这里的e=3,所以我们可以直接对m开三次方这样可以得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">c = <span class="number">1668144786169714702301094076704686642891065952249900945234348491495868262367689770718451252978033214169821458376529832891775500377565608075759008139982766645172498702491199793075638838575243018129218596030822468832530007275522627172632933</span></span><br><span class="line">m = iroot(c, <span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line">flag = <span class="built_in">int</span>(m).to_bytes((<span class="built_in">int</span>(m).bit_length() + <span class="number">7</span>) // <span class="number">8</span>, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#print(long_to_bytes(m))  直接用这个也行</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再说说预期的解法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_close_primes</span>(<span class="params">bit_size, diff</span>):</span><br><span class="line"></span><br><span class="line">  start = random.getrandbits(bit_size) | <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  p = nextprime(start)</span><br><span class="line"></span><br><span class="line">  q = nextprime(p + diff)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> p, q</span><br></pre></td></tr></table></figure><p>这里就是生成两个相邻素数p,q</p><p>其中q是p + DIFF的下一个素数</p><p>我们可以用费马分解求出p,q</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> isqrt</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fermat</span>(<span class="params">n</span>):</span><br><span class="line"></span><br><span class="line">  a = isqrt(n)</span><br><span class="line"></span><br><span class="line">  b2 = a * a - n</span><br><span class="line"></span><br><span class="line">  b = isqrt(n)</span><br><span class="line"></span><br><span class="line">  count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> b * b != b2:</span><br><span class="line"></span><br><span class="line">    a = a + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    b2 = a * a - n</span><br><span class="line"></span><br><span class="line">    b = isqrt(b2)</span><br><span class="line"></span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  p = a + b</span><br><span class="line"></span><br><span class="line">  q = a - b</span><br><span class="line"></span><br><span class="line">  <span class="keyword">assert</span> n == p * q</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">  n = <span class="number">3256593900815599638610948588846270419272266309072355018531019815816383416972716648196614202756266923662468043040766972587895880348728177684427108179441398076920699534139836200520410133083399544975367893285080239622582380507397956076038256757810824984700446326253944197017126171652309637891515864542581815539</span></span><br><span class="line"></span><br><span class="line">  e = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  c = <span class="number">1668144786169714702301094076704686642891065952249900945234348491495868262367689770718451252978033214169821458376529832891775500377565608075759008139982766645172498702491199793075638838575243018129218596030822468832530007275522627172632933</span></span><br><span class="line"></span><br><span class="line">  p, q = fermat(n)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;p=&quot;</span>, p)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;q=&quot;</span>, q)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里我们发现e与phi不互素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GCD(e, phi) = 3</span><br></pre></td></tr></table></figure><p>因为这里很小，我们可以用公约数暂约来做</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> isqrt</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fermat</span>(<span class="params">n</span>):</span><br><span class="line"></span><br><span class="line">  a = isqrt(n)</span><br><span class="line"></span><br><span class="line">  b2 = a * a - n</span><br><span class="line"></span><br><span class="line">  b = isqrt(n)</span><br><span class="line"></span><br><span class="line">  count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> b * b != b2:</span><br><span class="line"></span><br><span class="line">​    a = a + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">​    b2 = a * a - n</span><br><span class="line"></span><br><span class="line">​    b = isqrt(b2)</span><br><span class="line"></span><br><span class="line">​    count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  p = a + b</span><br><span class="line"></span><br><span class="line">  q = a - b</span><br><span class="line"></span><br><span class="line">  <span class="keyword">assert</span> n == p * q</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">  n = <span class="number">3256593900815599638610948588846270419272266309072355018531019815816383416972716648196614202756266923662468043040766972587895880348728177684427108179441398076920699534139836200520410133083399544975367893285080239622582380507397956076038256757810824984700446326253944197017126171652309637891515864542581815539</span></span><br><span class="line"></span><br><span class="line">  e = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  c = <span class="number">1668144786169714702301094076704686642891065952249900945234348491495868262367689770718451252978033214169821458376529832891775500377565608075759008139982766645172498702491199793075638838575243018129218596030822468832530007275522627172632933</span></span><br><span class="line"></span><br><span class="line">  p, q = fermat(n)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;p=&quot;</span>, p)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;q=&quot;</span>, q)</span><br><span class="line"></span><br><span class="line">  phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  t = gmpy2.gcd(e,phi)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> t != <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line"> <span class="built_in">print</span>(t)</span><br><span class="line"></span><br><span class="line"> e1 = e // t</span><br><span class="line"></span><br><span class="line"> d = gmpy2.invert(e1,phi)</span><br><span class="line"></span><br><span class="line"> m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"></span><br><span class="line"> <span class="built_in">print</span>(long_to_bytes(gmpy2.iroot(m,t)[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><h1 id="quaternion-lock">Quaternion Lock</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">p = <span class="number">9223372036854775783</span> </span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">subgroup_order = <span class="number">60480</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">qmul</span>(<span class="params">q1, q2, p</span>):</span><br><span class="line"></span><br><span class="line">  a1, b1, c1, d1 = q1</span><br><span class="line"></span><br><span class="line">  a2, b2, c2, d2 = q2</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line"></span><br><span class="line">​    (a1*a2 - b1*b2 - c1*c2 - d1*d2) % p,</span><br><span class="line"></span><br><span class="line">​    (a1*b2 + b1*a2 + c1*d2 - d1*c2) % p,</span><br><span class="line"></span><br><span class="line">​    (a1*c2 - b1*d2 + c1*a2 + d1*b2) % p,</span><br><span class="line"></span><br><span class="line">​    (a1*d2 + b1*c2 - c1*b2 + d1*a2) % p</span><br><span class="line"></span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">qconj</span>(<span class="params">q, p</span>):</span><br><span class="line"></span><br><span class="line">  a, b, c, d = q</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (a % p, (-b) % p, (-c) % p, (-d) % p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">qnorm</span>(<span class="params">q, p</span>):</span><br><span class="line"></span><br><span class="line">  a, b, c, d = q</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (a*a + b*b + c*c + d*d) % p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">qinv</span>(<span class="params">q, p</span>):</span><br><span class="line"></span><br><span class="line">  n = qnorm(q, p)</span><br><span class="line"></span><br><span class="line">  inv_n = <span class="built_in">pow</span>(n, -<span class="number">1</span>, p)</span><br><span class="line"></span><br><span class="line">  qc = qconj(q, p)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (qc[<span class="number">0</span>] * inv_n % p, qc[<span class="number">1</span>] * inv_n % p, qc[<span class="number">2</span>] * inv_n % p, qc[<span class="number">3</span>] * inv_n % p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">qpow</span>(<span class="params">q, exp, p</span>):</span><br><span class="line"></span><br><span class="line">  result = (<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  base = q</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> exp:</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> exp &amp; <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">​      result = qmul(result, base, p)</span><br><span class="line"></span><br><span class="line">​    base = qmul(base, base, p)</span><br><span class="line"></span><br><span class="line">​    exp //= <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_flag</span>(<span class="params">flag</span>):</span><br><span class="line"></span><br><span class="line">  flag_bytes = flag.encode()</span><br><span class="line"></span><br><span class="line">  parts = [flag_bytes[<span class="number">0</span>:<span class="number">8</span>], flag_bytes[<span class="number">8</span>:<span class="number">15</span>], flag_bytes[<span class="number">15</span>:<span class="number">22</span>], flag_bytes[<span class="number">22</span>:<span class="number">29</span>]]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">tuple</span>(<span class="built_in">int</span>.from_bytes(part, <span class="string">&#x27;big&#x27;</span>) <span class="keyword">for</span> part <span class="keyword">in</span> parts)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">  flag = <span class="string">&quot;flag&#123;xxx-xxx-xxx-xxx-xxx-xxx&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">  F = encode_flag(flag)</span><br><span class="line"></span><br><span class="line">  F_q = F</span><br><span class="line"></span><br><span class="line">  g = (<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  h = qpow(g, ((p * p - <span class="number">1</span>) // subgroup_order), p)</span><br><span class="line"></span><br><span class="line">  r = random.randint(<span class="number">1</span>, subgroup_order - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  K = qpow(h, r, p)</span><br><span class="line"></span><br><span class="line">  Y = qpow(K, e, p)</span><br><span class="line"></span><br><span class="line">  K_inv = qinv(K, p)</span><br><span class="line"></span><br><span class="line">  X = qmul(K, qmul(F_q, K_inv, p), p)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;----- Public Parameters -----&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;p =&quot;</span>, p)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>, e)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;X =&quot;</span>, X) </span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Y =&quot;</span>, Y) </span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;-----------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">  main()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">X = (7380380986429696832, 34163292457091182, 3636630423226195928, 3896730209645707435)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Y = (1015918725738180802, 4456058114364993854, 0, 0)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>这里一个基于四元数的加密系统,这篇<ahref="https://www.cnblogs.com/noluye/p/12391719.html">文章</a>有介绍</p><ul><li><strong><code>qmul(q1, q2, p)</code></strong>: 四元数乘法（模<code>p</code>）<ul><li>计算两个四元数 <code>q1</code> 和 <code>q2</code>的乘积，并对每个分量取模 <code>p</code>。</li></ul></li><li><strong><code>qconj(q, p)</code></strong>: 四元数共轭<ul><li>返回四元数 <code>q</code> 的共轭（即<code>(a, -b, -c, -d)</code>）。</li></ul></li><li><strong><code>qnorm(q, p)</code></strong>: 四元数范数（模长的平方）<ul><li>计算 <code>a² + b² + c² + d² mod p</code>。</li></ul></li><li><strong><code>qinv(q, p)</code></strong>: 四元数逆元<ul><li>通过共轭和范数的逆元计算四元数的乘法逆元。</li></ul></li><li><strong><code>qpow(q, exp, p)</code></strong>: 四元数的快速幂<ul><li>使用快速幂算法计算四元数 <code>q</code> 的 <code>exp</code>次幂</li></ul></li></ul><p>这里flag被分为四个部分，然后转为整数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encode_flag</span>(<span class="params">flag</span>):</span><br><span class="line"></span><br><span class="line">  flag_bytes = flag.encode()</span><br><span class="line"></span><br><span class="line">  parts = [flag_bytes[<span class="number">0</span>:<span class="number">8</span>], flag_bytes[<span class="number">8</span>:<span class="number">15</span>], flag_bytes[<span class="number">15</span>:<span class="number">22</span>], flag_bytes[<span class="number">22</span>:<span class="number">29</span>]]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">tuple</span>(<span class="built_in">int</span>.from_bytes(part, <span class="string">&#x27;big&#x27;</span>) <span class="keyword">for</span> part <span class="keyword">in</span> parts)</span><br></pre></td></tr></table></figure><p>同时给了三个参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">9223372036854775783</span> </span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">subgroup_order = <span class="number">60480</span>   <span class="comment">#子群的阶</span></span><br><span class="line"></span><br><span class="line">g = (<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>)         <span class="comment">#一个固定的四元数，作为生成元</span></span><br></pre></td></tr></table></figure><p>生成密钥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">h = qpow(g, ((p * p - <span class="number">1</span>) // subgroup_order), p)</span><br><span class="line"></span><br><span class="line">r = random.randint(<span class="number">1</span>, subgroup_order - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">K = qpow(h, r, p)</span><br><span class="line"></span><br><span class="line">Y = qpow(K, e, p)</span><br></pre></td></tr></table></figure><p>加密等式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">K_inv = qinv(K, p)</span><br><span class="line"></span><br><span class="line">X = qmul(K, qmul(F_q, K_inv, p), p)</span><br></pre></td></tr></table></figure><p>现在需要先恢复K</p><p>我们直接枚举爆破出K，然后算出K_inv</p><p>最后F_q = K_inv * X * K mod p</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">qmul</span>(<span class="params">q1, q2, p</span>):</span><br><span class="line"></span><br><span class="line">  a1, b1, c1, d1 = q1</span><br><span class="line"></span><br><span class="line">  a2, b2, c2, d2 = q2</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line"></span><br><span class="line">​    (a1*a2 - b1*b2 - c1*c2 - d1*d2) % p,</span><br><span class="line"></span><br><span class="line">​    (a1*b2 + b1*a2 + c1*d2 - d1*c2) % p,</span><br><span class="line"></span><br><span class="line">​    (a1*c2 - b1*d2 + c1*a2 + d1*b2) % p,</span><br><span class="line"></span><br><span class="line">​    (a1*d2 + b1*c2 - c1*b2 + d1*a2) % p</span><br><span class="line"></span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">qconj</span>(<span class="params">q, p</span>):</span><br><span class="line"></span><br><span class="line">  a, b, c, d = q</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (a % p, (-b) % p, (-c) % p, (-d) % p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">qnorm</span>(<span class="params">q, p</span>):</span><br><span class="line"></span><br><span class="line">  a, b, c, d = q</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (a*a + b*b + c*c + d*d) % p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">qinv</span>(<span class="params">q, p</span>):</span><br><span class="line"></span><br><span class="line">  n = qnorm(q, p)</span><br><span class="line"></span><br><span class="line">  inv_n = <span class="built_in">pow</span>(n, -<span class="number">1</span>, p)</span><br><span class="line"></span><br><span class="line">  qc = qconj(q, p)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (qc[<span class="number">0</span>] * inv_n % p, qc[<span class="number">1</span>] * inv_n % p, qc[<span class="number">2</span>] * inv_n % p, qc[<span class="number">3</span>] * inv_n % p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">qpow</span>(<span class="params">q, exp, p</span>):</span><br><span class="line"></span><br><span class="line">  result = (<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  base = q</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> exp:</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> exp &amp; <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">​      result = qmul(result, base, p)</span><br><span class="line"></span><br><span class="line">​    base = qmul(base, base, p)</span><br><span class="line"></span><br><span class="line">​    exp //= <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">p, e, subgroup_order, X, Y</span>):</span><br><span class="line"></span><br><span class="line">  g = (<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  h = qpow(g, ((p*p - <span class="number">1</span>)//subgroup_order), p)</span><br><span class="line"></span><br><span class="line">  \<span class="comment"># brute force for K</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, subgroup_order):</span><br><span class="line"></span><br><span class="line">​    Kcand = qpow(h, r, p)</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> qpow(Kcand, e, p) == Y:</span><br><span class="line"></span><br><span class="line">​      K = Kcand</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">raise</span> Exception(<span class="string">&quot;K not found!&quot;</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  \<span class="comment"># F = K^-1 * X * K</span></span><br><span class="line"></span><br><span class="line">  K_inv = qinv(K, p)</span><br><span class="line"></span><br><span class="line">  F_q = qmul(K_inv, qmul(X, K, p), p)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> F_q</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 测试数据</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">9223372036854775783</span> </span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">subgroup_order = <span class="number">60480</span></span><br><span class="line"></span><br><span class="line">X = (<span class="number">7380380986429696832</span>, <span class="number">34163292457091182</span>, <span class="number">3636630423226195928</span>, <span class="number">3896730209645707435</span>)</span><br><span class="line"></span><br><span class="line">Y = (<span class="number">1015918725738180802</span>, <span class="number">4456058114364993854</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">F_q = decrypt(p, e, subgroup_order, X, Y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Recovered quaternion:&quot;</span>, F_q)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Recovered flag:&quot;</span>, <span class="string">b&quot;&quot;</span>.join(x.to_bytes((x.bit_length()+<span class="number">7</span>)//<span class="number">8</span>, <span class="string">&#x27;big&#x27;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> F_q))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>杂题</title>
      <link href="/2025/08/05/%E6%9D%82%E9%A2%98/"/>
      <url>/2025/08/05/%E6%9D%82%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="nepnep2025-lattice-bros">Nepnep2025 Lattice Bros</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#已知α的极小多项式为三次多项式f(x),即f(α)=0,且α≈54236.606188881754809671280151541781895183337725393</span><br><span class="line"></span><br><span class="line">#上述极小多项式的常数项为a0</span><br><span class="line"></span><br><span class="line">from secret import a0,alpha</span><br><span class="line"></span><br><span class="line">import gmpy2</span><br><span class="line"></span><br><span class="line">from Crypto.Util.number import long_to_bytes</span><br><span class="line"></span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line">from math import sqrt,log2</span><br><span class="line"></span><br><span class="line">d=981020902672546902438782010902608140583199504862558032616415</span><br><span class="line"></span><br><span class="line">p = d - a0</span><br><span class="line"></span><br><span class="line">k=sqrt(log2(p))+log2(log2(p))</span><br><span class="line"></span><br><span class="line">B = 2**30</span><br><span class="line"></span><br><span class="line">assert B &lt; p/2**k</span><br><span class="line"></span><br><span class="line">m = 30</span><br><span class="line"></span><br><span class="line">assert m &gt; 2*sqrt(log2(p))</span><br><span class="line"></span><br><span class="line">samples = []</span><br><span class="line"></span><br><span class="line">betas = []</span><br><span class="line"></span><br><span class="line">f = open(&quot;samples.txt&quot;,&#x27;w&#x27;)</span><br><span class="line"></span><br><span class="line">for _ in range(m):</span><br><span class="line"></span><br><span class="line">  t = random.randint(1, p-1)</span><br><span class="line"></span><br><span class="line">  beta = random.randint(-B + 1, B - 1)</span><br><span class="line"></span><br><span class="line">  a = (t * alpha - beta) % p</span><br><span class="line"></span><br><span class="line">  samples.append((t, a))</span><br><span class="line"></span><br><span class="line">  betas.append(beta)</span><br><span class="line"></span><br><span class="line">f.write(str(samples))</span><br><span class="line"></span><br><span class="line">for i in range(0,30):</span><br><span class="line"></span><br><span class="line">  assert (betas[i]-samples[i][0]*alpha+samples[i][1])%p == 0</span><br><span class="line"></span><br><span class="line">#flag = long_to_bytes(alpha)</span><br></pre></td></tr></table></figure><p>首先我们需要恢复的是a0的值</p><p>我们可以利用LLL算法来恢复一定次数的极小多项式，对于多项式来说我们有<spanclass="math display"><em>a</em><sub>0</sub> + <em>a</em><sub>1</sub><em>x</em> + <em>a</em><sub>2</sub><em>x</em><sup>2</sup> + <em>a</em><sub>3</sub><em>x</em><sup>3</sup> = 0</span></p><p><span class="math display">$$\begin{pmatrix}a_0&amp;a_1&amp;a_2&amp;a_3\end{pmatrix}\begin{pmatrix}1 &amp;0&amp; 0 &amp; a^0M\\0&amp; 1 &amp; 0 &amp; a^1M\\0&amp;0&amp; 1 &amp; a^2M\\0&amp;0&amp;  0&amp;a^3M\end{pmatrix}$$</span></p><p>这里我们M我们根据a的的精度选择10^50来配平</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">54236.606188881754809671280151541781895183337725393</span></span><br><span class="line"></span><br><span class="line">M=<span class="number">10</span>**<span class="number">50</span></span><br><span class="line"></span><br><span class="line">Matrix=matrix(ZZ,[[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,a^<span class="number">0</span>*M],</span><br><span class="line"></span><br><span class="line">         [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,a^<span class="number">1</span>*M],</span><br><span class="line"></span><br><span class="line">         [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,a^<span class="number">2</span>*M],</span><br><span class="line"></span><br><span class="line">         [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,a^<span class="number">3</span>*M]])</span><br><span class="line"></span><br><span class="line">L=Matrix.LLL()</span><br><span class="line"></span><br><span class="line">a0=L[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a0)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里其它师傅那里看到了sagemath的内置函数可以求解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">alpha = <span class="number">54236.606188881754809671280151541781895183337725393</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">f = algdep(alpha, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">a0 = f(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a0)</span><br></pre></td></tr></table></figure><p>得到a0之后我们可以直接求出p</p><p>之后就是HNP问题了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">a0=-<span class="number">159534088683654</span></span><br><span class="line"></span><br><span class="line">lis = [(<span class="number">541847931463604073209188621415697353813245102261880389530448</span>, <span class="number">293760933113243563398917466885108625646262447370201484418246</span>), (<span class="number">235213326900086489464935804156966465366154623411555613791270</span>, <span class="number">660823982268225103178763707015491421784294988488272636270997</span>), (<span class="number">826464884761457937459245903152143755707241416981488127320435</span>, <span class="number">428521663319038461250005113612781686761766888058391496085911</span>), (<span class="number">589542000504317435156560078533519448295689695687499354390208</span>, <span class="number">155284353896000150766154807679279597476176668344402166959399</span>), (<span class="number">968823371588600973965757332601758200815345862153455338808286</span>, <span class="number">870008943690791009196027169525956126827736285614393106689402</span>), (<span class="number">621636099728440147413990266662022925118216803638588918660041</span>, <span class="number">265635912066749696542909843111997941904342442664219734956888</span>), (<span class="number">426696569424050102229606043215592727790577655338668728275370</span>, <span class="number">279313121876980354011480010042682666651614765507190502627689</span>), (<span class="number">89450479064580125731654556963306718472532905610952012502649</span>, <span class="number">465933125964565419295325650759566635253450915499965633327941</span>), (<span class="number">480355476500393865742379469913983270769356894135485925662119</span>, <span class="number">894041172171871806404285309781862268351135623868845025443422</span>), (<span class="number">842436524669577199024236805258573090764419350786291073287889</span>, <span class="number">345478552143958037534551648319293899442551000874041707820740</span>), (<span class="number">650054674429185550652935714084022116516082323269321462104664</span>, <span class="number">441999979283903658157822753439653947343822546158589507765994</span>), (<span class="number">46289431385578693366971976442426853079852982529357847290686</span>, <span class="number">625618376463384339878849844467050454204685252824782609369180</span>), (<span class="number">71444185449163133531919043374545893927347050624346741281881</span>, <span class="number">955925578289311966288639224625142299309823207245807788495453</span>), (<span class="number">192579726169321656812883068526498248523814846320328766176253</span>, <span class="number">626481822474054336470183912297952839011392733501646931370367</span>), (<span class="number">736527635648804640774976580747540045854351230084566721853611</span>, <span class="number">276626211757586963928788091386096607703513204646314683038338</span>), (<span class="number">177922521867185878959621840269164617147915792720210315529733</span>, <span class="number">541058782621716573816245900423919799500476442285991532228641</span>), (<span class="number">40610451174818168154306630612571678739921107216052349044576</span>, <span class="number">727642592899858828601137105077611015328512898368636299587376</span>), (<span class="number">385012983728389322601149562441674995471397288632464238356283</span>, <span class="number">353921151307105661267278594470212933060655245893209524497156</span>), (<span class="number">750447975601038834764379841158092390933760641866111445401426</span>, <span class="number">391626416964965737035878375834907580903143512300198923948189</span>), (<span class="number">115058604943298010958881205548782439407592353731185670266593</span>, <span class="number">491630592857258949793489206081490523001249620510479961058022</span>), (<span class="number">327389234395954477946639629629085910688793716425320663599360</span>, <span class="number">24975272330009592102362429346350824580378490147041708568130</span>), (<span class="number">115595274689129534885608766476695918464309130165432995990883</span>, <span class="number">757961876891952019297626599379744405302595090402128271144165</span>), (<span class="number">950804723308776351161744501221236453742418549093165078282534</span>, <span class="number">20307246759635231945223392614290397512873344480184942904518</span>), (<span class="number">724537610412063699714461780160573528810830178440136810747811</span>, <span class="number">149681928388378582933943374524511804362928290938917573644613</span>), (<span class="number">340891278018589324130004945217960336392205386747747011263373</span>, <span class="number">683307718413135477104477081812052183267507312278283317237187</span>), (<span class="number">104379682905784169840335131193505192063050242530811180817410</span>, <span class="number">715010230598797717533306270232399781090458356371977748416491</span>), (<span class="number">644160326926600986730919713173510327120201404569141824224075</span>, <span class="number">127877985489410167008195578625004740882394608402141169695352</span>), (<span class="number">549253388716005399852261816416312267100135940382820676807345</span>, <span class="number">210560134643237517255193955173709174155305784935427470113433</span>), (<span class="number">968265711632086435506163736279856957220961064226797549228006</span>, <span class="number">273174723915971720522674140326199419265943707917542063022561</span>), (<span class="number">704367622558261900937184683100177434487519780290678439135652</span>, <span class="number">959106497548134540301589019840013331842784496835379005298630</span>)]</span><br><span class="line"></span><br><span class="line">d=<span class="number">981020902672546902438782010902608140583199504862558032616415</span></span><br><span class="line"></span><br><span class="line">p = d - a0</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> p.is_prime():</span><br><span class="line"></span><br><span class="line">  B = <span class="number">2</span>**<span class="number">30</span></span><br><span class="line"></span><br><span class="line">  ge = [[<span class="number">0</span>] * <span class="number">32</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line"></span><br><span class="line">    ge[i][i] = p</span><br><span class="line"></span><br><span class="line">    ge[-<span class="number">2</span>][i] = lis[i][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    ge[-<span class="number">1</span>][i] = lis[i][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">  ge[-<span class="number">2</span>][-<span class="number">2</span>] = B/p</span><br><span class="line"></span><br><span class="line">  ge[-<span class="number">1</span>][-<span class="number">1</span>] = B</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  Ge = Matrix(QQ, ge)</span><br><span class="line"></span><br><span class="line">  L = Ge.LLL()</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> row <span class="keyword">in</span> L:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">abs</span>(row[-<span class="number">1</span>]) == B:</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">      <span class="built_in">print</span>(long_to_bytes(p-<span class="built_in">int</span>(row[-<span class="number">2</span>]*p/B)))</span><br></pre></td></tr></table></figure><h1 id="nepnep2025-ezrsa2">Nepnep2025 ezRSA2</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getStrongPrime, getRandomNBitInteger, GCD, inverse, long_to_bytes, bytes_to_long, sieve_base</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_parameters</span>(<span class="params">gamma=<span class="number">0.33</span>, beta=<span class="number">0.33</span></span>):</span><br><span class="line"></span><br><span class="line">  p = getStrongPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">  q = getStrongPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">  N = p*q</span><br><span class="line"></span><br><span class="line">  phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">    d = getRandomNBitInteger(<span class="built_in">int</span>(<span class="number">2048</span>*beta))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> GCD(d, phi) == <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">  e = inverse(d, phi)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  hints = []</span><br><span class="line"></span><br><span class="line">  M = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(sieve_base)):</span><br><span class="line"></span><br><span class="line">    li = sieve_base[i]</span><br><span class="line"></span><br><span class="line">    hints.append(d%li)</span><br><span class="line"></span><br><span class="line">    M *= li</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> M.bit_length() &gt;= <span class="number">1024</span>*gamma:</span><br><span class="line"></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> e, N, hints</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">  e,N,hints = gen_parameters()</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&#x27;e=<span class="subst">&#123;<span class="built_in">hex</span>(e)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&#x27;N=<span class="subst">&#123;<span class="built_in">hex</span>(N)&#125;</span>\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&#x27;hints=<span class="subst">&#123;hints&#125;</span>\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  flag_prefix = <span class="string">b&#x27;NepCTF&#123;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">assert</span> flag.startswith(flag_prefix)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">assert</span> flag.endswith(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  pt = bytes_to_long(flag[<span class="built_in">len</span>(flag_prefix):-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">  ct = <span class="built_in">pow</span>(pt, e, N)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&#x27;ct=<span class="subst">&#123;<span class="built_in">hex</span>(ct)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">e=0x73915608ed64c9cf1a2279684cab4f4a78fba229d45d4f860971a241481363470a19cb0dc0d00f816b5befdaca017cf71483e96ef17b36179012f5194a0e6bf481bb06c2644f74c6812efb65d05c00631f282d6aa55c0bc140a1830b95a1cf4b6024cb0db53f2c2189897c41f22e2eec773723f531ec4bfa537fae6de5fe480cf46fe17850f7eb47df08194d95db3d26ac923b26e110ee645239ab586bbc546ddc5906f280a106edbb727ccb05536b5a3f5c0ebcf865c95ce58be54f7f3547aa53baa218b0dfa98e42d925fa341e45f94a3b16b0c83802660c7f34de3336cb21f219073cf8e9f5e39d47f0a9a9ee7c255f09a6add9a2f7a47960f4a853183d29</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">N=0xba8956e81394f3f1265ca5d9c4ad1ab0078bb43c4b80a231ab2cc62246ae45f66a562252622aed2cbbfc08647ef2fec0f97a632bf2242845f4b3af0c427cec3d90f42e90278a5a0feeed0922a8cd2278074ac54e9cfc0e96ff68f8d8f266dd87dc1cc59c2895ec884de2022311767f6a9a7e0bd288c79620e28b83bb3c8d8ad1047c839d6ccf5544eaf434a5f00b951769ab3121298d04b63a162757beb3d49917cd0c9e02ee1ac29398c8130961d5a2f2833aba1e538edb7bb97071f40fae543d1622f0c9206c6d4d8abb2ac1b93ebfb603c2f3a909ede357ade4043550fe540d13a4e87db8d731fe130f15a43a1a00364f5da2d87f7b660c3a04e734218a11</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">hints=[1, 3, 0, 3, 9, 16, 10, 14, 5, 11, 21, 18, 30, 30, 38, 2, 20, 62, 66, 1, 22, 56, 41, 13, 78, 59, 51, 6, 57, 117, 73, 75, 96, 112, 50, 93, 158, 97, 146, 8, 65, 96, 186, 161, 90, 131, 46, 32, 140, 133, 50, 43, 151, 234]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ct=0x101b284ad196b5bbd3d3df00a7d3577caeb29c681bdd122582b705afc671febf45d4f3786640e55aadd6a31ecc49175f97b772720f1735f8555f768b137a4643cd6958f80a3dfca4d0270ad463d6dde93429940bd2abb5ad8408b0906fa8d776544a1c50cc0d95939bef4c3fb64d0b52dca81ff0f244fc265bfc0bc147435d05f8f1a146e963a1403b3c123b4d6e73d1fd897109995009be1673212607f0ea7ae33d23f3158448b05c28ea6636382eee9436c4a6c09023ead7182ecd55ac73a68d458d726e1abc208810468591e63f4b4c2c1f3ce27c4800b52f7421ccab432c03e88b3b255740d719e40e0226eabb7633d97ed210e32071e2ac36ed17ef442e</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>审计代码发现这里是关键函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">hints = []</span><br><span class="line"></span><br><span class="line"> M = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(sieve_base)):</span><br><span class="line"></span><br><span class="line">   li = sieve_base[i]</span><br><span class="line">   </span><br><span class="line">   hints.append(d%li)</span><br><span class="line">   </span><br><span class="line">   M *= li</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span> M.bit_length() &gt;= <span class="number">1024</span>*gamma:</span><br><span class="line">   </span><br><span class="line">     <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> e, N, hints</span><br></pre></td></tr></table></figure><p>这里我们可以得到hint的同余方程组 <span class="math display">$$\left\{\begin{array}{l}\operatorname{hint}_{0} \equiv d \ (\bmod \ sieve_base[1]) \\\operatorname{hint}_{1} \equiv d \ (\bmod \ sieve_base[2]) \\\cdots \\\operatorname{hint}_{r} \equiv d \ (\bmod \ sieve_base[i])\end{array}\right.$$</span></p><p>同时还可以得到M的等式 <span class="math display">$$M=\prod_{i=1}^{len(sieve_base)}sieve_base[i]$$</span></p><p>我们可以先用crt来恢复部分的d</p><p>之所以这里只能恢复部分的d是因为</p><p>crt可以让我们从 <spanclass="math inline"><em>d</em> mod  <em>l</em><sub><em>i</em></sub></span>的这些余数中，计算出 <spanclass="math inline"><em>d</em> mod  <em>M</em></span></p><p>所以我们得到的是d在模M下的值，即 <spanclass="math display"><em>d</em> ≡ <em>d</em><sub>0</sub> mod  <em>M</em></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">e=<span class="number">0x73915608ed64c9cf1a2279684cab4f4a78fba229d45d4f860971a241481363470a19cb0dc0d00f816b5befdaca017cf71483e96ef17b36179012f5194a0e6bf481bb06c2644f74c6812efb65d05c00631f282d6aa55c0bc140a1830b95a1cf4b6024cb0db53f2c2189897c41f22e2eec773723f531ec4bfa537fae6de5fe480cf46fe17850f7eb47df08194d95db3d26ac923b26e110ee645239ab586bbc546ddc5906f280a106edbb727ccb05536b5a3f5c0ebcf865c95ce58be54f7f3547aa53baa218b0dfa98e42d925fa341e45f94a3b16b0c83802660c7f34de3336cb21f219073cf8e9f5e39d47f0a9a9ee7c255f09a6add9a2f7a47960f4a853183d29</span></span><br><span class="line"></span><br><span class="line">N=<span class="number">0xba8956e81394f3f1265ca5d9c4ad1ab0078bb43c4b80a231ab2cc62246ae45f66a562252622aed2cbbfc08647ef2fec0f97a632bf2242845f4b3af0c427cec3d90f42e90278a5a0feeed0922a8cd2278074ac54e9cfc0e96ff68f8d8f266dd87dc1cc59c2895ec884de2022311767f6a9a7e0bd288c79620e28b83bb3c8d8ad1047c839d6ccf5544eaf434a5f00b951769ab3121298d04b63a162757beb3d49917cd0c9e02ee1ac29398c8130961d5a2f2833aba1e538edb7bb97071f40fae543d1622f0c9206c6d4d8abb2ac1b93ebfb603c2f3a909ede357ade4043550fe540d13a4e87db8d731fe130f15a43a1a00364f5da2d87f7b660c3a04e734218a11</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">ct=<span class="number">0x101b284ad196b5bbd3d3df00a7d3577caeb29c681bdd122582b705afc671febf45d4f3786640e55aadd6a31ecc49175f97b772720f1735f8555f768b137a4643cd6958f80a3dfca4d0270ad463d6dde93429940bd2abb5ad8408b0906fa8d776544a1c50cc0d95939bef4c3fb64d0b52dca81ff0f244fc265bfc0bc147435d05f8f1a146e963a1403b3c123b4d6e73d1fd897109995009be1673212607f0ea7ae33d23f3158448b05c28ea6636382eee9436c4a6c09023ead7182ecd55ac73a68d458d726e1abc208810468591e63f4b4c2c1f3ce27c4800b52f7421ccab432c03e88b3b255740d719e40e0226eabb7633d97ed210e32071e2ac36ed17ef442e</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">hints = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">21</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">38</span>, <span class="number">2</span>, <span class="number">20</span>, <span class="number">62</span>, <span class="number">66</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">56</span>, <span class="number">41</span>, <span class="number">13</span>, <span class="number">78</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">6</span>, <span class="number">57</span>, <span class="number">117</span>, <span class="number">73</span>, <span class="number">75</span>, <span class="number">96</span>, <span class="number">112</span>, <span class="number">50</span>, <span class="number">93</span>, <span class="number">158</span>, <span class="number">97</span>, <span class="number">146</span>, <span class="number">8</span>, <span class="number">65</span>, <span class="number">96</span>, <span class="number">186</span>, <span class="number">161</span>, <span class="number">90</span>, <span class="number">131</span>, <span class="number">46</span>, <span class="number">32</span>, <span class="number">140</span>, <span class="number">133</span>, <span class="number">50</span>, <span class="number">43</span>, <span class="number">151</span>, <span class="number">234</span>]</span><br><span class="line"></span><br><span class="line">dd = CRT(hints, <span class="built_in">list</span>(sieve_base)[<span class="number">1</span>:<span class="built_in">len</span>(hints)+<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">tmp = prod(<span class="built_in">list</span>(sieve_base)[<span class="number">1</span>:<span class="built_in">len</span>(hints)+<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dd)</span><br></pre></td></tr></table></figure><p>这里求出了<spanclass="math inline"><em>d</em><sub>0</sub></span>即是部分的d，部分私钥泄露会想到用Cooper来打</p><p>这里看到RSA的等式 <spanclass="math display"><em>e</em>(<em>d</em>0 + <em>k</em>0 * <em>M</em>) − 1 = <em>k</em>1(<em>N</em> − <em>p</em> − <em>q</em> + 1)</span>d=d0+k*M</p><p>有等式 <spanclass="math display"><em>e</em> * (<em>d</em>0 + <em>k</em> * <em>M</em>) − 1 = <em>k</em><sub>2</sub>(<em>N</em> − <em>p</em> − <em>q</em> + 1)</span>这里考虑用⼆元copper来打，先对等式进行变形 <spanclass="math display">1 − <em>e</em> * <em>d</em><sub>0</sub> + <em>k</em>(<em>N</em> + 1 − <em>r</em>) ≡ 0 (mod  <em>e</em> * <em>M</em>)</span>这样的式子就可以打了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">e=<span class="number">0x73915608ed64c9cf1a2279684cab4f4a78fba229d45d4f860971a241481363470a19cb0dc0d00f816b5befdaca017cf71483e96ef17b36179012f5194a0e6bf481bb06c2644f74c6812efb65d05c00631f282d6aa55c0bc140a1830b95a1cf4b6024cb0db53f2c2189897c41f22e2eec773723f531ec4bfa537fae6de5fe480cf46fe17850f7eb47df08194d95db3d26ac923b26e110ee645239ab586bbc546ddc5906f280a106edbb727ccb05536b5a3f5c0ebcf865c95ce58be54f7f3547aa53baa218b0dfa98e42d925fa341e45f94a3b16b0c83802660c7f34de3336cb21f219073cf8e9f5e39d47f0a9a9ee7c255f09a6add9a2f7a47960f4a853183d29</span></span><br><span class="line"></span><br><span class="line">N=<span class="number">0xba8956e81394f3f1265ca5d9c4ad1ab0078bb43c4b80a231ab2cc62246ae45f66a562252622aed2cbbfc08647ef2fec0f97a632bf2242845f4b3af0c427cec3d90f42e90278a5a0feeed0922a8cd2278074ac54e9cfc0e96ff68f8d8f266dd87dc1cc59c2895ec884de2022311767f6a9a7e0bd288c79620e28b83bb3c8d8ad1047c839d6ccf5544eaf434a5f00b951769ab3121298d04b63a162757beb3d49917cd0c9e02ee1ac29398c8130961d5a2f2833aba1e538edb7bb97071f40fae543d1622f0c9206c6d4d8abb2ac1b93ebfb603c2f3a909ede357ade4043550fe540d13a4e87db8d731fe130f15a43a1a00364f5da2d87f7b660c3a04e734218a11</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">ct=<span class="number">0x101b284ad196b5bbd3d3df00a7d3577caeb29c681bdd122582b705afc671febf45d4f3786640e55aadd6a31ecc49175f97b772720f1735f8555f768b137a4643cd6958f80a3dfca4d0270ad463d6dde93429940bd2abb5ad8408b0906fa8d776544a1c50cc0d95939bef4c3fb64d0b52dca81ff0f244fc265bfc0bc147435d05f8f1a146e963a1403b3c123b4d6e73d1fd897109995009be1673212607f0ea7ae33d23f3158448b05c28ea6636382eee9436c4a6c09023ead7182ecd55ac73a68d458d726e1abc208810468591e63f4b4c2c1f3ce27c4800b52f7421ccab432c03e88b3b255740d719e40e0226eabb7633d97ed210e32071e2ac36ed17ef442e</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">hints = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">21</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">38</span>, <span class="number">2</span>, <span class="number">20</span>, <span class="number">62</span>, <span class="number">66</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">56</span>, <span class="number">41</span>, <span class="number">13</span>, <span class="number">78</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">6</span>, <span class="number">57</span>, <span class="number">117</span>, <span class="number">73</span>, <span class="number">75</span>, <span class="number">96</span>, <span class="number">112</span>, <span class="number">50</span>, <span class="number">93</span>, <span class="number">158</span>, <span class="number">97</span>, <span class="number">146</span>, <span class="number">8</span>, <span class="number">65</span>, <span class="number">96</span>, <span class="number">186</span>, <span class="number">161</span>, <span class="number">90</span>, <span class="number">131</span>, <span class="number">46</span>, <span class="number">32</span>, <span class="number">140</span>, <span class="number">133</span>, <span class="number">50</span>, <span class="number">43</span>, <span class="number">151</span>, <span class="number">234</span>]</span><br><span class="line"></span><br><span class="line">d0 = CRT(hints, <span class="built_in">list</span>(sieve_base)[<span class="number">1</span>:<span class="built_in">len</span>(hints)+<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(d0)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line"></span><br><span class="line"> d = f.degree()</span><br><span class="line"></span><br><span class="line"> <span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line"> R = f.base_ring()</span><br><span class="line"></span><br><span class="line"> N = R.cardinality()</span><br><span class="line"></span><br><span class="line"> f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"> f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line"> G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line"></span><br><span class="line"> base = N ^ (m - i) * f ^ i</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line"></span><br><span class="line">  g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line"></span><br><span class="line">  G.append(g)</span><br><span class="line"></span><br><span class="line"> B, monomials = G.coefficient_matrix()</span><br><span class="line"></span><br><span class="line"> monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line"> factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line"></span><br><span class="line"> B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line"> B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line"> B = B.change_ring(QQ)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line"></span><br><span class="line"> B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line"></span><br><span class="line"> H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line"></span><br><span class="line"> H.append(h)</span><br><span class="line"></span><br><span class="line"> I = H.ideal()</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">  H.pop()</span><br><span class="line"></span><br><span class="line"> <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">  roots = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line"></span><br><span class="line">  root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line"></span><br><span class="line">  roots.append(root)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> roots</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">e=<span class="number">0x73915608ed64c9cf1a2279684cab4f4a78fba229d45d4f860971a241481363470a19cb0dc0d00f816b5befdaca017cf71483e96ef17b36179012f5194a0e6bf481bb06c2644f74c6812efb65d05c00631f282d6aa55c0bc140a1830b95a1cf4b6024cb0db53f2c2189897c41f22e2eec773723f531ec4bfa537fae6de5fe480cf46fe17850f7eb47df08194d95db3d26ac923b26e110ee645239ab586bbc546ddc5906f280a106edbb727ccb05536b5a3f5c0ebcf865c95ce58be54f7f3547aa53baa218b0dfa98e42d925fa341e45f94a3b16b0c83802660c7f34de3336cb21f219073cf8e9f5e39d47f0a9a9ee7c255f09a6add9a2f7a47960f4a853183d29</span></span><br><span class="line"></span><br><span class="line">N=<span class="number">0xba8956e81394f3f1265ca5d9c4ad1ab0078bb43c4b80a231ab2cc62246ae45f66a562252622aed2cbbfc08647ef2fec0f97a632bf2242845f4b3af0c427cec3d90f42e90278a5a0feeed0922a8cd2278074ac54e9cfc0e96ff68f8d8f266dd87dc1cc59c2895ec884de2022311767f6a9a7e0bd288c79620e28b83bb3c8d8ad1047c839d6ccf5544eaf434a5f00b951769ab3121298d04b63a162757beb3d49917cd0c9e02ee1ac29398c8130961d5a2f2833aba1e538edb7bb97071f40fae543d1622f0c9206c6d4d8abb2ac1b93ebfb603c2f3a909ede357ade4043550fe540d13a4e87db8d731fe130f15a43a1a00364f5da2d87f7b660c3a04e734218a11</span></span><br><span class="line"></span><br><span class="line">hints=[<span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">21</span>, <span class="number">18</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">38</span>, <span class="number">2</span>, <span class="number">20</span>, <span class="number">62</span>, <span class="number">66</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">56</span>, <span class="number">41</span>, <span class="number">13</span>, <span class="number">78</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">6</span>, <span class="number">57</span>, <span class="number">117</span>, <span class="number">73</span>, <span class="number">75</span>, <span class="number">96</span>, <span class="number">112</span>, <span class="number">50</span>, <span class="number">93</span>, <span class="number">158</span>, <span class="number">97</span>, <span class="number">146</span>, <span class="number">8</span>, <span class="number">65</span>, <span class="number">96</span>, <span class="number">186</span>, <span class="number">161</span>, <span class="number">90</span>, <span class="number">131</span>, <span class="number">46</span>, <span class="number">32</span>, <span class="number">140</span>, <span class="number">133</span>, <span class="number">50</span>, <span class="number">43</span>, <span class="number">151</span>, <span class="number">234</span>]</span><br><span class="line"></span><br><span class="line">ct=<span class="number">0x101b284ad196b5bbd3d3df00a7d3577caeb29c681bdd122582b705afc671febf45d4f3786640e55aadd6a31ecc49175f97b772720f1735f8555f768b137a4643cd6958f80a3dfca4d0270ad463d6dde93429940bd2abb5ad8408b0906fa8d776544a1c50cc0d95939bef4c3fb64d0b52dca81ff0f244fc265bfc0bc147435d05f8f1a146e963a1403b3c123b4d6e73d1fd897109995009be1673212607f0ea7ae33d23f3158448b05c28ea6636382eee9436c4a6c09023ead7182ecd55ac73a68d458d726e1abc208810468591e63f4b4c2c1f3ce27c4800b52f7421ccab432c03e88b3b255740d719e40e0226eabb7633d97ed210e32071e2ac36ed17ef442e</span></span><br><span class="line"></span><br><span class="line">beta = <span class="number">0.33</span></span><br><span class="line"></span><br><span class="line">M = prod(<span class="built_in">list</span>(sieve_base)[<span class="number">1</span>:<span class="built_in">len</span>(hints)+<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">PR = PolynomialRing(Zmod(e*M), <span class="string">&#x27;x,y&#x27;</span>)</span><br><span class="line"></span><br><span class="line">x,y = PR.gens()</span><br><span class="line"></span><br><span class="line">f = x*(N+<span class="number">1</span>)-x*y-(e*d0-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">bounds =((e*<span class="number">2</span>**<span class="built_in">int</span>(<span class="number">2048</span>*beta)) // N ,<span class="number">2</span>**<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">roots = small_roots(f, bounds)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(roots)</span><br><span class="line"></span><br><span class="line">k=<span class="built_in">int</span>(roots[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">r=<span class="built_in">int</span>(roots[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">d = (k*(N+<span class="number">1</span>-r) + <span class="number">1</span>) // e</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(ct, d, N)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h1 id="dasctf2025-strange-rsa">DASCTF2025 Strange RSA</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, hint</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, GCD, bytes_to_long, inverse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_flag_params</span>(<span class="params">keysize=<span class="number">256</span></span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">    p, q = getPrime(keysize), getPrime(keysize)</span><br><span class="line"></span><br><span class="line">    N = p * q</span><br><span class="line"></span><br><span class="line">    A = (p**<span class="number">4</span> - <span class="number">1</span>) * (q**<span class="number">4</span> - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">      u = random.randint(<span class="number">2</span>, <span class="number">1</span> &lt;&lt; <span class="number">26</span>)</span><br><span class="line"></span><br><span class="line">      v = random.randint(<span class="number">2</span>, <span class="number">1</span> &lt;&lt; <span class="number">26</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> GCD(u, v) == <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    w = random.randint(-(v * N) + <span class="number">1</span>, v * N - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    numerator = w + A * v</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> numerator % u != <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    e = numerator // u</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> e &lt;= <span class="number">0</span> <span class="keyword">or</span> GCD(A, e) != <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;N&#x27;</span>: N, <span class="string">&#x27;u&#x27;</span>: u, <span class="string">&#x27;v&#x27;</span>: v, <span class="string">&#x27;e&#x27;</span>: e&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_hint_params</span>(<span class="params">u, v, keysize=<span class="number">512</span></span>):</span><br><span class="line"></span><br><span class="line">  p, q = getPrime(keysize), getPrime(keysize)</span><br><span class="line"></span><br><span class="line">  N = p*q</span><br><span class="line"></span><br><span class="line">  phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  e1, e2 = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">      x = getPrime(<span class="number">256</span>)</span><br><span class="line"></span><br><span class="line">      d1 = (v+u)*x</span><br><span class="line"></span><br><span class="line">      d2 = (v-u)*x</span><br><span class="line"></span><br><span class="line">      e1 = inverse(d1, phi)</span><br><span class="line"></span><br><span class="line">      e2 = inverse(d2, phi)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line"></span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="string">&#x27;e1&#x27;</span>: e1, <span class="string">&#x27;e2&#x27;</span>: e2, <span class="string">&#x27;N&#x27;</span>: N&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">flag, hint</span>):</span><br><span class="line"></span><br><span class="line">  params = generate_flag_params()</span><br><span class="line"></span><br><span class="line">  N1, u, v, e1 = params[<span class="string">&#x27;N&#x27;</span>], params[<span class="string">&#x27;u&#x27;</span>], params[<span class="string">&#x27;v&#x27;</span>], params[<span class="string">&#x27;e&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  e2, e3, N2 = generate_hint_params(u, v)</span><br><span class="line"></span><br><span class="line">  flag_ct = <span class="built_in">pow</span>(bytes_to_long(flag), e1, N1)</span><br><span class="line"></span><br><span class="line">  hint_ct = <span class="built_in">pow</span>(bytes_to_long(hint), random.choice([e2, e3]), N2)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;flag_ct&#x27;</span>: flag_ct,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;hint_ct&#x27;</span>: hint_ct,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;N1&#x27;</span>: N1,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;N2&#x27;</span>: N2,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;e1&#x27;</span>: e1,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;e2&#x27;</span>: e2,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;e3&#x27;</span>: e3</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">  res = encrypt(flag, hint)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&#x27;flag ciphertext: <span class="subst">&#123;res[<span class="string">&quot;flag_ct&quot;</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&#x27;hint ciphertext: <span class="subst">&#123;res[<span class="string">&quot;hint_ct&quot;</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&#x27;N1: <span class="subst">&#123;res[<span class="string">&quot;N1&quot;</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&#x27;N2: <span class="subst">&#123;res[<span class="string">&quot;N2&quot;</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&#x27;e1: <span class="subst">&#123;res[<span class="string">&quot;e1&quot;</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&#x27;e2: <span class="subst">&#123;res[<span class="string">&quot;e2&quot;</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&#x27;e3: <span class="subst">&#123;res[<span class="string">&quot;e3&quot;</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  \<span class="comment"># flag_ct = 3304275694820454674685997231149613707569155279977829020394149986905099581809908257209756187158847732534210083918959247704733651870464045546533643246315075</span></span><br><span class="line"></span><br><span class="line">  \<span class="comment"># hint_ct = 92640601724170927054025127187177279602224180611842629533022715235486983387366622510122048491911345879387849666443268190910926361909061627381467094692466413099146606063231426714299807657192175870860604519763163994726401817194260892563952333383283965304691493157326860489170198604706615586060763745868090002740</span></span><br><span class="line"></span><br><span class="line">  \<span class="comment"># N1 = 7348121907179526913580177851026954330752768738291896096735058973559480119932817354982584848148959373549116865913413457772773261195054845650206020666330991</span></span><br><span class="line"></span><br><span class="line">  \<span class="comment"># N2 = 107505436651153972868256172927458682863384962980950626300023016225072477035531962210081972740487894427658040878262205693734911880215972363343499849037411996091935215324499998500280001539069563664673471788918797180228775246203241297837846844704493266809513512780251834022988415242950525647295962207347676276159</span></span><br><span class="line"></span><br><span class="line">  \<span class="comment"># e1 = 46483493180168456907876964472003342599505589423824575610973682748466876137876722746536417805454147792987530564436875226141952843276430892859209813871491418332469407742523023206446900477888407552315053106617523965303933309326359897043169707586465120984991379773865649114063608940450932600749494216244527815359</span></span><br><span class="line"></span><br><span class="line">  \<span class="comment"># e2 = 45077696779822473738225957332830108221557084179697632022751654753481408195463722246182963143687869636871041685807164964262563391336227375090607312507452525793175139773473714173537596307343530651384764927086658506652872283207536853955899859738928440798959619962363749291669111681250920552149008464286936309009</span></span><br><span class="line"></span><br><span class="line">  \<span class="comment"># e3 = 23550626043318531686392597908767473613369638520090152127370654817423383818034484441592543825793324637247596257173381762273905254049903422039592935871962187682259917270517329309332496277455914971819636329971254701142348560600765095893262007065327568577225527780321485212099754825195447682395092115782178271206767089362177657624379873520519398661669609981034432208973165597218334711366939977911593062941916527006025062935544853270685363226130039339985009309168493915830639441795502226746782561939904234398557509011544985054339634943750567054335128439233603858646704023191283512166289385748291358620388592170413196949907</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#d1 = 1285707407708336469611922789424965876916577005852352154890635610024931952186455505</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#d2 = 1649010712229782299850848551980277578291258538000633837589698050054193337459137087</span></span><br></pre></td></tr></table></figure><p>题目分为两个部分,一部分是对hint的加密，一部分是对flag的加密</p><p>我们先解出hint</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_hint_params</span>(<span class="params">u, v, keysize=<span class="number">512</span></span>):</span><br><span class="line"></span><br><span class="line">  p, q = getPrime(keysize), getPrime(keysize)</span><br><span class="line"></span><br><span class="line">  N = p*q</span><br><span class="line"></span><br><span class="line">  phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  e1, e2 = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">​      x = getPrime(<span class="number">256</span>)</span><br><span class="line"></span><br><span class="line">​      d1 = (v+u)*x</span><br><span class="line"></span><br><span class="line">​      d2 = (v-u)*x</span><br><span class="line"></span><br><span class="line">​      e1 = inverse(d1, phi)</span><br><span class="line"></span><br><span class="line">​      e2 = inverse(d2, phi)</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">except</span>:</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="string">&#x27;e1&#x27;</span>: e1, <span class="string">&#x27;e2&#x27;</span>: e2, <span class="string">&#x27;N&#x27;</span>: N&#125;</span><br></pre></td></tr></table></figure><p>这里我们发现可以用Boneh-Durfee攻击来求d1，d2</p><p>这里先看u,v和d1，d2的生成表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">u = random.randint(<span class="number">2</span>, <span class="number">1</span> &lt;&lt; <span class="number">26</span>)</span><br><span class="line"></span><br><span class="line">v = random.randint(<span class="number">2</span>, <span class="number">1</span> &lt;&lt; <span class="number">26</span>)</span><br><span class="line"></span><br><span class="line">x = getPrime(<span class="number">256</span>)</span><br><span class="line"></span><br><span class="line">d1 = (v+u)*x</span><br><span class="line"></span><br><span class="line">d2 = (v-u)*x</span><br></pre></td></tr></table></figure><p>从这里我们知道<spanclass="math inline"><em>d</em><sub>1</sub></span>,<spanclass="math inline"><em>d</em><sub>2</sub></span>&lt;<spanclass="math inline">2<sup>256 + 26</sup></span>,这里<spanclass="math inline"><em>d</em> &gt; <em>N</em><sup>292</sup></span></p><p>满足Boneh-Durfee攻击，这里格的大小取8</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment">############################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Config</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##########################################</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Setting debug to true will display more informations</span></span><br><span class="line"><span class="string">about the lattice, the bounds, the vectors...</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Setting strict to true will stop the algorithm (and</span></span><br><span class="line"><span class="string">return (-1, -1)) if we don&#x27;t have a correct</span></span><br><span class="line"><span class="string">upperbound on the determinant. Note that this</span></span><br><span class="line"><span class="string">doesn&#x27;t necesseraly mean that no solutions</span></span><br><span class="line"><span class="string">will be found since the theoretical upperbound is</span></span><br><span class="line"><span class="string">usualy far away from actual results. That is why</span></span><br><span class="line"><span class="string">you should probably use `strict = False`</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">strict = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">This is experimental, but has provided remarkable results</span></span><br><span class="line"><span class="string">so far. It tries to reduce the lattice as much as it can</span></span><br><span class="line"><span class="string">while keeping its efficiency. I see no reason not to use</span></span><br><span class="line"><span class="string">this option, but if things don&#x27;t work, you should try</span></span><br><span class="line"><span class="string">disabling it</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">helpful_only = <span class="literal">True</span></span><br><span class="line">dimension_min = <span class="number">7</span> <span class="comment"># stop removing if lattice reaches that dimension</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Functions</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##########################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># display stats on helpful vectors</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">helpful_vectors</span>(<span class="params">BB, modulus</span>):</span><br><span class="line">    nothelpful = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">if</span> BB[ii,ii] &gt;= modulus:</span><br><span class="line">            nothelpful += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">​    <span class="built_in">print</span>(nothelpful, <span class="string">&quot;/&quot;</span>, BB.dimensions()[<span class="number">0</span>], <span class="string">&quot; vectors are not helpful&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># display matrix picture with 0 and X</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix_overview</span>(<span class="params">BB, bound</span>):</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        a = (<span class="string">&#x27;%02d &#x27;</span> % ii)</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">1</span>]):</span><br><span class="line">            a += <span class="string">&#x27;0&#x27;</span> <span class="keyword">if</span> BB[ii,jj] == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;X&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> BB.dimensions()[<span class="number">0</span>] &lt; <span class="number">60</span>:</span><br><span class="line">                a += <span class="string">&#x27; &#x27;</span></span><br><span class="line">        <span class="keyword">if</span> BB[ii, ii] &gt;= bound:</span><br><span class="line">            a += <span class="string">&#x27;~&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tries to remove unhelpful vectors</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># we start at current = n-1 (last vector)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_unhelpful</span>(<span class="params">BB, monomials, bound, current</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># end of our recursive function</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> current == -<span class="number">1</span> <span class="keyword">or</span> BB.dimensions()[<span class="number">0</span>] &lt;= dimension_min:</span><br><span class="line">​        <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line">    <span class="comment"># we start by checking from the end</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(current, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># if it is unhelpful:</span></span><br><span class="line"></span><br><span class="line">​        <span class="keyword">if</span> BB[ii, ii] &gt;= bound:</span><br><span class="line">​            affected_vectors = <span class="number">0</span></span><br><span class="line">​            affected_vector_index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># let&#x27;s check if it affects other vectors</span></span><br><span class="line"></span><br><span class="line">​            <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(ii + <span class="number">1</span>, BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line"></span><br><span class="line">                <span class="comment"># if another vector is affected:</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># we increase the count</span></span><br><span class="line"></span><br><span class="line">​                <span class="keyword">if</span> BB[jj, ii] != <span class="number">0</span>:</span><br><span class="line">​                    affected_vectors += <span class="number">1</span></span><br><span class="line">​                    affected_vector_index = jj</span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">            <span class="comment"># level:0</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># if no other vectors end up affected</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># we remove it</span></span><br><span class="line"></span><br><span class="line">​            <span class="keyword">if</span> affected_vectors == <span class="number">0</span>:</span><br><span class="line">​                <span class="built_in">print</span>(<span class="string">&quot;* removing unhelpful vector&quot;</span>, ii)</span><br><span class="line">​                BB = BB.delete_columns([ii])</span><br><span class="line">​                BB = BB.delete_rows([ii])</span><br><span class="line">​                monomials.pop(ii)</span><br><span class="line">​                BB = remove_unhelpful(BB, monomials, bound, ii-<span class="number">1</span>)</span><br><span class="line">​                <span class="keyword">return</span> BB</span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">            <span class="comment"># level:1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># if just one was affected we check</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># if it is affecting someone else</span></span><br><span class="line"></span><br><span class="line">​            <span class="keyword">elif</span> affected_vectors == <span class="number">1</span>:</span><br><span class="line">​                affected_deeper = <span class="literal">True</span></span><br><span class="line">​                <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(affected_vector_index + <span class="number">1</span>, BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># if it is affecting even one vector</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment"># we give up on this one</span></span><br><span class="line"></span><br><span class="line">​                    <span class="keyword">if</span> BB[kk, affected_vector_index] != <span class="number">0</span>:</span><br><span class="line">​                        affected_deeper = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># remove both it if no other vector was affected and</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># this helpful vector is not helpful enough</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># compared to our unhelpful one</span></span><br><span class="line"></span><br><span class="line">​                <span class="keyword">if</span> affected_deeper <span class="keyword">and</span> <span class="built_in">abs</span>(bound - BB[affected_vector_index, affected_vector_index]) &lt; <span class="built_in">abs</span>(bound - BB[ii, ii]):</span><br><span class="line">​                    <span class="built_in">print</span>(<span class="string">&quot;* removing unhelpful vectors&quot;</span>, ii, <span class="string">&quot;and&quot;</span>, affected_vector_index)</span><br><span class="line">​                    BB = BB.delete_columns([affected_vector_index, ii])</span><br><span class="line">​                    BB = BB.delete_rows([affected_vector_index, ii])</span><br><span class="line">​                    monomials.pop(affected_vector_index)</span><br><span class="line">​                    monomials.pop(ii)</span><br><span class="line">​                    BB = remove_unhelpful(BB, monomials, bound, ii-<span class="number">1</span>)</span><br><span class="line">​                    <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line">    <span class="comment"># nothing happened</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">Returns:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">* 0,0   if it fails</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">* -1,-1 if `strict=true`, and determinant doesn&#x27;t bound</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">* x0,y0 the solutions of `pol`</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">boneh_durfee</span>(<span class="params">pol, modulus, mm, tt, XX, YY</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Boneh and Durfee revisited by Herrmann and May</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    finds a solution if:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    * d &lt; N^delta</span></span><br><span class="line"><span class="string">    * |x| &lt; e^delta</span></span><br><span class="line"><span class="string">    * |y| &lt; e^0.5</span></span><br><span class="line"><span class="string">      whenever delta &lt; 1 - sqrt(2)/2 ~ 0.292</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># substitution (Herrman and May)</span></span><br><span class="line"></span><br><span class="line">    PR.&lt;u, x, y&gt; = PolynomialRing(ZZ)</span><br><span class="line">    Q = PR.quotient(x*y + <span class="number">1</span> - u) <span class="comment"># u = xy + 1</span></span><br><span class="line">    polZ = Q(pol).lift()</span><br><span class="line"></span><br><span class="line">    UU = XX*YY + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># x-shifts</span></span><br><span class="line"></span><br><span class="line">    gg = []</span><br><span class="line">    <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(mm + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(mm - kk + <span class="number">1</span>):</span><br><span class="line">            xshift = x^ii * modulus^(mm - kk) * polZ(u, x, y)^kk</span><br><span class="line">            gg.append(xshift)</span><br><span class="line">    gg.sort()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># x-shifts list of monomials</span></span><br><span class="line"></span><br><span class="line">    monomials = []</span><br><span class="line">    <span class="keyword">for</span> polynomial <span class="keyword">in</span> gg:</span><br><span class="line">        <span class="keyword">for</span> monomial <span class="keyword">in</span> polynomial.monomials():</span><br><span class="line">            <span class="keyword">if</span> monomial <span class="keyword">not</span> <span class="keyword">in</span> monomials:</span><br><span class="line">                monomials.append(monomial)</span><br><span class="line">    monomials.sort()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># y-shifts (selected by Herrman and May)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tt + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(floor(mm/tt) * jj, mm + <span class="number">1</span>):</span><br><span class="line">            yshift = y^jj * polZ(u, x, y)^kk * modulus^(mm - kk)</span><br><span class="line">            yshift = Q(yshift).lift()</span><br><span class="line">            gg.append(yshift) <span class="comment"># substitution</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># y-shifts list of monomials</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tt + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(floor(mm/tt) * jj, mm + <span class="number">1</span>):</span><br><span class="line">            monomials.append(u^kk * y^jj)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># construct lattice B</span></span><br><span class="line"></span><br><span class="line">    nn = <span class="built_in">len</span>(monomials)</span><br><span class="line">    BB = Matrix(ZZ, nn)</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(nn):</span><br><span class="line">        BB[ii, <span class="number">0</span>] = gg[ii](<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, ii + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> monomials[jj] <span class="keyword">in</span> gg[ii].monomials():</span><br><span class="line">                BB[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj](UU,XX,YY)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Prototype to reduce the lattice</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> helpful_only:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># automatically remove</span></span><br><span class="line"></span><br><span class="line">  ​      BB = remove_unhelpful(BB, monomials, modulus^mm, nn-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># reset dimension</span></span><br><span class="line"></span><br><span class="line">  ​      nn = BB.dimensions()[<span class="number">0</span>]</span><br><span class="line">  ​      <span class="keyword">if</span> nn == <span class="number">0</span>:</span><br><span class="line">  ​          <span class="built_in">print</span>(<span class="string">&quot;failure&quot;</span>)</span><br><span class="line">  ​          <span class="keyword">return</span> <span class="number">0</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># check if vectors are helpful</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        helpful_vectors(BB, modulus^mm)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># check if determinant is correctly bounded</span></span><br><span class="line"></span><br><span class="line">    det = BB.det()</span><br><span class="line">    bound = modulus^(mm*nn)</span><br><span class="line">    <span class="keyword">if</span> det &gt;= bound:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;We do not have det &lt; bound. Solutions might not be found.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Try with highers m and t.&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> debug:</span><br><span class="line">            diff = (log(det) - log(bound)) / log(<span class="number">2</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;size det(L) - size e^(m*n) = &quot;</span>, floor(diff))</span><br><span class="line">        <span class="keyword">if</span> strict:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;det(L) &lt; e^(m*n) (good! If a solution exists &lt; N^delta, it will be found)&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># display the lattice basis</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        matrix_overview(BB, modulus^mm)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># LLL</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;optimizing basis of the lattice via LLL, this can take a long time&quot;</span>)</span><br><span class="line"></span><br><span class="line">    BB = BB.LLL()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;LLL is done!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># transform vector i &amp; j -&gt; polynomials 1 &amp; 2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;looking for independent vectors in the lattice&quot;</span>)</span><br><span class="line">    found_polynomials = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> pol1_idx <span class="keyword">in</span> <span class="built_in">range</span>(nn - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> pol2_idx <span class="keyword">in</span> <span class="built_in">range</span>(pol1_idx + <span class="number">1</span>, nn):</span><br><span class="line"></span><br><span class="line">            <span class="comment"># for i and j, create the two polynomials</span></span><br><span class="line"></span><br><span class="line">  ​          PR.&lt;w,z&gt; = PolynomialRing(ZZ)</span><br><span class="line">  ​          pol1 = pol2 = <span class="number">0</span></span><br><span class="line">  ​          <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(nn):</span><br><span class="line">  ​              pol1 += monomials[jj](w*z+<span class="number">1</span>,w,z) * BB[pol1_idx, jj] / monomials[jj](UU,XX,YY)</span><br><span class="line">  ​              pol2 += monomials[jj](w*z+<span class="number">1</span>,w,z) * BB[pol2_idx, jj] / monomials[jj](UU,XX,YY)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># resultant</span></span><br><span class="line"></span><br><span class="line">  ​          PR.&lt;q&gt; = PolynomialRing(ZZ)</span><br><span class="line">  ​          rr = pol1.resultant(pol2)</span><br><span class="line">  ​    </span><br><span class="line"></span><br><span class="line">            <span class="comment"># are these good polynomials?</span></span><br><span class="line"></span><br><span class="line">  ​          <span class="keyword">if</span> rr.is_zero() <span class="keyword">or</span> rr.monomials() == [<span class="number">1</span>]:</span><br><span class="line">  ​              <span class="keyword">continue</span></span><br><span class="line">  ​          <span class="keyword">else</span>:</span><br><span class="line">  ​              <span class="built_in">print</span>(<span class="string">&quot;found them, using vectors&quot;</span>, pol1_idx, <span class="string">&quot;and&quot;</span>, pol2_idx)</span><br><span class="line">  ​              found_polynomials = <span class="literal">True</span></span><br><span class="line">  ​              <span class="keyword">break</span></span><br><span class="line">  ​      <span class="keyword">if</span> found_polynomials:</span><br><span class="line">  ​          <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found_polynomials:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;no independant vectors could be found. This should very rarely happen...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    rr = rr(q, q)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># solutions</span></span><br><span class="line"></span><br><span class="line">    soly = rr.roots()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(soly) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Your prediction (delta) is too small&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    soly = soly[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    ss = pol1(q, soly)</span><br><span class="line">    solx = ss.roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="keyword">return</span> solx, soly</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example</span>():</span><br><span class="line">    <span class="comment">############################################</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># How To Use This Script</span></span><br><span class="line"></span><br><span class="line">​    <span class="comment">##########################################</span></span><br><span class="line"></span><br><span class="line">​    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The problem to solve (edit the following values)</span></span><br><span class="line"></span><br><span class="line">​    <span class="comment">#</span></span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">    <span class="comment"># the modulus</span></span><br><span class="line"></span><br><span class="line">​    N = <span class="number">107505436651153972868256172927458682863384962980950626300023016225072477035531962210081972740487894427658040878262205693734911880215972363343499849037411996091935215324499998500280001539069563664673471788918797180228775246203241297837846844704493266809513512780251834022988415242950525647295962207347676276159</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># the public exponent</span></span><br><span class="line"></span><br><span class="line">​    e = <span class="number">46483493180168456907876964472003342599505589423824575610973682748466876137876722746536417805454147792987530564436875226141952843276430892859209813871491418332469407742523023206446900477888407552315053106617523965303933309326359897043169707586465120984991379773865649114063608940450932600749494216244527815359</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># the hypothesis on the private exponent (the theoretical maximum is 0.292)</span></span><br><span class="line"></span><br><span class="line">​    delta = <span class="number">.276</span> <span class="comment"># this means that d &lt; N^delta</span></span><br><span class="line">​    </span><br><span class="line">​    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Lattice (tweak those values)</span></span><br><span class="line"></span><br><span class="line">​    <span class="comment">#</span></span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">    <span class="comment"># you should tweak this (after a first run), (e.g. increment it until a solution is found)</span></span><br><span class="line"></span><br><span class="line">​    m = <span class="number">8</span> <span class="comment"># size of the lattice (bigger the better/slower)</span></span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">    <span class="comment"># you need to be a lattice master to tweak these</span></span><br><span class="line"></span><br><span class="line">​    t = <span class="built_in">int</span>((<span class="number">1</span>-<span class="number">2</span>*delta) * m)  <span class="comment"># optimization from Herrmann and May</span></span><br><span class="line">​    X = <span class="number">2</span>*floor(N^delta)  <span class="comment"># this _might_ be too much</span></span><br><span class="line">​    Y = floor(N^(<span class="number">1</span>/<span class="number">2</span>))    <span class="comment"># correct if p, q are ~ same size</span></span><br><span class="line">​    </span><br><span class="line">​    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Don&#x27;t touch anything below</span></span><br><span class="line"></span><br><span class="line">​    <span class="comment">#</span></span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">    <span class="comment"># Problem put in equation</span></span><br><span class="line"></span><br><span class="line">​    P.&lt;x,y&gt; = PolynomialRing(ZZ)</span><br><span class="line">​    A = <span class="built_in">int</span>((N+<span class="number">1</span>)/<span class="number">2</span>)</span><br><span class="line">​    pol = <span class="number">1</span> + x * (A + y)</span><br><span class="line">​    </span><br><span class="line">​    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Find the solutions!</span></span><br><span class="line"></span><br><span class="line">​    <span class="comment">#</span></span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">    <span class="comment"># Checking bounds</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> debug:</span><br><span class="line">​        <span class="built_in">print</span>(<span class="string">&quot;=== checking values ===&quot;</span>)</span><br><span class="line">​        <span class="built_in">print</span>(<span class="string">&quot;* delta:&quot;</span>, delta)</span><br><span class="line">​        <span class="built_in">print</span>(<span class="string">&quot;* delta &lt; 0.292&quot;</span>, delta &lt; <span class="number">0.292</span>)</span><br><span class="line">​        <span class="built_in">print</span>(<span class="string">&quot;* size of e:&quot;</span>, <span class="built_in">int</span>(log(e)/log(<span class="number">2</span>)))</span><br><span class="line">​        <span class="built_in">print</span>(<span class="string">&quot;* size of N:&quot;</span>, <span class="built_in">int</span>(log(N)/log(<span class="number">2</span>)))</span><br><span class="line">​        <span class="built_in">print</span>(<span class="string">&quot;* m:&quot;</span>, m, <span class="string">&quot;, t:&quot;</span>, t)</span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">    <span class="comment"># boneh_durfee</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> debug:</span><br><span class="line">​        <span class="built_in">print</span>(<span class="string">&quot;=== running algorithm ===&quot;</span>)</span><br><span class="line">​        start_time = time.time()</span><br><span class="line">​    </span><br><span class="line">​    solx, soly = boneh_durfee(pol, e, m, t, X, Y)</span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">    <span class="comment"># found a solution?</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> solx &gt; <span class="number">0</span>:</span><br><span class="line">​        <span class="built_in">print</span>(<span class="string">&quot;=== solution found ===&quot;</span>)</span><br><span class="line">​        <span class="keyword">if</span> <span class="literal">False</span>:</span><br><span class="line">​            <span class="built_in">print</span>(<span class="string">&quot;x:&quot;</span>, solx)</span><br><span class="line">​            <span class="built_in">print</span>(<span class="string">&quot;y:&quot;</span>, soly)</span><br><span class="line">​    </span><br><span class="line">​        d = <span class="built_in">int</span>(pol(solx, soly) / e)</span><br><span class="line">​        <span class="built_in">print</span>(<span class="string">&quot;private key found:&quot;</span>, d)</span><br><span class="line">​    <span class="keyword">else</span>:</span><br><span class="line">​        <span class="built_in">print</span>(<span class="string">&quot;=== no solution was found ===&quot;</span>)</span><br><span class="line">​    </span><br><span class="line">​    <span class="keyword">if</span> debug:</span><br><span class="line">​        <span class="built_in">print</span>((<span class="string">&quot;=== %s seconds ===&quot;</span> % (time.time() - start_time)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    example()</span><br></pre></td></tr></table></figure><p>这里观察到x是d1和d2的最大公因数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = gcd(d1,d2)</span><br></pre></td></tr></table></figure><p>求出x后u，v就很简单可以直接求出了</p><p>这里的hint知道是广义RSA</p><p>搜到这篇<a href="https://eprint.iacr.org/2025/380.pdf">paper</a></p><p>根据论文中</p><p><img src="/img/test_photo/image-20250804211432627.png" /></p><p>论文给出了怎么求p，q是通过先求出p的近似值在打cooper求的</p><p>这里是先求出<span class="math inline">$\widehat{p+q}$</span> ,和<spanclass="math inline">$\widehat{p-q}$</span> 再将两式除2得到<spanclass="math inline"><em>p̂</em></span>,然后打cooper</p><p>这里论文中u，v好像是通过连分数展开r求得的，但是我试了一下好像没有得到（不知道是不是我理解错了），但是对这道题没有什影响</p><p>得到p后就是常规的RSA了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> mpz, sqrt, mpfr, get_context, is_prime, powmod</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, GCD, bytes_to_long, inverse, long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> mpz, sqrt, mpfr, get_context, is_prime, powmod</span><br><span class="line"></span><br><span class="line">N1 = <span class="number">7348121907179526913580177851026954330752768738291896096735058973559480119932817354982584848148959373549116865913413457772773261195054845650206020666330991</span></span><br><span class="line"></span><br><span class="line">e3 = <span class="number">23550626043318531686392597908767473613369638520090152127370654817423383818034484441592543825793324637247596257173381762273905254049903422039592935871962187682259917270517329309332496277455914971819636329971254701142348560600765095893262007065327568577225527780321485212099754825195447682395092115782178271206767089362177657624379873520519398661669609981034432208973165597218334711366939977911593062941916527006025062935544853270685363226130039339985009309168493915830639441795502226746782561939904234398557509011544985054339634943750567054335128439233603858646704023191283512166289385748291358620388592170413196949907</span></span><br><span class="line"></span><br><span class="line">d1 = <span class="number">1285707407708336469611922789424965876916577005852352154890635610024931952186455505</span></span><br><span class="line"></span><br><span class="line">d2 = <span class="number">1649010712229782299850848551980277578291258538000633837589698050054193337459137087</span></span><br><span class="line"></span><br><span class="line">flag_ct = <span class="number">3304275694820454674685997231149613707569155279977829020394149986905099581809908257209756187158847732534210083918959247704733651870464045546533643246315075</span></span><br><span class="line"></span><br><span class="line">x = gmpy2.gcd(d1,d2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#这里x是最大的公因数，求出u,v</span></span><br><span class="line"></span><br><span class="line">v_and_u = d1 // x  </span><br><span class="line"></span><br><span class="line">v_sub_u = d2 // x  </span><br><span class="line"></span><br><span class="line">v, u = (v_and_u + v_sub_u) // <span class="number">2</span>, (v_and_u - v_sub_u) // <span class="number">2</span>  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(v,u)</span><br><span class="line"></span><br><span class="line">p_and_q = floor(sqrt(<span class="built_in">abs</span>(<span class="number">2</span> * N1 + sqrt((N1^<span class="number">2</span> + <span class="number">1</span>)^<span class="number">2</span> - (e3 * u) / v))))</span><br><span class="line"></span><br><span class="line">p_sub_q = floor(sqrt(<span class="built_in">abs</span>(-<span class="number">2</span> * N1 + sqrt((N1^<span class="number">2</span> + <span class="number">1</span>)^<span class="number">2</span> - (e3 * u) / v))))</span><br><span class="line"></span><br><span class="line">p0 = <span class="number">115498994696631776334354360421501383036996098182355289461602274761923389881332</span></span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = Zmod(N1)[]</span><br><span class="line"></span><br><span class="line">f = x + p0</span><br><span class="line"></span><br><span class="line">f = f.monic()</span><br><span class="line"></span><br><span class="line">pad = f.small_roots(X = <span class="number">2</span>^<span class="number">16</span>, beta = <span class="number">0.4</span>)</span><br><span class="line"></span><br><span class="line">p = ZZ(p0 + pad[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">q = N1 // p</span><br><span class="line"></span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = inverse_mod(e3, phi)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(flag_ct, d, N1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m).decode())</span><br></pre></td></tr></table></figure><h1 id="deadsec-ctf2024-raul-rosas">Deadsec CTF2024 Raul Rosas</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"></span><br><span class="line">p1 = <span class="built_in">bin</span>(getPrime(<span class="number">1024</span>))[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">p2 = p1[:<span class="number">605</span>]       <span class="number">419</span></span><br><span class="line"></span><br><span class="line">p2 = p2 + (<span class="string">&#x27;0&#x27;</span>*(<span class="built_in">len</span>(p1)-<span class="built_in">len</span>(p2)))</span><br><span class="line"></span><br><span class="line">p1 = <span class="built_in">int</span>(p1,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p2 = nextprime(<span class="built_in">int</span>(p2,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">q1 = getPrime(<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">q2 = getPrime(<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">n1 = p1*p1*q1 </span><br><span class="line"></span><br><span class="line">n2 = p2*p2*q2 </span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span> </span><br><span class="line"></span><br><span class="line">flag = bytes_to_long(<span class="string">b&#x27;REDACTED&#x27;</span>)</span><br><span class="line"></span><br><span class="line">c1 = <span class="built_in">pow</span>(flag,e,n1)</span><br><span class="line"></span><br><span class="line">c2 = <span class="built_in">pow</span>(flag,e,n2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;n1=&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;n2=&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;c1=&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;c2=&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">n1=33914684861748025775039281034732118800210172226202865626649257734640860626122496857824722482435571212266837521062975265470108636677204118801674455876175256919094583111702086440374440069720564836535455468886946320281180036997133848753476194808776154286740338853149382219104098930424628379244203425638143586895732678175237573473771798480275214400819978317207532566320561087373402673942574292313462136068626729114505686759701305592972367260477978324301469299251420212283758756993372112866755859599750559165005003201133841030574381795101573167606659158769490361449603797836102692182242091338045317594471059984757228202609971840405638858696334676026230362235521239830379389872765912383844262135900613776738814453</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">n2=45676791074605066998943099103364315794006332282441283064976666268034083630735700946472676852534025506807314001461603559827433723291528233236210007601454376876234611894686433890588598497194981540553814858726066215204034517808726230108550384400665772370055344973309767254730566845236167460471232855535131280959838577294392570538301153645042892860893604629926657287846345355440026453883519493151299226289819375073507978835796436834205595029397133882344120359631326071197504087811348353107585352525436957117561997040934067881585416375733220284897170841715716721313708208669285280362958902914780961119036511592607473063247721427765849962400322051875888323638189434117452309193654141881914639294164650898861297303</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">c1=5901547799381070840359392038174495588170513247847714273595411167296183629412915012222227027356430642556122066895371444948863326101566394976530551223412292667644441453331065752759544619792554573114517925105448879969399346787436142706971884168511458472259984991259195488997495087540800463362289424481986635322685691583804462882482621269852340750338483349943910768394808039522826196641550659069967791745064008046300108627004744686494254057929843770761235779923141642086541365488201157760211440185514437408144860842733403640608261720306139244013974182714767738134497204545868435961883422098094282377180143072849852529146164709312766146939608395412424617384059645917698095750364523710239164016515753752257367489</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">c2=3390569979784056878736266202871557824004856366694719533085092616630555208111973443587439052592998102055488632207160968490605754861061546019836966349190018267098889823086718042220586285728994179393183870155266933282043334755304139243271973119125463775794806745935480171168951943663617953860813929121178431737477240925668994665543833309966378218572247768170043609879504955562993281112055931542971553613629203301798161781786253559679002805820092716314906043601765180455118897800232982799905604384587625502913096329061269176369601390578862509347479694697409545495592160695530037113884443071693090949908858172105089597051790694863761129626857737468493438459158669342430468741236573321658187309329276080990875017</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>题目不难读懂，感觉有很多奇技淫巧来解</p><p>首先来审计代码，这里的代码十分简洁</p><p>给我们p1是一个1024bit的数，并且将其转为二进制</p><p>然后p2是取p1前419位，后面空出的位数用0来补齐</p><p>接着取p2的下一个素数</p><p>q1，q2的数量级都是300bit</p><p>最后给出了n1，n2 <spanclass="math display"><em>n</em>1 = <em>p</em>1<sup>2</sup> * <em>q</em>1</span></p><p><spanclass="math display"><em>n</em>2 = <em>p</em>2<sup>2</sup> * <em>q</em>2</span></p><p>因为这里的p2是取p1的前419位，所以n1，n2大概也是相近的</p><p>所以用连分数展开 <span class="math display">$$\frac{n1}{n2} \approx \frac{q1}{q2}$$</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">n1=<span class="number">33914684861748025775039281034732118800210172226202865626649257734640860626122496857824722482435571212266837521062975265470108636677204118801674455876175256919094583111702086440374440069720564836535455468886946320281180036997133848753476194808776154286740338853149382219104098930424628379244203425638143586895732678175237573473771798480275214400819978317207532566320561087373402673942574292313462136068626729114505686759701305592972367260477978324301469299251420212283758756993372112866755859599750559165005003201133841030574381795101573167606659158769490361449603797836102692182242091338045317594471059984757228202609971840405638858696334676026230362235521239830379389872765912383844262135900613776738814453</span></span><br><span class="line"></span><br><span class="line">n2=<span class="number">45676791074605066998943099103364315794006332282441283064976666268034083630735700946472676852534025506807314001461603559827433723291528233236210007601454376876234611894686433890588598497194981540553814858726066215204034517808726230108550384400665772370055344973309767254730566845236167460471232855535131280959838577294392570538301153645042892860893604629926657287846345355440026453883519493151299226289819375073507978835796436834205595029397133882344120359631326071197504087811348353107585352525436957117561997040934067881585416375733220284897170841715716721313708208669285280362958902914780961119036511592607473063247721427765849962400322051875888323638189434117452309193654141881914639294164650898861297303</span></span><br><span class="line"></span><br><span class="line">cf = continued_fraction(Integer(n1) / Integer(n2))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">2000</span>):</span><br><span class="line"></span><br><span class="line">  q1 = <span class="built_in">int</span>(cf.numerator(i))    <span class="comment">#获取连分数的分子</span></span><br><span class="line"></span><br><span class="line">  q2 = <span class="built_in">int</span>(cf.denominator(i))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> n1 % q1 == <span class="number">0</span> <span class="keyword">or</span> n2 % q2 == <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(q1,q2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>这样就得到了q1和q2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q1,q2 = 1226422900699937313306345486827490610540478397988332672940596868693721441368094739238893997,1651764208712002362909070586532659043033781575172011989418709627827265240039573208353001543</span><br></pre></td></tr></table></figure><p>接下来就是解RSA了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">q1,q2 = <span class="number">1226422900699937313306345486827490610540478397988332672940596868693721441368094739238893997</span>,<span class="number">1651764208712002362909070586532659043033781575172011989418709627827265240039573208353001543</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">e= <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">c1=<span class="number">5901547799381070840359392038174495588170513247847714273595411167296183629412915012222227027356430642556122066895371444948863326101566394976530551223412292667644441453331065752759544619792554573114517925105448879969399346787436142706971884168511458472259984991259195488997495087540800463362289424481986635322685691583804462882482621269852340750338483349943910768394808039522826196641550659069967791745064008046300108627004744686494254057929843770761235779923141642086541365488201157760211440185514437408144860842733403640608261720306139244013974182714767738134497204545868435961883422098094282377180143072849852529146164709312766146939608395412424617384059645917698095750364523710239164016515753752257367489</span></span><br><span class="line"></span><br><span class="line">n1=<span class="number">33914684861748025775039281034732118800210172226202865626649257734640860626122496857824722482435571212266837521062975265470108636677204118801674455876175256919094583111702086440374440069720564836535455468886946320281180036997133848753476194808776154286740338853149382219104098930424628379244203425638143586895732678175237573473771798480275214400819978317207532566320561087373402673942574292313462136068626729114505686759701305592972367260477978324301469299251420212283758756993372112866755859599750559165005003201133841030574381795101573167606659158769490361449603797836102692182242091338045317594471059984757228202609971840405638858696334676026230362235521239830379389872765912383844262135900613776738814453</span></span><br><span class="line"></span><br><span class="line">p1 = gmpy2.iroot(n1//q1,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">d1 = gmpy2.invert(e, p1*(p1-<span class="number">1</span>)*(q1-<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">m1 = <span class="built_in">pow</span>(c1,d1,n1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m1))</span><br></pre></td></tr></table></figure><p>还有个是用二元cooper来打的 <spanclass="math display"><em>n</em>2 = <em>p</em><sub>2</sub><sup>2</sup> * <em>q</em><sub>2</sub> = (<em>x</em> * 2<sup>605</sup> + <em>p</em><sub><em>l</em><em>o</em><em>w</em></sub>)<sup>2</sup> * <em>y</em></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line"></span><br><span class="line"> d = f.degree()</span><br><span class="line"></span><br><span class="line"> <span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line"> R = f.base_ring()</span><br><span class="line"></span><br><span class="line"> N = R.cardinality()</span><br><span class="line"></span><br><span class="line"> f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"> f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line"> G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line"></span><br><span class="line"> base = N ^ (m - i) * f ^ i</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line"></span><br><span class="line">  g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line"></span><br><span class="line">  G.append(g)</span><br><span class="line"></span><br><span class="line"> B, monomials = G.coefficient_matrix()</span><br><span class="line"></span><br><span class="line"> monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line"> factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line"></span><br><span class="line"> B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line"> B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line"> B = B.change_ring(QQ)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line"></span><br><span class="line"> B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line"></span><br><span class="line"> H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line"></span><br><span class="line"> H.append(h)</span><br><span class="line"></span><br><span class="line"> I = H.ideal()</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">  H.pop()</span><br><span class="line"></span><br><span class="line"> <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">  roots = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line"></span><br><span class="line">  root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line"></span><br><span class="line">  roots.append(root)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> roots</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">n2=<span class="number">45676791074605066998943099103364315794006332282441283064976666268034083630735700946472676852534025506807314001461603559827433723291528233236210007601454376876234611894686433890588598497194981540553814858726066215204034517808726230108550384400665772370055344973309767254730566845236167460471232855535131280959838577294392570538301153645042892860893604629926657287846345355440026453883519493151299226289819375073507978835796436834205595029397133882344120359631326071197504087811348353107585352525436957117561997040934067881585416375733220284897170841715716721313708208669285280362958902914780961119036511592607473063247721427765849962400322051875888323638189434117452309193654141881914639294164650898861297303</span></span><br><span class="line"></span><br><span class="line">c2=<span class="number">3390569979784056878736266202871557824004856366694719533085092616630555208111973443587439052592998102055488632207160968490605754861061546019836966349190018267098889823086718042220586285728994179393183870155266933282043334755304139243271973119125463775794806745935480171168951943663617953860813929121178431737477240925668994665543833309966378218572247768170043609879504955562993281112055931542971553613629203301798161781786253559679002805820092716314906043601765180455118897800232982799905604384587625502913096329061269176369601390578862509347479694697409545495592160695530037113884443071693090949908858172105089597051790694863761129626857737468493438459158669342430468741236573321658187309329276080990875017</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p_lo <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">2000</span>)):</span><br><span class="line"></span><br><span class="line">  R = Integers(n)</span><br><span class="line"></span><br><span class="line">  P.&lt;x, y&gt; = PolynomialRing(R)</span><br><span class="line"></span><br><span class="line">  sz = <span class="number">1024</span>-<span class="number">605</span></span><br><span class="line"></span><br><span class="line">  f = (x * (<span class="number">2</span>^sz) + p_lo)^<span class="number">2</span> * (y + <span class="number">2</span>^<span class="number">299</span>)</span><br><span class="line"></span><br><span class="line">  bounds = (<span class="number">2</span>^(<span class="number">1024</span>-sz), <span class="number">2</span>^<span class="number">298</span>)</span><br><span class="line"></span><br><span class="line">  roots = small_roots(f, bounds)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">  p_hi = <span class="built_in">int</span>(roots[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">  p = p_hi*(<span class="number">2</span>^sz) + <span class="built_in">int</span>(p_lo)</span><br><span class="line"></span><br><span class="line">  p = <span class="built_in">int</span>(p)</span><br><span class="line"></span><br><span class="line">  n = <span class="built_in">int</span>(n)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> GCD(p, n) &gt; <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">print</span>(p_lo)</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">print</span>(p)</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">assert</span> is_prime(p)</span><br><span class="line"></span><br><span class="line">​    q = n // (p*p)</span><br><span class="line"></span><br><span class="line">​    phi = p * (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">​    d = <span class="built_in">pow</span>(<span class="number">65537</span>, -<span class="number">1</span>, phi)</span><br><span class="line"></span><br><span class="line">​    m = <span class="built_in">pow</span>(c2, d, n)</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h1 id="idekctf-2025-diamond-ticket">idekCTF 2025 Diamond Ticket</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#Some magic from Willy Wonka</span></span><br><span class="line">p = <span class="number">170829625398370252501980763763988409583</span></span><br><span class="line">a = <span class="number">164164878498114882034745803752027154293</span></span><br><span class="line">b = <span class="number">125172356708896457197207880391835698381</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chocolate_generator</span>(<span class="params">m:<span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">pow</span>(a, m, p) + <span class="built_in">pow</span>(b, m, p)) % p</span><br><span class="line"></span><br><span class="line"><span class="comment">#The diamond ticket is hiding inside chocolate</span></span><br><span class="line">diamond_ticket = <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(diamond_ticket) == <span class="number">26</span></span><br><span class="line"><span class="keyword">assert</span> diamond_ticket[:<span class="number">5</span>] == <span class="string">b&quot;idek&#123;&quot;</span></span><br><span class="line"><span class="keyword">assert</span> diamond_ticket[-<span class="number">1</span>:] == <span class="string">b&quot;&#125;&quot;</span></span><br><span class="line">diamond_ticket = bytes_to_long(diamond_ticket[<span class="number">5</span>:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">flag_chocolate = chocolate_generator(diamond_ticket)</span><br><span class="line">chocolate_bag = []</span><br><span class="line"></span><br><span class="line"><span class="comment">#Willy Wonka are making chocolates</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1337</span>):</span><br><span class="line">    chocolate_bag.append(getRandomRange(<span class="number">1</span>, p))</span><br><span class="line"></span><br><span class="line"><span class="comment">#And he put the golden ticket at the end</span></span><br><span class="line">chocolate_bag.append(flag_chocolate)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Augustus ate lots of chocolates, but he can&#x27;t eat all cuz he is full now :D</span></span><br><span class="line">remain = chocolate_bag[-<span class="number">5</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Compress all remain chocolates into one</span></span><br><span class="line">remain_bytes = <span class="string">b&quot;&quot;</span>.join([c.to_bytes(p.bit_length()//<span class="number">8</span>, <span class="string">&quot;big&quot;</span>) <span class="keyword">for</span> c <span class="keyword">in</span> remain])</span><br><span class="line"></span><br><span class="line"><span class="comment">#The last chocolate is too important, so Willy Wonka did magic again</span></span><br><span class="line">P = getPrime(<span class="number">512</span>)</span><br><span class="line">Q = getPrime(<span class="number">512</span>)</span><br><span class="line">N = P * Q</span><br><span class="line">e = bytes_to_long(<span class="string">b&quot;idek&#123;this_is_a_fake_flag_lolol&#125;&quot;</span>)</span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, (P - <span class="number">1</span>) * (Q - <span class="number">1</span>))</span><br><span class="line">c1 = <span class="built_in">pow</span>(bytes_to_long(remain_bytes), e, N)</span><br><span class="line">c2 = <span class="built_in">pow</span>(bytes_to_long(remain_bytes), <span class="number">2</span>, N) <span class="comment"># A small gift</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#How can you get it ?</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;N = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c1 = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;c2 = &#125;</span>&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">N = 85494791395295332945307239533692379607357839212287019473638934253301452108522067416218735796494842928689545564411909493378925446256067741352255455231566967041733698260315140928382934156213563527493360928094724419798812564716724034316384416100417243844799045176599197680353109658153148874265234750977838548867</span></span><br><span class="line"><span class="string">c1 = 27062074196834458670191422120857456217979308440332928563784961101978948466368298802765973020349433121726736536899260504828388992133435359919764627760887966221328744451867771955587357887373143789000307996739905387064272569624412963289163997701702446706106089751532607059085577031825157942847678226256408018301</span></span><br><span class="line"><span class="string">c2 = 30493926769307279620402715377825804330944677680927170388776891152831425786788516825687413453427866619728035923364764078434617853754697076732657422609080720944160407383110441379382589644898380399280520469116924641442283645426172683945640914810778133226061767682464112690072473051344933447823488551784450844649</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><a href="https://giapppp.github.io/posts/idekctf-2025/">idekCTF 2025- Giap’s Blog</a></p><p>这里出题人的wp</p><p>首先是题目给出了一个自定义函数,我们还知道其中a,b,p的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">chocolate_generator</span>(<span class="params">m:<span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">pow</span>(a, m, p) + <span class="built_in">pow</span>(b, m, p)) % p</span><br></pre></td></tr></table></figure><p>然后给出一下的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#The diamond ticket is hiding inside chocolate</span></span><br><span class="line">diamond_ticket = <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(diamond_ticket) == <span class="number">26</span></span><br><span class="line"><span class="keyword">assert</span> diamond_ticket[:<span class="number">5</span>] == <span class="string">b&quot;idek&#123;&quot;</span></span><br><span class="line"><span class="keyword">assert</span> diamond_ticket[-<span class="number">1</span>:] == <span class="string">b&quot;&#125;&quot;</span></span><br><span class="line">diamond_ticket = bytes_to_long(diamond_ticket[<span class="number">5</span>:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">flag_chocolate = chocolate_generator(diamond_ticket)</span><br><span class="line">chocolate_bag = []</span><br><span class="line"></span><br><span class="line"><span class="comment">#Willy Wonka are making chocolates</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1337</span>):</span><br><span class="line">    chocolate_bag.append(getRandomRange(<span class="number">1</span>, p))</span><br><span class="line"></span><br><span class="line"><span class="comment">#And he put the golden ticket at the end</span></span><br><span class="line">chocolate_bag.append(flag_chocolate)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Augustus ate lots of chocolates, but he can&#x27;t eat all cuz he is full now :D</span></span><br><span class="line">remain = chocolate_bag[-<span class="number">5</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Compress all remain chocolates into one</span></span><br><span class="line">remain_bytes = <span class="string">b&quot;&quot;</span>.join([c.to_bytes(p.bit_length()//<span class="number">8</span>, <span class="string">&quot;big&quot;</span>) <span class="keyword">for</span> c <span class="keyword">in</span> remain])</span><br></pre></td></tr></table></figure><p>生成1337个随机数，其中范围是(1，p)然后存入chocolate_bag中</p><p>再将flag_chocolate加入chocolate_bag的末尾</p><p>remain是取chocolate_bag的最后五位数，然后将这个五个元素拼接为字节串</p><p>接着又是一个新的加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">P = getPrime(<span class="number">512</span>)</span><br><span class="line">Q = getPrime(<span class="number">512</span>)</span><br><span class="line">N = P * Q</span><br><span class="line">e = bytes_to_long(<span class="string">b&quot;idek&#123;this_is_a_fake_flag_lolol&#125;&quot;</span>)</span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, (P - <span class="number">1</span>) * (Q - <span class="number">1</span>))</span><br><span class="line">c1 = <span class="built_in">pow</span>(bytes_to_long(remain_bytes), e, N)</span><br><span class="line">c2 = <span class="built_in">pow</span>(bytes_to_long(remain_bytes), <span class="number">2</span>, N) <span class="comment"># A small gift</span></span><br></pre></td></tr></table></figure><p>这里很明显用共模攻击可以直接打，那么可以恢复出remain_bytes</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">N = <span class="number">85494791395295332945307239533692379607357839212287019473638934253301452108522067416218735796494842928689545564411909493378925446256067741352255455231566967041733698260315140928382934156213563527493360928094724419798812564716724034316384416100417243844799045176599197680353109658153148874265234750977838548867</span></span><br><span class="line">c1 = <span class="number">27062074196834458670191422120857456217979308440332928563784961101978948466368298802765973020349433121726736536899260504828388992133435359919764627760887966221328744451867771955587357887373143789000307996739905387064272569624412963289163997701702446706106089751532607059085577031825157942847678226256408018301</span></span><br><span class="line">c2 = <span class="number">30493926769307279620402715377825804330944677680927170388776891152831425786788516825687413453427866619728035923364764078434617853754697076732657422609080720944160407383110441379382589644898380399280520469116924641442283645426172683945640914810778133226061767682464112690072473051344933447823488551784450844649</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># e 是 b&quot;idek&#123;this_is_a_fake_flag_lolol&#125;&quot; 转成的整数</span></span><br><span class="line"></span><br><span class="line">e = bytes_to_long(<span class="string">b&quot;idek&#123;this_is_a_fake_flag_lolol&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 扩展欧几里得算法求 a, b</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">egcd</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1</span>, <span class="number">0</span>, a)</span><br><span class="line">    x1, y1, g = egcd(b, a % b)</span><br><span class="line">    <span class="keyword">return</span> (y1, x1 - (a // b) * y1, g)</span><br><span class="line"></span><br><span class="line">a, b, g = egcd(e, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保得到的是 e*a + 2*b = 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> e*a + <span class="number">2</span>*b == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果有负数指数，要取模逆</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &lt; <span class="number">0</span>:</span><br><span class="line">    c1 = <span class="built_in">pow</span>(c1, -<span class="number">1</span>, N)</span><br><span class="line">    a = -a</span><br><span class="line"><span class="keyword">if</span> b &lt; <span class="number">0</span>:</span><br><span class="line">    c2 = <span class="built_in">pow</span>(c2, -<span class="number">1</span>, N)</span><br><span class="line">    b = -b</span><br><span class="line"></span><br><span class="line">rb = (<span class="built_in">pow</span>(c1, a, N) * <span class="built_in">pow</span>(c2, b, N)) % N</span><br><span class="line">remain_bytes = long_to_bytes(rb)[-<span class="number">16</span>:]</span><br><span class="line">flag_chocolate = bytes_to_long(remain_bytes)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag_chocolate)</span><br></pre></td></tr></table></figure><p>现在我们可以列出方程 <spanclass="math display"><em>c</em> ≡ <em>a</em><sup><em>m</em></sup> + <em>b</em><sup><em>m</em></sup> (mod  <em>p</em>)</span>我们不妨令<spanclass="math inline"><em>b</em> = <em>a</em><sup><em>k</em></sup></span>,那么我们就有<spanclass="math display"><em>c</em> ≡ <em>a</em><sup><em>m</em></sup> + (<em>a</em><sup><em>k</em></sup>)<sup><em>m</em></sup> (mod  <em>p</em>)</span></p><p><spanclass="math display"><em>c</em> ≡ <em>a</em><sup><em>m</em></sup> + (<em>a</em><sup><em>k</em></sup>)<sup><em>m</em></sup> (mod  <em>p</em>)</span></p><p>现在再令X=a^m,那么就有方程 <spanclass="math display"><em>c</em> ≡ <em>X</em> + <em>X</em><sup><em>k</em></sup> (mod  <em>p</em>)</span>解这个X的trick在<ahref="https://adib.au/2025/lance-hard/#speedup-by-using-gcd">这里</a></p><p><imgsrc="/img/test_photo/4cf295a7867dc9fb54fc5f733d6f4670.png" /></p><p>我们可以先求出k</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">170829625398370252501980763763988409583</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">164164878498114882034745803752027154293</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">125172356708896457197207880391835698381</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"></span><br><span class="line">k=sympy.discrete_log(p,b,a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(k)</span><br><span class="line"><span class="comment">#也可以直接用sage中的函数解</span></span><br><span class="line">k = GF(p)(b).log(a)</span><br></pre></td></tr></table></figure><p>根据上面的列出方程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">170829625398370252501980763763988409583</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">164164878498114882034745803752027154293</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">125172356708896457197207880391835698381</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">99584795316725433978492646071734128819</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(GF(p))</span><br><span class="line"></span><br><span class="line">f = x + x^k - c</span><br><span class="line"></span><br><span class="line">g = <span class="built_in">pow</span>(x, p, f) - x</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f.gcd(g).roots())</span><br></pre></td></tr></table></figure><p>然后就是在解一个离散对数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m = GF(p)(X).log(a)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="number">170829625398370252501980763763988409583</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">164164878498114882034745803752027154293</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">125172356708896457197207880391835698381</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">99584795316725433978492646071734128819</span></span><br><span class="line"></span><br><span class="line">k = GF(p)(b).log(a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(k)</span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(GF(p))</span><br><span class="line"></span><br><span class="line">f = x + x**k - c</span><br><span class="line"></span><br><span class="line">g = <span class="built_in">pow</span>(x, p, f) - x</span><br><span class="line"></span><br><span class="line">X = [r <span class="keyword">for</span> r <span class="keyword">in</span> f.gcd(g).roots()][<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">m = GF(p)(X).log(a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;m = &#125;</span>&#x27;</span>) <span class="comment"># 4807895356063327854843653048517090061</span></span><br></pre></td></tr></table></figure><p>这里求出的m是m%p后的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">load(<span class="string">&#x27;https://raw.githubusercontent.com/TheBlupper/linineq/refs/heads/main/linineq.py&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = <span class="number">170829625398370252501980763763988409583</span></span><br><span class="line">o = (p-<span class="number">1</span>)//<span class="number">2</span></span><br><span class="line">m = <span class="number">4807895356063327854843653048517090061</span></span><br><span class="line"></span><br><span class="line">M = matrix([[<span class="number">256</span>**i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="number">20</span>))]])</span><br><span class="line">b = [m]</span><br><span class="line">lb = [<span class="number">30</span>]*<span class="number">20</span> </span><br><span class="line">ub = [<span class="number">128</span>]*<span class="number">20</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sol <span class="keyword">in</span> solve_bounded_mod_gen(M, b, lb, ub, o, solver=<span class="string">&#x27;ortools&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytes</span>(sol))</span><br></pre></td></tr></table></figure><h1 id="idekctf-2024-golden-ticket">idekCTF 2024 Golden Ticket</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#Some magic from Willy Wonka</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chocolate_generator</span>(<span class="params">m:<span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    p = <span class="number">396430433566694153228963024068183195900644000015629930982017434859080008533624204265038366113052353086248115602503012179807206251960510130759852727353283868788493357310003786807</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">pow</span>(<span class="number">13</span>, m, p) + <span class="built_in">pow</span>(<span class="number">37</span>, m, p)) % p</span><br><span class="line"></span><br><span class="line"><span class="comment">#The golden ticket is hiding inside chocolate</span></span><br><span class="line">flag = <span class="string">b&quot;idek&#123;REDACTED&#125;&quot;</span></span><br><span class="line">golden_ticket = bytes_to_long(flag)</span><br><span class="line">flag_chocolate = chocolate_generator(golden_ticket)</span><br><span class="line">chocolate_bag = []</span><br><span class="line"></span><br><span class="line"><span class="comment">#Willy Wonka is making chocolates</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(golden_ticket):</span><br><span class="line">    chocolate_bag.append(chocolate_generator(i))</span><br><span class="line"></span><br><span class="line"><span class="comment">#And he put the golden ticket at the end</span></span><br><span class="line">chocolate_bag.append(flag_chocolate)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Augustus ate lots of chocolates, but he can&#x27;t eat all cuz he is full now :D</span></span><br><span class="line">remain = chocolate_bag[-<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Can you help Charles get the golden ticket?</span></span><br><span class="line"><span class="built_in">print</span>(remain)</span><br><span class="line"></span><br><span class="line"><span class="comment">#[88952575866827947965983024351948428571644045481852955585307229868427303211803239917835211249629755846575548754617810635567272526061976590304647326424871380247801316189016325247, 67077340815509559968966395605991498895734870241569147039932716484176494534953008553337442440573747593113271897771706973941604973691227887232994456813209749283078720189994152242]</span></span><br></pre></td></tr></table></figure><p>上题就是在这题的基础上进行改进</p><p>golden_ticket：将flag数值化后的结果 flag_chocolate =chocolate_generator(golden_ticket) p =396430433566694153228963024068183195900644000015629930982017434859080008533624204265038366113052353086248115602503012179807206251960510130759852727353283868788493357310003786807返回 (pow(13, golden_ticket, p) + pow(37, golden_ticket, p)) % pchocolate_bag = [] 对于0以上、golden_ticket未満的i，执行以下操作：将chocolate_generator(i)添加到chocolate_bag中将flag_chocolate添加到chocolate_bag中 remain:chocolate_bag的最后两个元素 输出remain</p><p>我们有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(x + y) % p = c1</span><br><span class="line">(13 * x + 37 * y) % p = c2</span><br></pre></td></tr></table></figure>$$=<p>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">396430433566694153228963024068183195900644000015629930982017434859080008533624204265038366113052353086248115602503012179807206251960510130759852727353283868788493357310003786807</span></span><br><span class="line">c1 = <span class="number">88952575866827947965983024351948428571644045481852955585307229868427303211803239917835211249629755846575548754617810635567272526061976590304647326424871380247801316189016325247</span></span><br><span class="line">c2 = <span class="number">67077340815509559968966395605991498895734870241569147039932716484176494534953008553337442440573747593113271897771706973941604973691227887232994456813209749283078720189994152242</span></span><br><span class="line"></span><br><span class="line">A = matrix(Zmod(p), [[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">13</span>, <span class="number">37</span>]])</span><br><span class="line">C = matrix(Zmod(p), [[c1], [c2]])</span><br><span class="line">X = ~A * C</span><br><span class="line"></span><br><span class="line">x = X[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">y = X[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">X = matrix(Zmod(p), [[x], [y]])</span><br><span class="line"></span><br><span class="line">R = IntegerModRing(p)</span><br><span class="line">golden_ticket = <span class="built_in">int</span>(discrete_log(R(y), R(<span class="number">37</span>))) + <span class="number">1</span></span><br><span class="line">flag = long_to_bytes(golden_ticket).decode()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h1 id="whyctf-2025">WHYCTF 2025</h1><h2 id="substituteteacher">substituteteacher</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;Lcb gpzs tpvcbx phpzsvl ewig lgbsmc mwpl, bpmc xgwj p lzse, mwtx pmmivplzws. Pswlcbg dzvvzsh jbgvws mpvb, pswlcbg xbpx bsx, pswlcbg dzvbgpytb Libvxpe. Xblbmlzub Dztbv Mwgyzs, lcpl&#x27;v ewi, psx ewig miggbsl tbpx (p mgejlzm, fplbg-xpdphbx swlb rwisx zs p jzhbws&#x27;v sbvl – xws&#x27;l pva) cpv ygwihcl ewi lw lcb bxhb wr lcb zsrpdwiv Gpubsfwwx Fwwxv. Twmptv fczvjbgbx lptbv wr vlgpshb tzhclv psx bubs vlgpshbg xzvpjjbpgpsmbv. &#x27;Jgwypyte kivl p jpglzmitpgte phhgbvvzub ypxhbg,&#x27; ewi&#x27;x dillbgbx lw ewigvbtr, yil lcb isbpvb zs ewig hil lwtx p xzrrbgbsl vlwge.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Lcb jplc, zr ewi mwitx bubs mptt zl lcpl, xzvvwtubx zslw p dixxe, wubghgwfs lgpma. Pcbpx, ypgbte uzvzytb lcgwihc lcb xwfsjwig, p rpzsl rtzmabg wr tzhcl. P mpyzs. Fwwxbs, xztpjzxplbx, psx twwazsh tzab zl cpx vfpttwfbx dwgb lcps p rbf vbmgblv.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;Fbtt, Dztbv,&#x27; ewi vzhcbx, &#x27;ewi&#x27;ub mbglpzste vbbs fwgvb zsuzlplzwsv lw lblpsiv.&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Ewi jivc wjbs lcb mgbpae fwwxbs xwwg. Lcb vdbtt wr xpdj bpglc psx vwdblczsh uphibte dblpttzm, tzab wtx jbsszbv, rzttv ewig swvlgztv. Pv ewi vlbj zsvzxb, p vixxbs, cbpue LCIX bmcwbv ybczsx ewi. Lcb xwwg vtpdv vcil. Ewi lge lcb cpsxtb. Twmabx. Psx sw pdwisl wr kzhhtzsh, gplltzsh, wg jwtzlb jtbpxzsh vbbdv lw dpab p xzrrbgbsmb.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>Ewi pgb zs p xzdte tzl, gbmlpshitpg gwwd. Lcb pzg zv lczma fzlc lcb vmbsl wr xpdj fwwx psx vwdblczsh isxbrzspytb, jbgcpjv kivl lcb tzshbgzsh xgbpx wr rwghwllbs tzubv. Gpzs vlgbpav xwfs lcb vzshtb, hgzde fzsxwf ws lcb rpg fptt. P mgixb fwwxbs lpytb, lfw gzmable mcpzgv, psx p xivle, dwlc-bplbs gih pgb lcb wste rigszligb. P vdptt, istzl rzgbjtpmb vzlv phpzsvl wsb fptt, zlv cbpglc rzttbx fzlc mwtx pvcbv. Ws lcb lpytb, p rtzmabgzsh wzt tpdj mpvlv xpsmzsh vcpxwfv. Sbql lw lcb tpdj tpev p swlbywwa fzlc lcb rwttwfzsh lbql vmgzyytbv ws zl: rtph&#123;yx96xy352436br4r8bm6mpxp5979y038&#125;.<span class="string">&quot;</span></span><br></pre></td></tr></table></figure><p>直接用quipqiup解密即可得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;The rain lashed against your trench coat, each drop a tiny, cold accusation. Another missing person case, another dead end, another miserable Tuesday. Detective Miles Corbin, that&#x27;s you, and your current lead (a cryptic, water-damaged note found in a pigeon&#x27;s nest – don&#x27;t ask) has brought you to the edge of the infamous Ravenwood Woods. Locals whispered tales of strange lights and even stranger disappearances. &#x27;Probably just a particularly aggressive badger,&#x27; you&#x27;d muttered to yourself, but the unease in your gut told a different story. The path, if you could even call it that, dissolved into a muddy, overgrown track. Ahead, barely visible through the downpour, a faint flicker of light. A cabin. Wooden, dilapidated, and looking like it had swallowed more than a few secrets. &#x27;Well, Miles,&#x27; you sighed, &#x27;you&#x27;ve certainly seen worse invitations to tetanus.&#x27; You push open the creaky wooden door. The smell of damp earth and something vaguely metallic, like old pennies, fills your nostrils. As you step inside, a sudden, heavy THUD echoes behind you. The door slams shut. You try the handle. Locked. And no amount of jiggling, rattling, or polite pleading seems to make a difference. &quot;</span>You are <span class="keyword">in</span> a dimly lit, rectangular room. The air <span class="keyword">is</span> thick <span class="keyword">with</span> the scent of damp wood <span class="keyword">and</span> something undefinable, perhaps just the lingering dread of forgotten lives. Rain streaks down the single, grimy window on the far wall. A crude wooden table, two rickety chairs, <span class="keyword">and</span> a dusty, moth-eaten rug are the only furniture. A small, unlit fireplace sits against one wall, its hearth filled <span class="keyword">with</span> cold ashes. On the table, a flickering oil lamp casts dancing shadows. Next to the lamp lays a notebook <span class="keyword">with</span> the following text scribbles on it: flag&#123;bd96db352436ef4f8ec6cada5979b038&#125;.<span class="string">&quot;</span></span><br></pre></td></tr></table></figure><h2 id="somkracht65537">somkracht65537</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">N = p*q</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">msg = bytes_to_long(<span class="string">b&quot;flag&#123;dummy_flag&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">ct1 = <span class="built_in">pow</span>(msg, e, N)</span><br><span class="line"></span><br><span class="line">ct2 = <span class="built_in">pow</span>(msg, p+q, N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;N = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;ct1 = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;ct2 = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">N = 13172635138210286640933237746072073728198869440440273861514688422430115450596963502627269613634657978751692320585777768877613321668778514462972611542147278205792418292362109100597755668571861738781190210255903465162483813897653948305531342676537057130369323555420200545974179860718822410192595079238246216026529376260568656408216009127973127738250617629330070723654601189310430802429585919291621479622419163092371272056180409609142738265178224163465585013019636286435078812898907472859171136422659050412212315590509027225331104292443193693974638004592849794819591007103879538185323581422819852185166422985403024630123</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ct1 = 8499526321488266762028127474977263983474334713646962923180757984708039537289636737028409522654349845032612940144246996001396064450188534247830979105036627472087587636695469693411422088223080856169980341928057477564688506588678465277896123712776169270866525885072607021419929184184301722442524104467963680432737243478200661224741027413690099507128782156810842444314483076587935222998920241102484844741597333281611874849648935849985954902264102662618041817365284648356127737145896858259709819593359264714426125676691235985164360773645489923563993927995838346085066937602961724919392025887999986486672200850129835569774</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ct2 = 2263178005282615069738169250508811825030372342139636879043114251227029802177975391784856426659871916802959302578620910469427367218786299839311310420522660987052055310279591316813828952756984548230575321772825193775083404279028090110850848262192595930920326368607665856808251531130234210906413358662814500632504899088517752958423466186872534450108628371006268110210630017230741670440780982809417986017372337888735465439382827207990030719121834402226087906249993820193417658352914727984318783025375497623944699995700474418221251293446038111913247755996471673024017921092527032486774115935601292346440934530921157935322</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>题目十分简洁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ct1 = pow(msg, e, N)</span><br><span class="line"></span><br><span class="line">ct2 = pow(msg, p+q, N)</span><br></pre></td></tr></table></figure><p>这样的式子一看就是可以打共模攻击的，但是这里p+q的值不知道</p><p>由欧拉定理可以知道</p><p>如果gcd(m,N)=1 <spanclass="math display"><em>m</em><sup><em>φ</em>(<em>N</em>)</sup> ≡ 1 (mod  <em>N</em>)</span>对于任意整数 k有 <spanclass="math display"><em>m</em><sup><em>a</em></sup> ≡ <em>m</em><sup><em>a</em></sup> + <em>k</em><em>φ</em>(<em>N</em>) (mod  <em>N</em>)</span>指数可以加上（或减去）<spanclass="math inline"><em>φ</em>(<em>N</em>)</span> 的倍数而不改变结果</p><p>这就是幂在 <span class="math inline"><em>φ</em>(<em>N</em>)</span>的周期性</p><p>那么知道这里后面就简单了 <spanclass="math display"><em>c</em><em>t</em>2 = <em>m</em><em>s</em><em>g</em><sup><em>p</em> + <em>q</em></sup> mod  <em>N</em></span></p><p><spanclass="math display"><em>c</em><em>t</em>2 = <em>m</em><em>s</em><em>g</em><sup><em>p</em> + <em>q</em> + <em>φ</em>(<em>N</em>)</sup> mod  <em>N</em></span></p><p><spanclass="math display"><em>c</em><em>t</em>2 = <em>m</em><em>s</em><em>g</em><sup><em>p</em> + <em>q</em> + (<em>p</em> * <em>q</em> − <em>p</em> − <em>q</em> + 1)</sup> mod  <em>N</em></span></p><p><spanclass="math display"><em>c</em><em>t</em>2 = <em>m</em><em>s</em><em>g</em><sup><em>N</em> + 1</sup> mod  <em>N</em></span></p><p>接下来打个共模攻击就好</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">commom_modulus_attack</span>(<span class="params">c1, c2, e1, e2, n</span>):</span><br><span class="line"></span><br><span class="line">  gcd, s1, s2 = gmpy2.gcdext(e1, e2)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> s1 &lt; <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">    s1 = -s1</span><br><span class="line"></span><br><span class="line">    c1 = gmpy2.invert(c1, n)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">elif</span> s2 &lt; <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">    s2 = -s2</span><br><span class="line"></span><br><span class="line">    c2 = gmpy2.invert(c2, n)</span><br><span class="line"></span><br><span class="line">  v = <span class="built_in">pow</span>(c1, s1, n)</span><br><span class="line"></span><br><span class="line">  w = <span class="built_in">pow</span>(c2, s2, n)</span><br><span class="line"></span><br><span class="line">  x = (v*w) % n</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">N = <span class="number">13172635138210286640933237746072073728198869440440273861514688422430115450596963502627269613634657978751692320585777768877613321668778514462972611542147278205792418292362109100597755668571861738781190210255903465162483813897653948305531342676537057130369323555420200545974179860718822410192595079238246216026529376260568656408216009127973127738250617629330070723654601189310430802429585919291621479622419163092371272056180409609142738265178224163465585013019636286435078812898907472859171136422659050412212315590509027225331104292443193693974638004592849794819591007103879538185323581422819852185166422985403024630123</span></span><br><span class="line"></span><br><span class="line">ct1 = <span class="number">8499526321488266762028127474977263983474334713646962923180757984708039537289636737028409522654349845032612940144246996001396064450188534247830979105036627472087587636695469693411422088223080856169980341928057477564688506588678465277896123712776169270866525885072607021419929184184301722442524104467963680432737243478200661224741027413690099507128782156810842444314483076587935222998920241102484844741597333281611874849648935849985954902264102662618041817365284648356127737145896858259709819593359264714426125676691235985164360773645489923563993927995838346085066937602961724919392025887999986486672200850129835569774</span></span><br><span class="line"></span><br><span class="line">ct2 = <span class="number">2263178005282615069738169250508811825030372342139636879043114251227029802177975391784856426659871916802959302578620910469427367218786299839311310420522660987052055310279591316813828952756984548230575321772825193775083404279028090110850848262192595930920326368607665856808251531130234210906413358662814500632504899088517752958423466186872534450108628371006268110210630017230741670440780982809417986017372337888735465439382827207990030719121834402226087906249993820193417658352914727984318783025375497623944699995700474418221251293446038111913247755996471673024017921092527032486774115935601292346440934530921157935322</span></span><br><span class="line"></span><br><span class="line">e1 = e</span><br><span class="line"></span><br><span class="line">e2 = N + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">m = commom_modulus_attack(ct1, ct2, e1, e2, N)</span><br><span class="line"></span><br><span class="line">flag = long_to_bytes(m).decode()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Wp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CMCTF2025</title>
      <link href="/2025/06/11/CMCTF2025/"/>
      <url>/2025/06/11/CMCTF2025/</url>
      
        <content type="html"><![CDATA[<p>这里就对mix这题进行记录</p><h1 id="mix">mix</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">p = getStrongPrime(<span class="number">2048</span>)</span><br><span class="line"></span><br><span class="line">q = getStrongPrime(<span class="number">2048</span>)</span><br><span class="line"></span><br><span class="line">s = getStrongPrime(<span class="number">2048</span>)</span><br><span class="line"></span><br><span class="line">r = <span class="built_in">int</span>(裴波那契数列[<span class="number">2022</span>])</span><br><span class="line"></span><br><span class="line">mask = <span class="string">b&#x27;******&#x27;</span></span><br><span class="line"></span><br><span class="line">enc1 = <span class="string">b&#x27;******&#x27;</span></span><br><span class="line"></span><br><span class="line">flag1 = <span class="string">b&#x27;CMCTF&#123;&#x27;</span> +enc1 + mask  + <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">0o10001</span></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(enc1)</span><br><span class="line"></span><br><span class="line">n = p * q * r</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line">hint = p*s*q - p*s - q*s + s</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n=&#x27;</span>,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c=&#x27;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hint=&#x27;</span>,hint)</span><br><span class="line"></span><br><span class="line">\<span class="comment"># n= 121445040208861909069894403265135678065120910909862499020293974222353911252357668566443655271324561444629423085857365441663340335267122084303353024719970701684304078915449107665234153848865575171396266594850387632166116876666641345151524526093750743311423760629508920605398826413219456966060130654182319239622853235598419783244961101023565485613969127617211798200257784669487075518232217287821539002272955530731559925743819394303592463643472505544371511975391525417372030795124188756668359793712687313915869489834990149406102691674251037529200092462351869985445609978956083451480606196410709785266414297484270955804000909874710243291131008074987501840685895810982539715865808340785585783784932746009294793388111303497827361597667080060904233538640411944294069905932767542941079924615545492728930748632793138167526456821615565265643786589492447320384175015988885891762397927722597983943795776730381090838150325379769514627877859254280292596379986317145513592309694492391589942506965514462458275558089505709047707881858666740272995276712061033659325342969092555904181602954831675187019667837919000590097455240471706803903843864588874240819424978016149001940435459574272517121404191497401282693543020081054458057536135286337530413794162493772935203185468003808946179794587532129108140773036801981194625504026220172240941266669713633255771146945596494369563639162958148338997083151465760140380287388970013418518808560606190028648382869570465274426248220666799284598328143667941885780739645827723387774853960763697674935365788526188525877728188039212192465886463099601345762532695705673402546191349122040406356859512156595066368962709427340711912079526354041896</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># c= 56588793843319337746724191421797882919298382185789212342757993436535833538835522763229763594877667021903450245810685457239006347519758531527469886935960286141037132766391893854072489010976740737632329381497939974348685705638979763163979105135831966969462502212645331623912058124799565947994143213185185992532880019990646317265334164877775033560523059626818443959011448004361903639117592816084037679180458435582475302588998924848174547895790261541575925513887774899878433973389508964314168199120579798596134069816522786705872922325579820616825662181444792078041146420951204474840017339067144121627577361659204068184374437536021834866744629203173525452975550210170854689131249911980147698258676007773287058650732712430646538052932526385903664366173103845251460027428058991440409897707266114313760974556093019272676530729679647453145281642248231912623556282846880428854082954278583510952137984285948462279982465734721299949983519379129012579754979967314981583010596156968017750652218444293183553797064562640415021018922337530706623720329914512691891247157484346793520829716469015298628414649436647705362645773660510066453649321698837054590345696220371667776079460869975651358713981526804058124260167477067800116925869645048296793453667948263141449977001998111471446893535134204947903797920023508228450635623912282556920844859004265256776076205404744691901113660811077768891817723583726923916755419376617397161631255119342712941347511133994305902274463032094437850518737799347513359266736626688000378302129740278671252372100118745385045165006411579452656230211530847834481096650640749089767353846648834690606914589383720715808010950418989797804848844908028168</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># hint= 18294419705033749803018183186096112152402551291430209346583558472922013290690589800566513840852313152850815949693453061822473006436564091423275427734726183402882773876530619900017570008504487011496639900712276814180156892043893283337592870931604509182121126729757414875305980944401674021305109901787373919069250888132010941446377885033954783641074524904335530439232153795506796131799840815859332631629520548237546341180970993275196594743629686044240376562797833663497706050016975314637814732243863519275581657562824577416520887857531300484034288184348876435266599982852899863511077867993896260185876623577916847805434018960645048222193073045995417189741052112103530337456864569791619370910540989544825643388189316375353130601280427411097634982360164150650121200938121132975127392218810406251814769876585467670838768851084325019437401290895892649127468159357644376855642219871658242665316842174539950982501562012993620707848235840777465439382427694385975143409696608524006610718341269938590805893846551221772802799937388082484101818519470210469287886673559139819764993972650754106595274703362578095021666440413181006787169326119053179113634896719904706459255688323355422629750624744361016321749825711352381979526373745414466117496901188899402968884557897042915393081588659355938084179373516472500982821481620361825619098189709268749353026527626333126253300709023279752604686313218745191179635948042935114535230124092175888272591892209973826349925162305622280085164752927856768903063667002948252367704955505382627077430221515644243237639648659331074231756506975066652222700589414902433234306276129685280949801672748996080027431076564977892352264341740524147048337215454135414149313442308392992893543348489794522704133497959650612938856771407888345435215493938925195892269263980872231297338970570968594859288833461843787177471203855945919703978692377984</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr</span>(<span class="params">R, mask</span>):</span><br><span class="line"></span><br><span class="line"> output = (R &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xffffffffffffffffffffffffffffffff</span></span><br><span class="line"></span><br><span class="line"> i = (R &amp; mask) &amp; <span class="number">0xffffffffffffffffffffffffffffffff</span></span><br><span class="line"></span><br><span class="line"> lastbit=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">while</span> i != <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line"> lastbit ^= (i &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"> i = i &gt;&gt; <span class="number">1</span></span><br><span class="line"></span><br><span class="line"> output ^= lastbit</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> (output,lastbit)</span><br><span class="line"></span><br><span class="line">num_mask = bytes_to_long(mask)</span><br><span class="line"></span><br><span class="line">R = random.getrandbits(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(R)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line"></span><br><span class="line">  R,out = lfsr(R,num_mask)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(R)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 176011035589551066670092363165068881602</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 157117237038314150714243518116791116977</span></span><br></pre></td></tr></table></figure><p>对于第一部分来说我们需要先求出r</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r = int(裴波那契数列[2022])</span><br></pre></td></tr></table></figure><p>条件中给出我们要求的是fib（2022），这里有多种方法可以求解，暴力递归或者DP或者矩阵快速幂</p><p>这里暴力递归的时间复杂度是O(<spanclass="math inline">2<sup><em>N</em></sup></span>)</p><p>DP的时间复杂度是O(N)</p><p>矩阵快速幂的时间复杂度是O（<spanclass="math inline">log<sub></sub><em>N</em></span> ）</p><p>这里介绍下如何用快速幂来求斐波那契数列的第n项</p><p>对于斐波那契数列我们知道 <spanclass="math display"><em>f</em><sub><em>n</em></sub> = <em>f</em><sub><em>n</em> − 1</sub> + <em>f</em><sub><em>n</em> − 2</sub></span>这个数列是这个样子的 <spanclass="math display">0，1，1，2，3，5，8…</span> 首先我们先定义向量<spanclass="math inline">$\vec{v1}$</span>和<spanclass="math inline">$\vec{v2}$</span> <span class="math display">$$v1=\begin{pmatrix}0\\  1\end{pmatrix}$$</span></p><p><span class="math display">$$v2=\begin{pmatrix}1\\  1\end{pmatrix}$$</span></p><p>这里我们可以看作<spanclass="math inline">$\vec{v1}$</span>通过左乘一个矩阵得到了<spanclass="math inline">$\vec{v2}$</span>，即 <span class="math display">$$\begin{pmatrix}a &amp; b\\c &amp;d\end{pmatrix}\begin{pmatrix}0\\  1\end{pmatrix}=\begin{pmatrix}1\\1\end{pmatrix}$$</span> 这里要解除参数a,b,c,d我们就还需要一组 <spanclass="math display">$$\begin{pmatrix}a &amp; b\\c &amp;d\end{pmatrix}\begin{pmatrix}1\\  1\end{pmatrix}=\begin{pmatrix}1\\2\end{pmatrix}$$</span> 根据矩阵的乘法就可以知道</p><p>a=0 b=1 c=1 d=1,那么M矩阵也就出来了 <span class="math display">$$\begin{pmatrix}a &amp; b\\c &amp;d\end{pmatrix}=\begin{pmatrix}0 &amp; 1\\1 &amp;1\end{pmatrix}$$</span> 我们想求第n项,就变成了M的n-1次方乘上v1</p><p>现在问题就转换成了求一个矩阵的高次幂</p><p>先看传统的快速幂是如何求解的</p><p>假设现在要求的是<span class="math inline">3<sup>53</sup></span></p><p>将53转换成二进制也就是110101</p><p>把二进制位上不为0的数表示出来就会得到 <spanclass="math display">3<sup>32</sup> * 3<sup>16</sup> * 3<sup>4</sup> * 3<sup>1</sup> = 3<sup>53</sup></span>那么对于矩阵来说也是如此</p><p>回到本题，要求的是第2022项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">def matrix_mult(A, B):</span><br><span class="line"></span><br><span class="line">  &quot;&quot;&quot;2x2 矩阵乘法&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">  return [</span><br><span class="line"></span><br><span class="line">    [A[0][0] * B[0][0] + A[0][1] * B[1][0], A[0][0] * B[0][1] + A[0][1] * B[1][1]],</span><br><span class="line"></span><br><span class="line">    [A[1][0] * B[0][0] + A[1][1] * B[1][0], A[1][0] * B[0][1] + A[1][1] * B[1][1]],</span><br><span class="line"></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">def matrix_pow(mat, power):</span><br><span class="line"></span><br><span class="line">  &quot;&quot;&quot;矩阵快速幂&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">  result = [[1, 0], [0, 1]]  # 单位矩阵，区别于普通的快速幂初始的我们要取单位矩阵</span><br><span class="line"></span><br><span class="line">  while power &gt; 0:</span><br><span class="line"></span><br><span class="line">    if power % 2 == 1:</span><br><span class="line"></span><br><span class="line">      result = matrix_mult(result, mat)</span><br><span class="line"></span><br><span class="line">    mat = matrix_mult(mat, mat)</span><br><span class="line"></span><br><span class="line">    power //= 2</span><br><span class="line"></span><br><span class="line">  return result</span><br><span class="line"></span><br><span class="line">def fibonacci(n):</span><br><span class="line"></span><br><span class="line">  if n == 0:</span><br><span class="line"></span><br><span class="line">    return 0</span><br><span class="line"></span><br><span class="line">  mat = [[1, 1], [1, 0]]</span><br><span class="line"></span><br><span class="line">  mat_pow = matrix_pow(mat, n - 1)</span><br><span class="line"></span><br><span class="line">  return mat_pow[0][0]</span><br><span class="line"></span><br><span class="line">print(fibonacci(2022))  # 输出 fib(2022)</span><br></pre></td></tr></table></figure><p>这里用DP的代码是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">a, b = <span class="number">0</span>, <span class="number">1</span>  <span class="comment"># a = fib(0), b = fib(1)</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">    a, b = b, a + b  <span class="comment"># 滚动更新</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fibonacci(<span class="number">2022</span>))  <span class="comment"># 输出 fib(2022)</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r=167310648784659280728144836725590014814177400797476760876753704080114260114536495380135014244628641540465009479015934299376306193238817784129405465804445140758993423687143146613390123354557936785042721146861530732824681611737331775039385078670522766530356710254069894988375176317365030278080713218413201048678360636199830514037131301419749286901789895779518426772646405033423571360115994228553098871046696520981384561779336</span><br></pre></td></tr></table></figure><p>我们还知道 <spanclass="math display"><em>h</em><em>i</em><em>n</em><em>t</em> = <em>p</em> * <em>s</em> * <em>q</em> − <em>p</em> * <em>s</em> − <em>q</em> * <em>s</em> + <em>s</em></span></p><p><spanclass="math display"><em>h</em><em>i</em><em>n</em><em>t</em> = <em>s</em> * (<em>n</em> − <em>p</em> − <em>q</em> + 1)</span></p><p>也就是hint是phi的倍数</p><p>所以我可以直接求出私钥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">e = <span class="number">0o10001</span></span><br><span class="line"></span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, hint)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"></span><br><span class="line">enc1 = long_to_bytes(m)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(enc1) </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二部分是LFSR</p><p>这里的LFSR是已经输入和输出要求掩码mask，所以可以通过解方程来实现求解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>(<span class="params">state</span>):</span><br><span class="line"></span><br><span class="line">  result = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bin</span>(state)[<span class="number">2</span>:]]</span><br><span class="line"></span><br><span class="line">  PadLenth = <span class="number">128</span> - <span class="built_in">len</span>(result)</span><br><span class="line"></span><br><span class="line">  result = [ <span class="number">0</span> ] * PadLenth + result</span><br><span class="line"></span><br><span class="line">  <span class="keyword">assert</span> <span class="built_in">len</span>(result) == <span class="number">128</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_GF2_linear_system</span>(<span class="params">A, b</span>):</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  使用 SageMath 在 GF(2) 上求解线性方程组 Ax = b</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  :param A: 系数矩阵</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  :param b: 结果向量</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  :return: 解向量 x</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  F = GF(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">  A_GF2 = Matrix(F, A)</span><br><span class="line"></span><br><span class="line">  b_GF2 = vector(F, b)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">    x = A_GF2.solve_right(b_GF2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">  <span class="keyword">except</span> ValueError:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">m</span>):</span><br><span class="line"></span><br><span class="line">  a,b = m[<span class="number">0</span>],m[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">  solution = solve_GF2_linear_system(a, b)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> solution:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;解向量为: <span class="subst">&#123;solution&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> solution</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;无解&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>(<span class="params">seed,random</span>):</span><br><span class="line"></span><br><span class="line">  All = seed + random</span><br><span class="line"></span><br><span class="line">  a = [[<span class="number">0</span>]*<span class="number">128</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>)]</span><br><span class="line"></span><br><span class="line">  b = random</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line"></span><br><span class="line">    a[i] = All[i:i+<span class="number">128</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (a,b)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">random1 =  <span class="number">176011035589551066670092363165068881602</span></span><br><span class="line"></span><br><span class="line">random2 =  <span class="number">157117237038314150714243518116791116977</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">random1,random2 = <span class="built_in">map</span>(init, [random1,random2])</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">ans = solution(change(random1,random2))</span><br><span class="line"></span><br><span class="line">mask = <span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join(<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> ans),<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">mask = long_to_bytes(<span class="built_in">int</span>(mask))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mask) <span class="comment"># B1e_ju@n_le_QAQ!</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Wp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HNCTF2025</title>
      <link href="/2025/06/09/HNCTF2025/"/>
      <url>/2025/06/09/HNCTF2025/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么出题人的rsa总是ez">为什么出题人的rsa总是ez</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#part 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">flag, bits=<span class="number">1024</span></span>):</span><br><span class="line">    pad = os.urandom(bits//<span class="number">8</span> - <span class="built_in">len</span>(flag))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>.from_bytes(flag + pad, <span class="string">&quot;big&quot;</span>)</span><br><span class="line"></span><br><span class="line">p = random_prime(<span class="number">2</span>**<span class="number">1024</span>)</span><br><span class="line">q = random_prime(<span class="number">2</span>**<span class="number">1024</span>)</span><br><span class="line">a = randint(<span class="number">0</span>, <span class="number">2</span>**<span class="number">1024</span>)</span><br><span class="line">b = randint(<span class="number">0</span>, <span class="number">2</span>**<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">flag = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">m = pad(flag)</span><br><span class="line"><span class="keyword">assert</span> m &lt; n</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c=<span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n=<span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;h1=<span class="subst">&#123;p + b * q&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;h2=<span class="subst">&#123;a * p + q&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># c=13148687178480196374316468746303529314940770955906554155276099558796308164996908275540972246587924459788286109602343699872884525600948529446071271042497049233796074202353913271513295267105242313572798635502497823862563815696165512523074252855130556615141836416629657088666030382516860597286299687178449351241568084947058615139183249169425517358363928345728230233160550711153414555500038906881581637368920188681358625561539325485686180307359210958952213244628802673969397681634295345372096628997329630862000359069425551673474533426265702926675667531063902318865506356674927615264099404032793467912541801255735763704043</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># n=13718277507497477508850292481640653320398820265455820215511251843542886373380880887850571647060788265498378060163112689840208264538965960596605641194331300743676780910818492860412739541418029075802834265712602393103809065720527365081016381358333378953245379751008531500896923727040455566953960991908174586311899809864209624888469263612475732913062035036254077225370843701146080145441104733074178115602425412116325647598625157922655504918118208783230138448694045386019901732846478340735331718476554208157393418221315041837392020742062275999319586357229583509788489495876723122993592623230858393165458733055504467513549</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># h1=6992022576367328281523272055384380182550712894467837916200781058620282657859189270338635886912232754034211897894637971546032107000253692739473463119025570291091085702056938901846349325941043398928197991115231668917435951127329817379935880511925882734157491821315858319170121031835598580384038723788681860763814776365440362143661999054338470989558459179388468943933975861549233231199667742564080001256192881732567616103760815633265325456143601649393547666835326272408622540044065067528568675569233240785553062685974593620235466519632833169291153478793523397788719000334929715524989845012633742964209311952378479134661</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># h2=16731800146050995761642066586565348732313856101572403535951688869814016691871958158137790504490910445304384109605408840493227057830017039824412834989258703833576252634055087138315434304691218949240382395879124201923060510497916818961571111218224960267593032380037212325935576750663442553781924370849537501656957488833521657563900462052017695599020610911371304659875887924695896434699048696392210066253577839887826292569913713802634067508141124685789817330268562127695548527522031774601654778934513355315628270319037043809972087930951609429846675450469414212384044849089372435124609387061864545559812994515828333828939</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#part 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">a = random_prime()</span><br><span class="line">b = random_prime()</span><br><span class="line">g = random_prime()</span><br><span class="line">h = <span class="number">2</span>*g*a*b+a+b</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> is_prime(h):</span><br><span class="line">    a = random_prime()</span><br><span class="line">    b = random_prime()</span><br><span class="line">    g = random_prime()</span><br><span class="line">    h = <span class="number">2</span>*g*a*b+a+b</span><br><span class="line">N = <span class="number">2</span>*h*g+<span class="number">1</span></span><br><span class="line">e <span class="keyword">from</span> part1<span class="string">&#x27;s flag</span></span><br><span class="line"><span class="string">flag=b&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">c=pow(bytes_to_long(flag),e,N)</span></span><br><span class="line"><span class="string">print(N)</span></span><br><span class="line"><span class="string">print(g)</span></span><br><span class="line"><span class="string">print(c)</span></span><br><span class="line"><span class="string">#N=10244621233521168199001177069337072125430662416754674144307553476569744623474797179990380824494968546110022341144527766891662229403969035901337876527595841503498459533492730326942662450786522178313517616168650624224723066308178042783540825899502172432884573844850572330970359712379107318586435848029783774998269247992706770665069866338710349292941829996807892349030660021792813986069535854445874069535737849684959397062724387110903918355074327499675776518032266136930264621047345474782910332154803497103199598761422179303240476950271702406633802957400888398042773978322395227920699611001956973796492459398737390290487</span></span><br><span class="line"><span class="string">#g=2296316201623391483093360819129167852633963112610999269673854449302228853625418585609211427788830598219647604923279054340009043347798635222302374950707</span></span><br><span class="line"><span class="string">#c=7522161394702437062976246147354737122573350166270857493289161875402286558096915490526439656281083416286224205494418845652940140144292045338308479237214749282932144020368779474518032067934302376430305635297260147830918089492765917640581392606559936829974748692299762475615766076425088306609448483657623795178727831373194757182797030376302086360751637238867384469269953187938304369668436238848537646544257504724753333177938997524154486602644412199535102323238852958634746165559537630341890450666170836721803871120344373143081664567068672230842855208267929484000179260292518351155693154372172449820053764896414799137097</span></span><br></pre></td></tr></table></figure><p>题目分为两个部分，在第一部分中我可以得到第二部分所需要的e</p><p>这里我们发现p,q,a,b的数量级是相同的</p><p>现有等式 <spanclass="math display"><em>h</em>1 = <em>p</em> + <em>b</em> * <em>q</em></span></p><p><spanclass="math display"><em>h</em>2 = <em>a</em> * <em>p</em> + <em>q</em></span></p><p>现对等式做如下变换 <spanclass="math display"><em>h</em>1 * <em>h</em>2 − <em>p</em> * <em>h</em>1 − <em>q</em> * <em>h</em>2 ≡ 0 mod  <em>n</em></span></p><p><spanclass="math display"><em>h</em>1 * <em>h</em>2 − <em>p</em> * <em>h</em>1 − <em>q</em> * <em>h</em>2 = <em>k</em><em>n</em></span></p><p>现在我们知道h1,h2</p><p>这里造格去打即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c=<span class="number">13148687178480196374316468746303529314940770955906554155276099558796308164996908275540972246587924459788286109602343699872884525600948529446071271042497049233796074202353913271513295267105242313572798635502497823862563815696165512523074252855130556615141836416629657088666030382516860597286299687178449351241568084947058615139183249169425517358363928345728230233160550711153414555500038906881581637368920188681358625561539325485686180307359210958952213244628802673969397681634295345372096628997329630862000359069425551673474533426265702926675667531063902318865506356674927615264099404032793467912541801255735763704043</span></span><br><span class="line"></span><br><span class="line">n=<span class="number">13718277507497477508850292481640653320398820265455820215511251843542886373380880887850571647060788265498378060163112689840208264538965960596605641194331300743676780910818492860412739541418029075802834265712602393103809065720527365081016381358333378953245379751008531500896923727040455566953960991908174586311899809864209624888469263612475732913062035036254077225370843701146080145441104733074178115602425412116325647598625157922655504918118208783230138448694045386019901732846478340735331718476554208157393418221315041837392020742062275999319586357229583509788489495876723122993592623230858393165458733055504467513549</span></span><br><span class="line"></span><br><span class="line">t1=<span class="number">6992022576367328281523272055384380182550712894467837916200781058620282657859189270338635886912232754034211897894637971546032107000253692739473463119025570291091085702056938901846349325941043398928197991115231668917435951127329817379935880511925882734157491821315858319170121031835598580384038723788681860763814776365440362143661999054338470989558459179388468943933975861549233231199667742564080001256192881732567616103760815633265325456143601649393547666835326272408622540044065067528568675569233240785553062685974593620235466519632833169291153478793523397788719000334929715524989845012633742964209311952378479134661</span></span><br><span class="line"></span><br><span class="line">t2=<span class="number">16731800146050995761642066586565348732313856101572403535951688869814016691871958158137790504490910445304384109605408840493227057830017039824412834989258703833576252634055087138315434304691218949240382395879124201923060510497916818961571111218224960267593032380037212325935576750663442553781924370849537501656957488833521657563900462052017695599020610911371304659875887924695896434699048696392210066253577839887826292569913713802634067508141124685789817330268562127695548527522031774601654778934513355315628270319037043809972087930951609429846675450469414212384044849089372435124609387061864545559812994515828333828939</span></span><br><span class="line"></span><br><span class="line">brute = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>^brute):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>^brute):</span><br><span class="line"></span><br><span class="line">    L = Matrix(ZZ, [</span><br><span class="line"></span><br><span class="line">      [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>^brute*t1],</span><br><span class="line"></span><br><span class="line">      [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>^brute*t2],</span><br><span class="line"></span><br><span class="line">      [<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>^(<span class="number">1024</span>-brute),t1*i+t2*j-t1*t2],</span><br><span class="line"></span><br><span class="line">      [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,n]</span><br><span class="line"></span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    L[:,-<span class="number">1</span>:] *= n</span><br><span class="line"></span><br><span class="line">    res = L.LLL()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    p = <span class="number">2</span>^brute*<span class="built_in">abs</span>(res[<span class="number">0</span>])+i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(n % p == <span class="number">0</span>):</span><br><span class="line"></span><br><span class="line">      q=n//p</span><br><span class="line"></span><br><span class="line">      phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">      d=inverse(<span class="number">65537</span>,phi)</span><br><span class="line"></span><br><span class="line">      <span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,n)))</span><br><span class="line"></span><br><span class="line">      <span class="built_in">print</span>(<span class="built_in">pow</span>(c,d,n))</span><br></pre></td></tr></table></figure><p>这样就得到了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;flag&#123;e_is_xevaf-cityf-fisof-ketaf-metaf-disef-nuvaf-cysuf-dosuf-getuf-cysuf-dasix,bubbleBabble&#125;</span><br></pre></td></tr></table></figure><p>这里e还需要用BubbleBabble解码（刚开始做的时候以为括号中的就是e导致一直没做出来╥﹏╥，感觉还是太急了）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e=81733668723981020451323</span><br></pre></td></tr></table></figure><p>这一部分其实是有原题的的，在<ahref="https://blog.maple3142.net/2024/05/28/angstromctf-2024-writeups/#bl%C3%A5haj">maple</a>神的博客中有</p><p>看到第二部分</p><p>很明显的<ahref="https://hasegawaazusa.github.io/common-prime-rsa.html#%E5%B7%B2%E7%9F%A5-g">CommonPrime RSA</a></p><p>通过分析，我们知道 <spanclass="math display"><em>p</em> = 2 * <em>g</em> * <em>a</em> + 1</span></p><p><spanclass="math display"><em>q</em> = 2 * <em>g</em> * <em>b</em> + 1</span></p><p>其中 <spanclass="math display"><em>g</em> ≈ <em>n</em><sup>0.244</sup></span>用脚本直接打就好</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">N=<span class="number">10244621233521168199001177069337072125430662416754674144307553476569744623474797179990380824494968546110022341144527766891662229403969035901337876527595841503498459533492730326942662450786522178313517616168650624224723066308178042783540825899502172432884573844850572330970359712379107318586435848029783774998269247992706770665069866338710349292941829996807892349030660021792813986069535854445874069535737849684959397062724387110903918355074327499675776518032266136930264621047345474782910332154803497103199598761422179303240476950271702406633802957400888398042773978322395227920699611001956973796492459398737390290487</span></span><br><span class="line"></span><br><span class="line">g=<span class="number">2296316201623391483093360819129167852633963112610999269673854449302228853625418585609211427788830598219647604923279054340009043347798635222302374950707</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">81733668723981020451323</span></span><br><span class="line"></span><br><span class="line">enc=<span class="number">7522161394702437062976246147354737122573350166270857493289161875402286558096915490526439656281083416286224205494418845652940140144292045338308479237214749282932144020368779474518032067934302376430305635297260147830918089492765917640581392606559936829974748692299762475615766076425088306609448483657623795178727831373194757182797030376302086360751637238867384469269953187938304369668436238848537646544257504724753333177938997524154486602644412199535102323238852958634746165559537630341890450666170836721803871120344373143081664567068672230842855208267929484000179260292518351155693154372172449820053764896414799137097</span></span><br><span class="line"></span><br><span class="line">gamma = <span class="number">500</span>/(<span class="number">1024</span>*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">cbits = ceil(nbits * (<span class="number">0.5</span> - <span class="number">2</span> * gamma))</span><br><span class="line"></span><br><span class="line">M = (N - <span class="number">1</span>) // (<span class="number">2</span> * g)</span><br><span class="line"></span><br><span class="line">u = M // (<span class="number">2</span> * g)</span><br><span class="line"></span><br><span class="line">v = M - <span class="number">2</span> * g * u</span><br><span class="line"></span><br><span class="line">GF = Zmod(N)</span><br><span class="line"></span><br><span class="line">x = GF.random_element()</span><br><span class="line"></span><br><span class="line">y = x ^ (<span class="number">2</span> * g)</span><br><span class="line"></span><br><span class="line">\<span class="comment"># c的范围大概与N^(0.5-2*gamma)很接近</span></span><br><span class="line"></span><br><span class="line">c = bsgs(y, y ^ u, (<span class="number">2</span>**(cbits-<span class="number">1</span>), <span class="number">2</span>**(cbits+<span class="number">1</span>)), operation=<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#(a, b, bounds, operation=&#x27;*&#x27;, identity=None, inverse=None, op=None)</span></span><br><span class="line"></span><br><span class="line">ab = u - c</span><br><span class="line"></span><br><span class="line">apb = v + <span class="number">2</span> * g * c</span><br><span class="line"></span><br><span class="line">P.&lt;x&gt; = ZZ[]</span><br><span class="line"></span><br><span class="line">f = x ^ <span class="number">2</span> - apb * x + ab</span><br><span class="line"></span><br><span class="line">a = f.roots()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a:</span><br><span class="line"></span><br><span class="line">  a, b = a[<span class="number">0</span>][<span class="number">0</span>], a[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">  p = <span class="number">2</span> * g * a + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  q = <span class="number">2</span> * g * b + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">assert</span> p * q == N</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(enc,inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>)),N))))</span><br><span class="line"><span class="comment">#b&#x27;flag&#123;I wish you success in your cryptography career&#125;&#x27;</span></span><br><span class="line"><span class="comment">#b&#x27;H&amp;NCTF&#123;I wish you success in your cryptography career&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>其中bsgs那一行可能是sage版本问题会报错，需要自己修改参数</p><p>这题目是改强网杯的，基本上就是原题，所以找强网杯的<ahref="https://blog.s1um4i.com/2024-QWBCTF/#easyrsa">板子</a>也可以打掉</p><h1 id="哈基coke">哈基coke</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">arnold_encode</span>(<span class="params">image, shuffle_times, a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Arnold shuffle for rgb image</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        image: input original rgb image</span></span><br><span class="line"><span class="string">        shuffle_times: how many times to shuffle</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        Arnold encode image</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    arnold_image = np.zeros(shape=image.shape)</span><br><span class="line"></span><br><span class="line">    h, w = image.shape[<span class="number">0</span>], image.shape[<span class="number">1</span>]</span><br><span class="line">    N = h</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> time <span class="keyword">in</span> <span class="built_in">range</span>(shuffle_times):</span><br><span class="line">        <span class="keyword">for</span> ori_x <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">            <span class="keyword">for</span> ori_y <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">    </span><br><span class="line">                new_x = (<span class="number">1</span>*ori_x + b*ori_y)% N</span><br><span class="line">                new_y = (a*ori_x + (a*b+<span class="number">1</span>)*ori_y) % N</span><br><span class="line">    </span><br><span class="line">                arnold_image[new_x, new_y, :] = image[ori_x, ori_y, :]</span><br><span class="line">    </span><br><span class="line">        image = np.copy(arnold_image)</span><br><span class="line">    </span><br><span class="line">    cv2.imwrite(<span class="string">&#x27;en_flag.png&#x27;</span>, arnold_image, [<span class="built_in">int</span>(cv2.IMWRITE_PNG_COMPRESSION), <span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> arnold_image</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;coke.png&#x27;</span>)</span><br><span class="line">arnold_encode(img,<span class="number">6</span>,<span class="number">9</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>考察的是Arnold变换，比赛中有非常多的解，那么gpt肯定是梭出来的，也可以参考<ahref="https://hasegawaazusa.github.io/arnold-cat-note.html#%E7%8C%AB%E8%84%B8%E5%8F%98%E6%8D%A2%E7%AE%80%E8%BF%B0">这篇博客</a>和<ahref="https://www.cnblogs.com/alexander17/p/18551089">这篇</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">arnold_decode</span>(<span class="params">image, shuffle_times, a, b</span>):</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;&quot;&quot;Arnold 逆置乱解密 (支持 RGB 图像)&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  h, w = image.shape[<span class="number">0</span>], image.shape[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">  N = h</span><br><span class="line"></span><br><span class="line">  decoded_image = np.zeros_like(image)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(shuffle_times):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> new_x <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> new_y <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line"></span><br><span class="line">        \<span class="comment"># 逆向 Arnold 公式</span></span><br><span class="line"></span><br><span class="line">        ori_x = ((a*b + <span class="number">1</span>) * new_x - b * new_y) % N</span><br><span class="line"></span><br><span class="line">        ori_y = (-a * new_x + <span class="number">1</span> * new_y) % N</span><br><span class="line"></span><br><span class="line">        decoded_image[ori_x, ori_y, :] = image[new_x, new_y, :]</span><br><span class="line"></span><br><span class="line">    image = np.copy(decoded_image)</span><br><span class="line"></span><br><span class="line">  cv2.imwrite(<span class="string">&#x27;decoded_flag.png&#x27;</span>, decoded_image)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> decoded_image</span><br></pre></td></tr></table></figure><h1 id="lcgp">lcgp</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">import gmpy2</span><br><span class="line"></span><br><span class="line">random = [</span><br><span class="line"></span><br><span class="line">  11250327355112956284720719987943941825496074893551827972877616718074592862130806975889275745497426515405562887727117008818863728803549848574821067056997423443681347885027000632462241968640893471352200125748453396098854283137158609264944692129301617338233670002547470932851350750870478630955328653729176440142198779254117385657086615711880537380965161180532127926250520546846863536247569437, </span><br><span class="line"></span><br><span class="line">  1289730679860726245234376434590068355673648326448223956572444944595048952808106413165882424967688302988257332835229651422892728384363094065438370663362237241013242843898967355558977974152917458085812489310623200114007728021151551927660975648884448177346441902806386690751359848832912607313329587047853601875294089502467524598036474193845319703759478494109845743765770254308199331552085163360820459311523382612948322756700518669154345145757700392164795583041949318636, </span><br><span class="line"></span><br><span class="line">  147853940073845086740348793965278392144198492906678575722238097853659884813579087132349845941828785238545905768867483183634111847434793587821166882679621234634787376562998606494582491550592596838027522285263597247798608351871499848571767008878373891341861704004755752362146031951465205665840079918938797056361771851047994530311215961536936283541887169156535180878864233663699607369701462321037824218572445283037132205269900255514050653933970174340553425147148993214797622395988788709572605943994223528210919230924346860415844639247799805670459, </span><br><span class="line"></span><br><span class="line">  7426988179463569301750073197586782838200202717435911385357661153208197570200804485303362695962843396307030986052311117232622043073376409347836815567322367321085387874196758434280075897513536063432730099103786733447352512984165432175254784494400699821500026196293994318206774720213317148132311223050562359314735977091536842516316149049281012797103790472349557847649282356393682360276814293256129426440381745354969522053841093229320186679875177247919985804406150542514337515002645320320069788390314900121917747534146857716743377658436154645197488134340819076585888700553005062311578963869641978771532330577371974731136, </span><br><span class="line"></span><br><span class="line">  10389979373355413148376869524987139791217158307590828693700943753512488757973725227850725013905113587408391654379552713436220790487026223039058296951420273907725324214990441639760825661323514381671141482079783647253661594138658677104054180912818864005556386671430082941396497098166887200556959866845325602873713813206312644590812141400536476615405444030140762980665885244721798105034497461675317071497925846844396796854201566038890503298824928152263774446268093725702310124363765630370263370678902342200494544961012407826314577564991676315451785987248633724138137813024481818431889574317602521878974976264742037227074</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">n = n=604805773885048132038788501528078428693141138274580426531445179173412328238102786863592612653315029009606622583856638282837864213048342883583286440071990592001905867027978355755042060684149344414810835371740304319571184567860694439564098306766474576403800046937218588251809179787769286393579687694925268985445059</span><br><span class="line"></span><br><span class="line">d1 = random[1] - random[0]</span><br><span class="line"></span><br><span class="line">d2 = random[2] - random[1]</span><br><span class="line"></span><br><span class="line">d3 = random[3] - random[2]</span><br><span class="line"></span><br><span class="line">d4 = random[4] - random[3]</span><br><span class="line"></span><br><span class="line">T1 = d2^2 - d3*d1</span><br><span class="line"></span><br><span class="line">T2 = d3^2 - d4*d2</span><br><span class="line"></span><br><span class="line">m = gcd(T1, T2)</span><br><span class="line"></span><br><span class="line">print(&quot;m bits:&quot;, m.nbits())  </span><br><span class="line"></span><br><span class="line">print(&quot;is prime?&quot;, is_prime(m)) </span><br><span class="line"></span><br><span class="line">a = (random[2] - random[1]) * inverse_mod(random[1] - random[0], m) % m</span><br><span class="line"></span><br><span class="line">b = (random[1] - a * random[0]) % m</span><br><span class="line"></span><br><span class="line">assert (a * random[0] + b) % m == random[1]</span><br><span class="line"></span><br><span class="line">assert (a * random[1] + b) % m == random[2]</span><br><span class="line"></span><br><span class="line">c = (random[0] - b) * inverse_mod(a, m) % m</span><br><span class="line"></span><br><span class="line">e = 2024</span><br><span class="line"></span><br><span class="line">F = Zmod(n)</span><br><span class="line"></span><br><span class="line">flag = discrete_log(F(c), F(e))</span><br><span class="line"></span><br><span class="line">from Crypto.Util.number import long_to_bytes</span><br><span class="line"></span><br><span class="line">flag_bytes = long_to_bytes(flag)</span><br><span class="line"></span><br><span class="line">print(&quot;Flag:&quot;, flag_bytes)</span><br></pre></td></tr></table></figure><p>考察的是lcg和离散对数</p><p>我们要先通过LCG求出c</p><p>这里给了我们五个seed的状态要我们恢复C</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">output =  [<span class="number">11250327355112956284720719987943941825496074893551827972877616718074592862130806975889275745497426515405562887727117008818863728803549848574821067056997423443681347885027000632462241968640893471352200125748453396098854283137158609264944692129301617338233670002547470932851350750870478630955328653729176440142198779254117385657086615711880537380965161180532127926250520546846863536247569437</span>, <span class="number">1289730679860726245234376434590068355673648326448223956572444944595048952808106413165882424967688302988257332835229651422892728384363094065438370663362237241013242843898967355558977974152917458085812489310623200114007728021151551927660975648884448177346441902806386690751359848832912607313329587047853601875294089502467524598036474193845319703759478494109845743765770254308199331552085163360820459311523382612948322756700518669154345145757700392164795583041949318636</span>, <span class="number">147853940073845086740348793965278392144198492906678575722238097853659884813579087132349845941828785238545905768867483183634111847434793587821166882679621234634787376562998606494582491550592596838027522285263597247798608351871499848571767008878373891341861704004755752362146031951465205665840079918938797056361771851047994530311215961536936283541887169156535180878864233663699607369701462321037824218572445283037132205269900255514050653933970174340553425147148993214797622395988788709572605943994223528210919230924346860415844639247799805670459</span>, <span class="number">7426988179463569301750073197586782838200202717435911385357661153208197570200804485303362695962843396307030986052311117232622043073376409347836815567322367321085387874196758434280075897513536063432730099103786733447352512984165432175254784494400699821500026196293994318206774720213317148132311223050562359314735977091536842516316149049281012797103790472349557847649282356393682360276814293256129426440381745354969522053841093229320186679875177247919985804406150542514337515002645320320069788390314900121917747534146857716743377658436154645197488134340819076585888700553005062311578963869641978771532330577371974731136</span>, <span class="number">10389979373355413148376869524987139791217158307590828693700943753512488757973725227850725013905113587408391654379552713436220790487026223039058296951420273907725324214990441639760825661323514381671141482079783647253661594138658677104054180912818864005556386671430082941396497098166887200556959866845325602873713813206312644590812141400536476615405444030140762980665885244721798105034497461675317071497925846844396796854201566038890503298824928152263774446268093725702310124363765630370263370678902342200494544961012407826314577564991676315451785987248633724138137813024481818431889574317602521878974976264742037227074</span>]</span><br><span class="line"></span><br><span class="line">t = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(output)):</span><br><span class="line"></span><br><span class="line">  t.append(output[i]-output[i-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">T = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(t)-<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">  T.append(t[i+<span class="number">1</span>]*t[i-<span class="number">1</span>] - t[i]**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">N = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(T)-<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">  n = gmpy2.gcd(T[i],T[i+<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">  N.append(<span class="built_in">int</span>(n))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> N:</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">    a = gmpy2.invert(t[<span class="number">0</span>],n) * t[<span class="number">1</span>] % n</span><br><span class="line"></span><br><span class="line">    b = output[<span class="number">1</span>] - a*output[<span class="number">0</span>] % n</span><br><span class="line"></span><br><span class="line">    a_ = gmpy2.invert(a,n)</span><br><span class="line"></span><br><span class="line">    seed = a_ * (output[<span class="number">0</span>] - b) % n</span><br><span class="line"></span><br><span class="line">    flag = long_to_bytes(seed)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(seed)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">  <span class="keyword">except</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>得到c之后就是简单解个离散对数了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="number">98136663393066487319477131255488756533037186459124433869847045986870213783395243380337142782779765255670853582334927187474123853371504168896312528278296763527266828907487342102002206806408616944398694810398049626860321901229014612541564249969665358849039818103044159048535403863928440335143886672949700153798350</span></span><br><span class="line"></span><br><span class="line">m = <span class="number">2024</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">604805773885048132038788501528078428693141138274580426531445179173412328238102786863592612653315029009606622583856638282837864213048342883583286440071990592001905867027978355755042060684149344414810835371740304319571184567860694439564098306766474576403800046937218588251809179787769286393579687694925268985445059</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">g = Mod(m,n)</span><br><span class="line"></span><br><span class="line">flag = discrete_log(c,g)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag))</span><br></pre></td></tr></table></figure><h1 id="数据处理">数据处理</h1><p>拿到三血</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;H&amp;NCTF&#123;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">btl = <span class="built_in">str</span>(bytes_to_long(flag))</span><br><span class="line"></span><br><span class="line">lowercase = <span class="string">&#x27;0123456789&#x27;</span> </span><br><span class="line"></span><br><span class="line">uppercase = <span class="string">&#x27;7***4****5&#x27;</span> </span><br><span class="line"></span><br><span class="line">table = <span class="string">&#x27;&#x27;</span>.maketrans(lowercase, uppercase) </span><br><span class="line"></span><br><span class="line">new_flag = btl.translate(table)</span><br><span class="line"></span><br><span class="line">n = <span class="number">2</span> ** <span class="number">512</span></span><br><span class="line"></span><br><span class="line">m = random.randint(<span class="number">2</span>, n - <span class="number">1</span>) | <span class="number">1</span></span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m, <span class="built_in">int</span>(new_flag), n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;m = &#x27;</span> + <span class="built_in">str</span>(m))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c = &#x27;</span> + <span class="built_in">str</span>(c))</span><br><span class="line"></span><br><span class="line"><span class="comment"># m = 5084057673176634704877325918195984684237263100965172410645544705367004138917087081637515846739933954602106965103289595670550636402101057955537123475521383</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c = 2989443482952171039348896269189568991072039347099986172010150242445491605115276953489889364577445582220903996856271544149424805812495293211539024953331399</span></span><br></pre></td></tr></table></figure><p>还是一样的，我们要先解离散对数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">2</span>^<span class="number">512</span></span><br><span class="line">m = <span class="number">3097502164103987164323080671192386511065857410221288153061140622970224914473224807053016180200525552838404973541878618391348653867355109392070344210878871</span></span><br><span class="line">c = <span class="number">7575520525465161327133831389027121519268752255113564686585808502942641702897542584106400374391419523883832010238676747853882832409855139906428435538853383</span></span><br><span class="line">e = discrete_log(c, Mod(m, n))</span><br><span class="line"><span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure><p>后面就是全排列的爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">new_flag = <span class="string">&quot;3282248010524512146638712359816289396373430161050484501341123570760619381019795910712610762203934445754701&quot;</span></span><br><span class="line">lowercase = <span class="string">&#x27;0123456789&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">unknown_positions = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]  <span class="comment"># 这些位置的字符未知（索引从0开始）</span></span><br><span class="line">known_chars = [<span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;5&#x27;</span>]  <span class="comment"># 已知字符的位置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 填充未知位置</span></span><br><span class="line"></span><br><span class="line">unknown_positions = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]  <span class="comment"># 7 个未知位置</span></span><br><span class="line"><span class="keyword">for</span> digits <span class="keyword">in</span> itertools.product(<span class="string">&#x27;0123456789&#x27;</span>, repeat=<span class="number">7</span>):</span><br><span class="line">    uppercase = [<span class="string">&#x27;&#x27;</span>] * <span class="number">10</span></span><br><span class="line">    uppercase[<span class="number">0</span>] = <span class="string">&#x27;7&#x27;</span></span><br><span class="line">    uppercase[<span class="number">4</span>] = <span class="string">&#x27;4&#x27;</span></span><br><span class="line">    uppercase[<span class="number">9</span>] = <span class="string">&#x27;5&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, pos <span class="keyword">in</span> <span class="built_in">enumerate</span>(unknown_positions):</span><br><span class="line">        uppercase[pos] = digits[i]</span><br><span class="line"></span><br><span class="line">    uppercase_str = <span class="string">&#x27;&#x27;</span>.join(uppercase)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 其余代码不变</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建替换表（反向，因为我们要从new_flag还原到btl）</span></span><br><span class="line"></span><br><span class="line">    reverse_table = <span class="built_in">str</span>.maketrans(uppercase_str, lowercase)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 尝试反向替换</span></span><br><span class="line"></span><br><span class="line">        btl_str = new_flag.translate(reverse_table)</span><br><span class="line">        btl = <span class="built_in">int</span>(btl_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        flag_bytes = long_to_bytes(btl)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;H&amp;NCTF&#123;&#x27;</span> <span class="keyword">in</span> flag_bytes:</span><br><span class="line">            <span class="built_in">print</span>(uppercase_str)</span><br><span class="line">            <span class="built_in">print</span>(flag_bytes)</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> (ValueError, UnicodeDecodeError):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 转换失败，跳过</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><h1 id="ez-factor">ez-factor</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line">rbits = <span class="number">248</span></span><br><span class="line"></span><br><span class="line">Nbits = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">p = getPrime(Nbits // <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">q = getPrime(Nbits // <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">N = p * q</span><br><span class="line"></span><br><span class="line">r = getPrime(rbits)</span><br><span class="line"></span><br><span class="line">hint = getPrime(Nbits // <span class="number">2</span>) * p + r</span><br><span class="line"></span><br><span class="line">R = <span class="number">2</span>^rbits</span><br><span class="line"></span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">n=p*q</span><br><span class="line"></span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;H&amp;NCTF&#123;&#x27;</span> + <span class="built_in">str</span>(uuid.uuid4()).encode() + <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;N=&quot;</span>,N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hint=&quot;</span>,hint)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line">N= <span class="number">155296910351777777627285876776027672037304214686081903889658107735147953235249881743173605221986234177656859035013052546413190754332500394269777193023877978003355429490308124928931570682439681040003000706677272854316717486111569389104048561440718904998206734429111757045421158512642953817797000794436498517023</span></span><br><span class="line"></span><br><span class="line">hint= <span class="number">128897771799394706729823046048701824275008016021807110909858536932196768365642942957519868584739269771824527061163774807292614556912712491005558619713483097387272219068456556103195796986984219731534200739471016634325466080225824620962675943991114643524066815621081841013085256358885072412548162291376467189508</span></span><br><span class="line"></span><br><span class="line">c=<span class="number">32491252910483344435013657252642812908631157928805388324401451221153787566144288668394161348411375877874802225033713208225889209706188963141818204000519335320453645771183991984871397145401449116355563131852618397832704991151874545202796217273448326885185155844071725702118012339804747838515195046843936285308</span></span><br></pre></td></tr></table></figure><p>看到加密等式 <spanclass="math display"><em>h</em><em>i</em><em>n</em><em>t</em> = <em>k</em> * <em>p</em> + <em>r</em></span>移项 <spanclass="math display"><em>h</em><em>i</em><em>n</em><em>t</em> − <em>r</em> = 0 mod  <em>p</em></span>看到这里不难想到用cooper来打，因为r是我们的小根</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">N = <span class="number">155296910351777777627285876776027672037304214686081903889658107735147953235249881743173605221986234177656859035013052546413190754332500394269777193023877978003355429490308124928931570682439681040003000706677272854316717486111569389104048561440718904998206734429111757045421158512642953817797000794436498517023</span></span><br><span class="line"></span><br><span class="line">hint = <span class="number">128897771799394706729823046048701824275008016021807110909858536932196768365642942957519868584739269771824527061163774807292614556912712491005558619713483097387272219068456556103195796986984219731534200739471016634325466080225824620962675943991114643524066815621081841013085256358885072412548162291376467189508</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">32491252910483344435013657252642812908631157928805388324401451221153787566144288668394161348411375877874802225033713208225889209706188963141818204000519335320453645771183991984871397145401449116355563131852618397832704991151874545202796217273448326885185155844071725702118012339804747838515195046843936285308</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">R = <span class="number">2</span>^<span class="number">248</span> <span class="comment"># r 的上界</span></span><br><span class="line"></span><br><span class="line">P.&lt;x&gt; = PolynomialRing(Zmod(N))</span><br><span class="line"></span><br><span class="line">f = hint - x</span><br><span class="line"></span><br><span class="line">f = f.monic()</span><br><span class="line"></span><br><span class="line">r = f.small_roots(X=R, beta=<span class="number">0.4</span>, epsilon=<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> r!=[]:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><p>这里要注意参数，大概20秒左右能抛出结果，也可以使用flatter来加速</p><p>现在我只需要用gcd求出p即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">N= <span class="number">155296910351777777627285876776027672037304214686081903889658107735147953235249881743173605221986234177656859035013052546413190754332500394269777193023877978003355429490308124928931570682439681040003000706677272854316717486111569389104048561440718904998206734429111757045421158512642953817797000794436498517023</span></span><br><span class="line"></span><br><span class="line">hint= <span class="number">128897771799394706729823046048701824275008016021807110909858536932196768365642942957519868584739269771824527061163774807292614556912712491005558619713483097387272219068456556103195796986984219731534200739471016634325466080225824620962675943991114643524066815621081841013085256358885072412548162291376467189508</span></span><br><span class="line"></span><br><span class="line">c=<span class="number">32491252910483344435013657252642812908631157928805388324401451221153787566144288668394161348411375877874802225033713208225889209706188963141818204000519335320453645771183991984871397145401449116355563131852618397832704991151874545202796217273448326885185155844071725702118012339804747838515195046843936285308</span></span><br><span class="line"></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line"></span><br><span class="line">r=<span class="number">310384729555967603261671853388867753979360895944109353196595111340924855459</span></span><br><span class="line"></span><br><span class="line">p=GCD(hint-r,N)</span><br><span class="line"></span><br><span class="line">q=N//p</span><br><span class="line"></span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,inverse(e,phi),N)))</span><br></pre></td></tr></table></figure><p>这里我觉得可以看成ACD的问题来做感觉可以用正交格，当时比赛的时候就是一直往这方面上想但是没做出来</p><h1 id="ez-factor-pro">ez-factor-pro</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gmssl.sm4 <span class="keyword">import</span> CryptSM4, SM4_ENCRYPT</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line">rbits = <span class="number">252</span></span><br><span class="line"></span><br><span class="line">Nbits = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">p = getPrime(Nbits//<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">q = getPrime(Nbits//<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">N = p*q</span><br><span class="line"></span><br><span class="line">r = getPrime(rbits)</span><br><span class="line"></span><br><span class="line">hint = getPrime(Nbits// <span class="number">2</span>)*p+r</span><br><span class="line"></span><br><span class="line">R = <span class="number">2</span>^rbits</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;H&amp;NCTF&#123;&#x27;</span>+<span class="built_in">str</span>(uuid.uuid4()).encode()+<span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">leak=p*q*r</span><br><span class="line"></span><br><span class="line">r_bytes = long_to_bytes(leak)</span><br><span class="line"></span><br><span class="line">iv = r_bytes[:<span class="number">16</span>] <span class="keyword">if</span> <span class="built_in">len</span>(r_bytes) &gt;= <span class="number">16</span> <span class="keyword">else</span> r_bytes + <span class="string">b&#x27;\0&#x27;</span>*(<span class="number">16</span>-<span class="built_in">len</span>(r_bytes))</span><br><span class="line"></span><br><span class="line">key = sha256(<span class="built_in">str</span>(p + q + r).encode()).digest()[:<span class="number">16</span>] </span><br><span class="line"></span><br><span class="line">crypt_sm4 = CryptSM4()</span><br><span class="line"></span><br><span class="line">crypt_sm4.set_key(key, SM4_ENCRYPT)</span><br><span class="line"></span><br><span class="line">padded_flag = pad(flag, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">c = crypt_sm4.crypt_cbc(iv, padded_flag)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;N=&quot;</span>,N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hint=&quot;</span>,hint)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#N = 133196604547992363575584257705624404667968600447626367604523982016247386106677898877957513177151872429736948168642977575860754686097638795690422242542292618145151312000412007125887631130667228632902437183933840195380816196093162319293698836053406176957297330716990340998802156803899579713165154526610395279999</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#hint = 88154421894117450591552142051149160480833170266148800195422578353703847455418496231944089437130332162458102290491849331143073163240148813116171275432632366729218612063176137204570648617681911344674042091585091104687596255488609263266272373788618920171331355912434290259151350333219719321509782517693267379786</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#c = 476922b694c764725338cca99d99c7471ec448d6bf60de797eb7cc6e71253221035eb577075f9658ac7f1a40747778ac261787baad21ee567256872fa9400c37</span></span><br></pre></td></tr></table></figure><p>和上题一样还是需要求出r先，但是不同的地方在于这里的rbits =252，所以我们爆破四位</p><p>这里参考其它师傅的exp，感觉自己写的太烂了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">N = <span class="number">133196604547992363575584257705624404667968600447626367604523982016247386106677898877957513177151872429736948168642977575860754686097638795690422242542292618145151312000412007125887631130667228632902437183933840195380816196093162319293698836053406176957297330716990340998802156803899579713165154526610395279999</span></span><br><span class="line"></span><br><span class="line">hint = <span class="number">88154421894117450591552142051149160480833170266148800195422578353703847455418496231944089437130332162458102290491849331143073163240148813116171275432632366729218612063176137204570648617681911344674042091585091104687596255488609263266272373788618920171331355912434290259151350333219719321509782517693267379786</span></span><br><span class="line"></span><br><span class="line">rbits = <span class="number">252</span></span><br><span class="line"></span><br><span class="line">Nbits = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">R = <span class="number">2</span>^rbits</span><br><span class="line"></span><br><span class="line">high=<span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> trange(<span class="number">2</span>^high,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">  rh=r&lt;&lt;(rbits-high)</span><br><span class="line"></span><br><span class="line">  PR.&lt;x&gt; = PolynomialRing(Zmod(N))</span><br><span class="line"></span><br><span class="line">  f=hint-(rh+x)</span><br><span class="line"></span><br><span class="line">  f=f.monic()</span><br><span class="line"></span><br><span class="line">  roots=f.small_roots(X=<span class="number">2</span>^(rbits-high)-<span class="number">1</span>,beta=<span class="number">0.495</span>,epsilon=<span class="number">0.03</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> roots:</span><br><span class="line"></span><br><span class="line">    rl=roots[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(rh+rl)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到r之后解sm4即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> gmssl.sm4 <span class="keyword">import</span> CryptSM4, SM4_ENCRYPT, SM4_DECRYPT</span><br><span class="line"></span><br><span class="line">N = <span class="number">133196604547992363575584257705624404667968600447626367604523982016247386106677898877957513177151872429736948168642977575860754686097638795690422242542292618145151312000412007125887631130667228632902437183933840195380816196093162319293698836053406176957297330716990340998802156803899579713165154526610395279999</span></span><br><span class="line">hint = <span class="number">88154421894117450591552142051149160480833170266148800195422578353703847455418496231944089437130332162458102290491849331143073163240148813116171275432632366729218612063176137204570648617681911344674042091585091104687596255488609263266272373788618920171331355912434290259151350333219719321509782517693267379786</span></span><br><span class="line">c = <span class="string">&#x27;476922b694c764725338cca99d99c7471ec448d6bf60de797eb7cc6e71253221035eb577075f9658ac7f1a40747778ac261787baad21ee567256872fa9400c37&#x27;</span></span><br><span class="line">c = <span class="built_in">bytes</span>.fromhex(c)</span><br><span class="line"></span><br><span class="line">r = <span class="number">7166351305785506670352015492214713707534657162937963088592442157834795391917</span></span><br><span class="line"></span><br><span class="line">p = gmpy2.gcd(<span class="built_in">int</span>(hint - r), <span class="built_in">int</span>(N))</span><br><span class="line">q = <span class="built_in">int</span>(N)// p</span><br><span class="line">leak = p*q*r</span><br><span class="line">r_bytes = long_to_bytes(leak)</span><br><span class="line">iv = r_bytes[:<span class="number">16</span>] <span class="keyword">if</span> <span class="built_in">len</span>(r_bytes) &gt;= <span class="number">16</span> <span class="keyword">else</span> r_bytes + <span class="string">b&#x27;\0&#x27;</span>*(<span class="number">16</span>-<span class="built_in">len</span>(r_bytes))</span><br><span class="line">key = sha256(<span class="built_in">str</span>(p + q + r).encode()).digest()[:<span class="number">16</span>] </span><br><span class="line">crypt_sm4 = CryptSM4()</span><br><span class="line">crypt_sm4.set_key(key, SM4_DECRYPT)</span><br><span class="line">decrypted = crypt_sm4.crypt_cbc(iv, c)</span><br><span class="line"><span class="built_in">print</span>(decrypted)</span><br></pre></td></tr></table></figure><h1 id="three-vertical-lines">three vertical lines</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> rsa.prime <span class="keyword">import</span> getprime</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    p=getprime(<span class="number">256</span>)</span><br><span class="line">    q=getprime(<span class="number">256</span>)</span><br><span class="line">    <span class="keyword">if</span> isPrime(<span class="number">3</span>*p**<span class="number">5</span>+<span class="number">4</span>*q**<span class="number">5</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">3</span>*p**<span class="number">5</span>+<span class="number">4</span>*q**<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(bytes_to_long(flag), e, p * q))</span><br><span class="line"><span class="comment">#72063558451087451183203801132459543552092564094711815404066471440396765744526854383117910805713050240067432476705168314622044706081669935956972031037827580519320550326077291392722314265758802332280697884744792689996718961355845963752788234205565249205191648439412084543163083032775054018324646541875754706761793307667356964825613429368358849530455220484128264690354330356861777561511117</span></span><br><span class="line"><span class="comment">#2864901454060087890623075705953001126417241189889895476561381971868301515757296100356013797346138819690091860054965586977737630238293536281745826901578223</span></span><br></pre></td></tr></table></figure><p>这里从其它师傅那里学习了很多姿势</p><p>ax^n + by^n, 都可以用格解决</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> Zmod, ZZ, matrix, inverse_mod, GF</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Crypto.Util.number <span class="keyword">as</span> cun</span><br><span class="line"></span><br><span class="line">r=<span class="number">72063558451087451183203801132459543552092564094711815404066471440396765744526854383117910805713050240067432476705168314622044706081669935956972031037827580519320550326077291392722314265758802332280697884744792689996718961355845963752788234205565249205191648439412084543163083032775054018324646541875754706761793307667356964825613429368358849530455220484128264690354330356861777561511117</span></span><br><span class="line"></span><br><span class="line">ct=<span class="number">2864901454060087890623075705953001126417241189889895476561381971868301515757296100356013797346138819690091860054965586977737630238293536281745826901578223</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">R = Zmod(r)[<span class="string">&quot;x&quot;</span>]</span><br><span class="line"></span><br><span class="line">x = R.gen()</span><br><span class="line"></span><br><span class="line">f = <span class="number">3</span>*x**<span class="number">5</span> + <span class="number">4</span></span><br><span class="line"></span><br><span class="line">root = f.roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">M = matrix(ZZ, [[<span class="number">1</span>, root], [<span class="number">0</span>, r]])</span><br><span class="line"></span><br><span class="line">b, a = <span class="built_in">map</span>(<span class="built_in">abs</span>, M.LLL()[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">b, a = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> [a, b]]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;a = <span class="subst">&#123;a&#125;</span>\nb = <span class="subst">&#123;b&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;cun.isPrime(a) = &#125;</span>, <span class="subst">&#123;cun.isPrime(b) = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">phi =(a-<span class="number">1</span>)*(b-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">n = a * b </span><br><span class="line"></span><br><span class="line">d = cun.inverse(e, phi)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(ct, d, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;m = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cun.long_to_bytes((m)))</span><br></pre></td></tr></table></figure><p>还有种办法是通过数学变化来用最常见的格求</p><p>首先我们有 <spanclass="math display">3<em>p</em><sup>5</sup> + 4<em>q</em><sup>5</sup> = <em>k</em></span></p><p><span class="math display">$$p^{5}\equiv -\frac{3}{4} q^{5} \bmod k$$</span></p><p>对式子进行降幂，开五次方，令前面常数开完五次方后为t <spanclass="math display"><em>p</em> ≡ <em>t</em> * <em>q</em> mod  <em>k</em></span>现在需要求t,也就是在模k下计算<spanclass="math inline">$-\frac{3}{4}$</span>的逆元，然后找到一个t使得它的五次方等于这个值</p><p>求出t后 <spanclass="math display"><em>p</em> = <em>k</em> − <em>t</em> * <em>q</em></span>造格 <span class="math display">$$\begin{pmatrix}1 &amp;&amp; p\end{pmatrix}\begin{pmatrix}  1&amp; t\\  0&amp;k\end{pmatrix}=\begin{pmatrix}p &amp;&amp; q\end{pmatrix}$$</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">72063558451087451183203801132459543552092564094711815404066471440396765744526854383117910805713050240067432476705168314622044706081669935956972031037827580519320550326077291392722314265758802332280697884744792689996718961355845963752788234205565249205191648439412084543163083032775054018324646541875754706761793307667356964825613429368358849530455220484128264690354330356861777561511117</span></span><br><span class="line">ciphertext = <span class="number">2864901454060087890623075705953001126417241189889895476561381971868301515757296100356013797346138819690091860054965586977737630238293536281745826901578223</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 -4/3 mod n</span></span><br><span class="line"></span><br><span class="line">c = (-<span class="number">4</span>) * inverse_mod(<span class="number">3</span>, n) % n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在模n下寻找五次方根</span></span><br><span class="line"></span><br><span class="line">R = Zmod(n)</span><br><span class="line">roots = []</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    roots = R(c).nth_root(<span class="number">5</span>, <span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No fifth roots found.&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line">found = <span class="literal">False</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> roots:</span><br><span class="line">    t = <span class="built_in">int</span>(t)</span><br><span class="line">    <span class="comment"># 构造格</span></span><br><span class="line">    M = matrix(ZZ, [[<span class="number">1</span>, t], [<span class="number">0</span>, n]])</span><br><span class="line">    L = M.LLL()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查每一行向量</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> L:</span><br><span class="line">        q, p = row</span><br><span class="line">        <span class="comment"># 取绝对值处理可能的负值</span></span><br><span class="line">        q_abs = <span class="built_in">abs</span>(q)</span><br><span class="line">        p_abs = <span class="built_in">abs</span>(p)</span><br><span class="line">        <span class="keyword">if</span> q_abs == <span class="number">0</span> <span class="keyword">or</span> p_abs == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 检查是否为素数且满足方程</span></span><br><span class="line">        <span class="keyword">if</span> is_prime(q_abs) <span class="keyword">and</span> is_prime(p_abs) <span class="keyword">and</span> <span class="number">3</span>*p_abs**<span class="number">5</span> + <span class="number">4</span>*q_abs**<span class="number">5</span> == n:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Found p = <span class="subst">&#123;p_abs&#125;</span>, q = <span class="subst">&#123;q_abs&#125;</span>&quot;</span>)</span><br><span class="line">            found = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> found:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> found:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Failed to find p and q.&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line">N = p_abs * q_abs</span><br><span class="line">phi = (p_abs - <span class="number">1</span>) * (q_abs - <span class="number">1</span>)</span><br><span class="line">d = inverse_mod(e, phi)</span><br><span class="line">plaintext = <span class="built_in">pow</span>(ciphertext, d, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;flag:&quot;</span>, long_to_bytes(plaintext))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Wp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LitCTF2025</title>
      <link href="/2025/06/07/LitCTF2025/"/>
      <url>/2025/06/07/LitCTF2025/</url>
      
        <content type="html"><![CDATA[<h1 id="basic">basic</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> encimport flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">n = getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">e =<span class="number">65537</span></span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">n = 150624321883406825203208223877379141248303098639178939246561016555984711088281599451642401036059677788491845392145185508483430243280649179231349888108649766320961095732400297052274003269230704890949682836396267905946735114062399402918261536249386889450952744142006299684134049634061774475077472062182860181893</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">c = 22100249806368901850308057097325161014161983862106732664802709096245890583327581696071722502983688651296445646479399181285406901089342035005663657920475988887735917901540796773387868189853248394801754486142362158369380296905537947192318600838652772655597241004568815762683630267295160272813021037399506007505</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>这里n是素数。所以phi=n-1，然后正常解RSA即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n = <span class="number">150624321883406825203208223877379141248303098639178939246561016555984711088281599451642401036059677788491845392145185508483430243280649179231349888108649766320961095732400297052274003269230704890949682836396267905946735114062399402918261536249386889450952744142006299684134049634061774475077472062182860181893</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">22100249806368901850308057097325161014161983862106732664802709096245890583327581696071722502983688651296445646479399181285406901089342035005663657920475988887735917901540796773387868189853248394801754486142362158369380296905537947192318600838652772655597241004568815762683630267295160272813021037399506007505</span></span><br><span class="line"></span><br><span class="line">phi = n-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment">#b&#x27;LitCTF&#123;ee2c30dfe684f13a6e6c07b9ec90cc2c&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="ez_math">ez_math</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid4</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;LitCTF&#123;&#x27;</span>+ <span class="built_in">str</span>(uuid4()).encode() +<span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line">flag = bytes_to_long(flag)</span><br><span class="line">len_flag = flag.bit_length()</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">P = GF(p)</span><br><span class="line">A = [[flag,   getPrime(len_flag)],</span><br><span class="line">     [getPrime(len_flag), getPrime(len_flag)]]</span><br><span class="line">A = matrix(P, A)</span><br><span class="line">B = A ** e</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;p = <span class="subst">&#123;p&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;B = <span class="subst">&#123;<span class="built_in">list</span>(B)&#125;</span>&quot;</span>.replace(<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;[&#x27;</span>).replace(<span class="string">&#x27;)&#x27;</span>,<span class="string">&#x27;]&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># e = 65537</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p = 8147594556101158967571180945694180896742294483544853070485096002084187305007965554901340220135102394516080775084644243545680089670612459698730714507241869</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># B = [[2155477851953408309667286450183162647077775173298899672730310990871751073331268840697064969968224381692698267285466913831393859280698670494293432275120170, 4113196339199671283644050914377933292797783829068402678379946926727565560805246629977929420627263995348168282358929186302526949449679561299204123214741547], [3652128051559825585352835887172797117251184204957364197630337114276860638429451378581133662832585442502338145987792778148110514594776496633267082169998598, 2475627430652911131017666156879485088601207383028954405788583206976605890994185119936790889665919339591067412273564551745588770370229650653217822472440992]]</span></span><br></pre></td></tr></table></figure><p>分析加密等式 <spanclass="math display"><em>B</em> = <em>A</em><sup><em>e</em></sup> mod  <em>p</em></span>本质上同解RSA相同，无非是在矩阵下计算模意义下的幂</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">8147594556101158967571180945694180896742294483544853070485096002084187305007965554901340220135102394516080775084644243545680089670612459698730714507241869</span></span><br><span class="line"></span><br><span class="line">B = [[<span class="number">2155477851953408309667286450183162647077775173298899672730310990871751073331268840697064969968224381692698267285466913831393859280698670494293432275120170</span>, <span class="number">4113196339199671283644050914377933292797783829068402678379946926727565560805246629977929420627263995348168282358929186302526949449679561299204123214741547</span>], [<span class="number">3652128051559825585352835887172797117251184204957364197630337114276860638429451378581133662832585442502338145987792778148110514594776496633267082169998598</span>, <span class="number">2475627430652911131017666156879485088601207383028954405788583206976605890994185119936790889665919339591067412273564551745588770370229650653217822472440992</span>]]</span><br><span class="line"></span><br><span class="line">P = GF(p)</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e,p-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">A = matrix(P, B)**d</span><br><span class="line"></span><br><span class="line">m=<span class="built_in">int</span>(A[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment">#b&#x27;LitCTF&#123;13dd217e-9a67-4093-8a1b-d2592c45ba82&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="math">math</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> enc <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">e =<span class="number">65537</span></span><br><span class="line"></span><br><span class="line">p,q = getPrime(<span class="number">1024</span>),getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">noise = getPrime(<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">tmp1 = noise*p+noise*q</span><br><span class="line"></span><br><span class="line">tmp2 = noise*noise</span><br><span class="line"></span><br><span class="line">hint = p*q+tmp1+tmp2</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;hint = <span class="subst">&#123;hint&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">n = 17532490684844499573962335739488728447047570856216948961588440767955512955473651897333925229174151614695264324340730480776786566348862857891246670588649327068340567882240999607182345833441113636475093894425780004013793034622954182148283517822177334733794951622433597634369648913113258689335969565066224724927142875488372745811265526082952677738164529563954987228906850399133238995317510054164641775620492640261304545177255239344267408541100183257566363663184114386155791750269054370153318333985294770328952530538998873255288249682710758780563400912097941615526239960620378046855974566511497666396320752739097426013141</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">c = 1443781085228809103260687286964643829663045712724558803386592638665188285978095387180863161962724216167963654290035919557593637853286347618612161170407578261345832596144085802169614820425769327958192208423842665197938979924635782828703591528369967294598450115818251812197323674041438116930949452107918727347915177319686431081596379288639254670818653338903424232605790442382455868513646425376462921686391652158186913416425784854067607352211587156772930311563002832095834548323381414409747899386887578746299577314595641345032692386684834362470575165392266454078129135668153486829723593489194729482511596288603515252196</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">hint = 17532490684844499573962335739488728447047570856216948961588440767955512955473651897333925229174151614695264324340730480776786566348862857891246670588649327068340567882240999607182345833441113636475093894425780004013793034622954182148283517822177334733794951622433597634369648913113258689335969565315879035806034866363781260326863226820493638303543900551786806420978685834963920605455531498816171226961859405498825422799670404315599803610007692517859020686506546933013150302023167306580068646104886750772590407299332549746317286972954245335810093049085813683948329319499796034424103981702702886662008367017860043529164</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>先看到加密等式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tmp1 = noise*p+noise*q</span><br><span class="line"></span><br><span class="line">tmp2 = noise*noise</span><br><span class="line"></span><br><span class="line">hint = p*q+tmp1+tmp2</span><br></pre></td></tr></table></figure><p>这里我们化简，即 <spanclass="math display"><em>h</em><em>i</em><em>n</em><em>t</em> − <em>n</em> = <em>n</em><em>o</em><em>i</em><em>s</em><em>e</em>(<em>n</em><em>o</em><em>i</em><em>s</em><em>e</em> + (<em>p</em> + <em>q</em>))</span>我们尝试对hint-n进行因式分解</p><figure><imgsrc="C:\Users\ROG\AppData\Roaming\Typora\typora-user-images\image-20250605131646224.png"alt="image-20250605131646224" /><figcaption aria-hidden="true">image-20250605131646224</figcaption></figure><p>再看到题目给的条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">noise = getPrime(40)</span><br></pre></td></tr></table></figure><p>那么满足的就是942430120937</p><p>令<spanclass="math inline"><em>h</em><em>i</em><em>n</em><em>t</em> − <em>n</em> = <em>t</em><em>m</em><em>p</em></span>现在我们知道的条件就是<spanclass="math display"><em>p</em> + <em>q</em> = <em>t</em><em>m</em><em>p</em>//<em>n</em><em>o</em><em>i</em><em>s</em><em>e</em> − <em>n</em><em>o</em><em>i</em><em>s</em><em>e</em></span></p><p><spanclass="math display"><em>p</em> * <em>q</em> = <em>n</em></span></p><p>剩下的就是解方程求出p,q即可求解m</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">tmp=<span class="number">249654310878891990875408514515597700737540960565379370987831819192071835435830681610138021444651529451341366765237520877622415164971332395068907509260292657023322432546857358551754112936426750312119591980443637876760333676491029037290243486555246692136987872068422089358879417987568129415191205220265687614278762617516023</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">17532490684844499573962335739488728447047570856216948961588440767955512955473651897333925229174151614695264324340730480776786566348862857891246670588649327068340567882240999607182345833441113636475093894425780004013793034622954182148283517822177334733794951622433597634369648913113258689335969565066224724927142875488372745811265526082952677738164529563954987228906850399133238995317510054164641775620492640261304545177255239344267408541100183257566363663184114386155791750269054370153318333985294770328952530538998873255288249682710758780563400912097941615526239960620378046855974566511497666396320752739097426013141</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">1443781085228809103260687286964643829663045712724558803386592638665188285978095387180863161962724216167963654290035919557593637853286347618612161170407578261345832596144085802169614820425769327958192208423842665197938979924635782828703591528369967294598450115818251812197323674041438116930949452107918727347915177319686431081596379288639254670818653338903424232605790442382455868513646425376462921686391652158186913416425784854067607352211587156772930311563002832095834548323381414409747899386887578746299577314595641345032692386684834362470575165392266454078129135668153486829723593489194729482511596288603515252196</span></span><br><span class="line"></span><br><span class="line">noise = <span class="number">942430120937</span></span><br><span class="line"></span><br><span class="line">b = tmp // noise - noise</span><br><span class="line"></span><br><span class="line">x,y = var(<span class="string">&quot;x y&quot;</span>)</span><br><span class="line"></span><br><span class="line">eq1 = Eq(x+y,b)</span><br><span class="line"></span><br><span class="line">eq2 = Eq(x*y,n)</span><br><span class="line"></span><br><span class="line">solutions = solve([eq1,eq2],[x,y])</span><br><span class="line"></span><br><span class="line">p = <span class="built_in">int</span>(solutions[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">q = <span class="built_in">int</span>(solutions[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line"></span><br><span class="line">m=<span class="built_in">pow</span>(c,d,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment">#b&#x27;LitCTF&#123;db6f52b9265971910b306754b9df8b76&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="baby">baby</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> enc <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">g = getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">t = getPrime(<span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">data = (t * gmpy2.invert(m, g)) % g</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;g = <span class="subst">&#123;g&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;data = <span class="subst">&#123;data&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">g = 7835965640896798834809247993719156202474265737048568647376673642017466116106914666363462292416077666356578469725971587858259708356557157689066968453881547</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">data = 2966297990428234518470018601566644093790837230283136733660201036837070852272380968379055636436886428180671888655884680666354402224746495312632530221228498</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>看到题目中给出的线性关系 <spanclass="math display"><em>d</em><em>a</em><em>t</em><em>a</em> = <em>t</em> * <em>m</em><sup>−1</sup> mod  <em>g</em></span>移项 <spanclass="math display"><em>d</em><em>a</em><em>t</em><em>a</em> * <em>m</em> = <em>t</em> + <em>k</em><em>g</em></span></p><p><spanclass="math display"><em>t</em> = <em>d</em><em>a</em><em>t</em><em>a</em> * <em>m</em> − <em>k</em><em>g</em></span></p><p>构造格 <span class="math display">$$\begin{pmatrix}m,k\end{pmatrix}\begin{pmatrix}1 &amp; c\\0 &amp;g\end{pmatrix}=\begin{pmatrix}m,t\end{pmatrix}$$</span> 然后直接LLL规约</p><p>但是我们发现被卡界了，所以调整一下参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">g = <span class="number">7835965640896798834809247993719156202474265737048568647376673642017466116106914666363462292416077666356578469725971587858259708356557157689066968453881547</span></span><br><span class="line"></span><br><span class="line">data = <span class="number">2966297990428234518470018601566644093790837230283136733660201036837070852272380968379055636436886428180671888655884680666354402224746495312632530221228498</span></span><br><span class="line"></span><br><span class="line">T = <span class="number">2</span>**<span class="number">150</span></span><br><span class="line"></span><br><span class="line">M = Matrix(ZZ,[[<span class="number">1</span>,T*data],</span><br><span class="line"></span><br><span class="line">        [<span class="number">0</span>,T*g]])</span><br><span class="line"></span><br><span class="line">L = M.LLL()</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">abs</span>(<span class="built_in">int</span>(L[<span class="number">0</span>][<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#b&#x27;LitCTF&#123;56008a819331c9f3608a718327b7e6ce&#125;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="leak">leak</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> enc <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">p,q,e = getPrime(<span class="number">1024</span>),getPrime(<span class="number">1024</span>),getPrime(<span class="number">101</span>)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">temp = gmpy2.invert(e,p-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line">hint = temp&gt;&gt;<span class="number">180</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;hint = <span class="subst">&#123;hint&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">e = 1915595112993511209389477484497</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">n = 12058282950596489853905564906853910576358068658769384729579819801721022283769030646360180235232443948894906791062870193314816321865741998147649422414431603039299616924238070704766273248012723702232534461910351418959616424998310622248291946154911467931964165973880496792299684212854214808779137819098357856373383337861864983040851365040402759759347175336660743115085194245075677724908400670513472707204162448675189436121439485901172477676082718531655089758822272217352755724670977397896215535981617949681898003148122723643223872440304852939317937912373577272644460885574430666002498233608150431820264832747326321450951</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">c = 5408361909232088411927098437148101161537011991636129516591281515719880372902772811801912955227544956928232819204513431590526561344301881618680646725398384396780493500649993257687034790300731922993696656726802653808160527651979428360536351980573727547243033796256983447267916371027899350378727589926205722216229710593828255704443872984334145124355391164297338618851078271620401852146006797653957299047860900048265940437555113706268887718422744645438627302494160620008862694047022773311552492738928266138774813855752781598514642890074854185464896060598268009621985230517465300289580941739719020511078726263797913582399</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">hint = 10818795142327948869191775315599184514916408553660572070587057895748317442312635789407391509205135808872509326739583930473478654752295542349813847128992385262182771143444612586369461112374487380427668276692719788567075889405245844775441364204657098142930</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>其实这里就是dp泄露，在SRCTF2024中有原题当时还是学长去帮忙出的</p><p>这里因为e很大所以需要用到二元cooper</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line"></span><br><span class="line">    d = f.degree()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line">  R = f.base_ring()</span><br><span class="line"></span><br><span class="line">  N = R.cardinality()</span><br><span class="line"></span><br><span class="line">  f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">  G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">    base = N ^ (m - i) * f ^ i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line"></span><br><span class="line">      g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line"></span><br><span class="line">      G.append(g)</span><br><span class="line"></span><br><span class="line">  B, monomials = G.coefficient_matrix()</span><br><span class="line"></span><br><span class="line">  monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">  factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line"></span><br><span class="line">    B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">  B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">  B = B.change_ring(QQ)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line"></span><br><span class="line">    B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line"></span><br><span class="line">  H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line"></span><br><span class="line">    H.append(h)</span><br><span class="line"></span><br><span class="line">    I = H.ideal()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">      H.pop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">      roots = []</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line"></span><br><span class="line">        root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line"></span><br><span class="line">        roots.append(root)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> roots</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">e = <span class="number">1915595112993511209389477484497</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">12058282950596489853905564906853910576358068658769384729579819801721022283769030646360180235232443948894906791062870193314816321865741998147649422414431603039299616924238070704766273248012723702232534461910351418959616424998310622248291946154911467931964165973880496792299684212854214808779137819098357856373383337861864983040851365040402759759347175336660743115085194245075677724908400670513472707204162448675189436121439485901172477676082718531655089758822272217352755724670977397896215535981617949681898003148122723643223872440304852939317937912373577272644460885574430666002498233608150431820264832747326321450951</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">5408361909232088411927098437148101161537011991636129516591281515719880372902772811801912955227544956928232819204513431590526561344301881618680646725398384396780493500649993257687034790300731922993696656726802653808160527651979428360536351980573727547243033796256983447267916371027899350378727589926205722216229710593828255704443872984334145124355391164297338618851078271620401852146006797653957299047860900048265940437555113706268887718422744645438627302494160620008862694047022773311552492738928266138774813855752781598514642890074854185464896060598268009621985230517465300289580941739719020511078726263797913582399</span></span><br><span class="line"></span><br><span class="line">leak = <span class="number">10818795142327948869191775315599184514916408553660572070587057895748317442312635789407391509205135808872509326739583930473478654752295542349813847128992385262182771143444612586369461112374487380427668276692719788567075889405245844775441364204657098142930</span></span><br><span class="line"></span><br><span class="line">leak &lt;&lt;= <span class="number">180</span></span><br><span class="line"></span><br><span class="line">R.&lt;x,y&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"></span><br><span class="line">f = e * (leak + x) + (y - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">res = small_roots(f,(<span class="number">2</span>^<span class="number">180</span>,<span class="number">2</span>^<span class="number">101</span>),m=<span class="number">2</span>,d=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root <span class="keyword">in</span> res:</span><br><span class="line"></span><br><span class="line">  dp_low = root[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">  dp = leak + dp_low</span><br><span class="line"></span><br><span class="line">  tmp = <span class="built_in">pow</span>(<span class="number">2</span>,e*dp,n) - <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  p = gmpy2.gcd(tmp,n)</span><br><span class="line"></span><br><span class="line">  q = n // p</span><br><span class="line"></span><br><span class="line">  d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">  m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment">#b&#x27;LitCTF&#123;03ecda15d1a89b06454c6050c1bd489f&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="new_bag">new_bag</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_flag</span>(<span class="params">length</span>):</span><br><span class="line"></span><br><span class="line">  characters = string.ascii_letters + string.digits + <span class="string">&#x27;_&#x27;</span></span><br><span class="line"></span><br><span class="line">  flag = <span class="string">&#x27;LitCTF&#123;&#x27;</span> + <span class="string">&#x27;&#x27;</span>.join(random.choice(characters) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length)) + <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> flag.encode()</span><br><span class="line"></span><br><span class="line">flag = get_flag(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">bin</span>(bytes_to_long(flag))[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">pubkey = [getPrime(<span class="number">128</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag))]</span><br><span class="line"></span><br><span class="line">enc = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line"></span><br><span class="line">  enc += pubkey[i] * <span class="built_in">int</span>(flag[i])</span><br><span class="line"></span><br><span class="line">  enc %= p</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line">f.write(<span class="string">f&quot;p = <span class="subst">&#123;p&#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">f.write(<span class="string">f&quot;pubkey = <span class="subst">&#123;pubkey&#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">f.write(<span class="string">f&quot;enc = <span class="subst">&#123;enc&#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的背包密度太大无法做到直接规约 <span class="math display">$$d=\frac{\operatorname{len}(M)}{\log _{2}\left(\max\left(M_{i}\right)\right)}&lt;0.9408$$</span> 只有当密度满足上述条件是我们才能规约出来</p><p>但是现在我们有的条件是 <span class="math display">$$d=\frac{127}{128} \approx 0.9922&gt; 0.9408$$</span> 但是我们知道flag头是b’LitCTF{’和最后的b’}‘</p><p>这样就满足条件可以构造格了 <span class="math display">$$\left(\begin{array}{lllll}b_{0} &amp; b_{1} &amp; \ldots &amp; 1 &amp; k\end{array}\right)\left(\begin{array}{ccccc}1 &amp; &amp; &amp; &amp; \begin{array}{c}\text { pubkey }_{0} \\\text { pubkey }_{1}\end{array} \\&amp; 1 &amp; &amp; &amp; \\&amp; &amp; 1 &amp; &amp; \vdots \\&amp; &amp; &amp; 1 &amp; \text { enc } \\&amp; &amp; &amp; &amp; p\end{array}\right)\left(\begin{array}{lllll}b_{0} &amp; b_{1} &amp; \ldots &amp; \text { enc } &amp; 0\end{array}\right)$$</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">sage10<span class="number">.6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">173537234562263850990112795836487093439</span></span><br><span class="line">pubkey = [<span class="number">184316235755254907483728080281053515467</span>, <span class="number">301753295242660201987730522100674059399</span>, <span class="number">214746865948159247109907445342727086153</span>, <span class="number">190710765981032078577562674498245824397</span>, <span class="number">331594659178887289573546882792969306963</span>, <span class="number">325241251857446530306000904015122540537</span>, <span class="number">183138087354043440402018216471847480597</span>, <span class="number">184024660891182404534278014517267677121</span>, <span class="number">221852419056451630727726571924370029193</span>, <span class="number">252122782233143392994310666727549089119</span>, <span class="number">175886223097788623718858806338121455451</span>, <span class="number">275410728642596840638045777234465661687</span>, <span class="number">251664694235514793799312335012668142813</span>, <span class="number">218645272462591891220065928162159215543</span>, <span class="number">312223630454310643034351163568776055567</span>, <span class="number">246969281206041998865813427647656760287</span>, <span class="number">314861458279166374375088099707870061461</span>, <span class="number">264293021895772608566300156292334238719</span>, <span class="number">300802209357110221724717494354120213867</span>, <span class="number">293825386566202476683406032420716750733</span>, <span class="number">280164880535680245461599240490036536891</span>, <span class="number">223138633045675121340315815489781884671</span>, <span class="number">194958151408670059556476901479795911187</span>, <span class="number">180523100489259027750075460231138785329</span>, <span class="number">180425435626797251881104654861163883059</span>, <span class="number">313871202884226454316190668965524324023</span>, <span class="number">184833541398593696671625353250714719537</span>, <span class="number">217497008601504809464374671355532403921</span>, <span class="number">246589067140439936215888566305171004301</span>, <span class="number">289015788017956436490096615142465503023</span>, <span class="number">301775305365100149653555500258867275677</span>, <span class="number">185893637147914858767269807046039030871</span>, <span class="number">319328260264390422708186053639594729851</span>, <span class="number">196198701308135383224057395173059054757</span>, <span class="number">231185775704496628532348037721799493511</span>, <span class="number">243973313872552840389840048418558528537</span>, <span class="number">213140279661565397451805047456032832611</span>, <span class="number">310386296949148370235845491986451639013</span>, <span class="number">228492979916155878048849684460007011451</span>, <span class="number">240557187581619139147592264130657066299</span>, <span class="number">187388364905654342761169670127101032713</span>, <span class="number">305292765113810142043496345097024570233</span>, <span class="number">303823809595161213886303993298011013599</span>, <span class="number">227663140954563126349665813092551336597</span>, <span class="number">257833881948992845466919654910838972461</span>, <span class="number">291249161813309696736659661907363469657</span>, <span class="number">228470133121759300620143703381920625589</span>, <span class="number">337912208888617180835513160742872043511</span>, <span class="number">252639095930536359128379880984347614689</span>, <span class="number">306613178720695137374121633131944714277</span>, <span class="number">328627523443531702430603855075960220403</span>, <span class="number">283995291614222889691668376952473718279</span>, <span class="number">185992200035693404743830210660606140043</span>, <span class="number">175575945935802771832062328390060568381</span>, <span class="number">239709736751531517044198331233711541211</span>, <span class="number">325191992201185112802734343474281930993</span>, <span class="number">285825734319916654888050222626163129503</span>, <span class="number">260820892372814862728958615462018022903</span>, <span class="number">271109638409686342632742230596810197399</span>, <span class="number">195432366301516284662210689868561107229</span>, <span class="number">252351678712166898804432075801905414141</span>, <span class="number">175869608753229067314866329908981554323</span>, <span class="number">212291732707466211705141589249474157597</span>, <span class="number">299891357045144243959903067354676661051</span>, <span class="number">271237385422923460052644584552894282763</span>, <span class="number">268702576849722796315440463412052409241</span>, <span class="number">198273535005705777854651218089804228523</span>, <span class="number">177684355989910045168511400849036259973</span>, <span class="number">189237944200991357454773904466163557789</span>, <span class="number">175427967765368330787115337317676160499</span>, <span class="number">270446056495616077936737430232108222303</span>, <span class="number">243318639972702711024520926308402316247</span>, <span class="number">223872107662231922057872197123261908053</span>, <span class="number">268995355861070998347238198063073079851</span>, <span class="number">244478236168888494353493404999149985963</span>, <span class="number">230731375083676409248450208772518041369</span>, <span class="number">231630208287176700035265642824425872113</span>, <span class="number">187649298194887119502654724235771449423</span>, <span class="number">264924369987111619306245625770849264491</span>, <span class="number">327092811483332202721992798797117253283</span>, <span class="number">274967838920225995524024619709213673571</span>, <span class="number">313836314009366857157961838519499192671</span>, <span class="number">181860768653760352435352944732117309357</span>, <span class="number">184011200837375425882494435177626368109</span>, <span class="number">246455975565763627776562816894916143559</span>, <span class="number">262208917125258935991543552004318662109</span>, <span class="number">334006940602786701813813048552124976177</span>, <span class="number">241119397420390120456580389194328607351</span>, <span class="number">255370083166310325724283692646412327547</span>, <span class="number">280056982387584554076672702548437488901</span>, <span class="number">190822826881447578202544631446213911541</span>, <span class="number">206119293866065537243159766877834200177</span>, <span class="number">289535246575130471484249052043282790337</span>, <span class="number">222004375767927951747133364917437739627</span>, <span class="number">186041951615746748538744491355290007923</span>, <span class="number">299120276948597373232905692530626175519</span>, <span class="number">268645812049699572580085139845553457511</span>, <span class="number">231990902203442306941381714523426756489</span>, <span class="number">259677531562170067444672097354970172129</span>, <span class="number">232573792063456357545735601063504090387</span>, <span class="number">268451806037215206985127877726665463011</span>, <span class="number">324266632324016349795115268035757999593</span>, <span class="number">323952615081869295386415078624753400501</span>, <span class="number">302316593553669781596237136546083536339</span>, <span class="number">235576231941572491681115931798290883659</span>, <span class="number">202271277470197960243533508432663735031</span>, <span class="number">172391954991101354275650988921310984563</span>, <span class="number">215333185856183701105529790905068832303</span>, <span class="number">335916893044781805453250006520700519353</span>, <span class="number">217268288923298532517983372665872329797</span>, <span class="number">265455575922780577837866687874732212733</span>, <span class="number">182194442259001995170676842797322170297</span>, <span class="number">180222796978664332193987060700843734759</span>, <span class="number">332629077640484670095070754759241249101</span>, <span class="number">238815683708676274248277883404136375767</span>, <span class="number">246167709707533867216616011486975023679</span>, <span class="number">188375282015595301232040104228085154549</span>, <span class="number">230675799347049231846866057019582889423</span>, <span class="number">290911573230654740468234181613682439691</span>, <span class="number">173178956820933028868714760884278201561</span>, <span class="number">340087079300305236498945763514358009773</span>, <span class="number">215775253913162994758086261347636015049</span>, <span class="number">286306008278685809877266756697807931889</span>, <span class="number">175231652202310718229276393280541484041</span>, <span class="number">230887015177563361309867021497576716609</span>, <span class="number">306478031708687513424095160106047572447</span>, <span class="number">172289054804425429042492673052057816187</span>]</span><br><span class="line">enc = <span class="number">82516114905258351634653446232397085739</span></span><br><span class="line"></span><br><span class="line">known = <span class="string">b&#x27;LitCTF&#123;&#x27;</span> + <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">8</span> + <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line">bin_known = <span class="built_in">bin</span>(bytes_to_long(known))[<span class="number">2</span>:]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(bin_known)):</span><br><span class="line">    enc -= pubkey[i] * <span class="built_in">int</span>(bin_known[i])</span><br><span class="line">    enc %= p</span><br><span class="line"></span><br><span class="line">new_pubkey = pubkey[-<span class="number">72</span>:-<span class="number">8</span>]</span><br><span class="line">n = <span class="built_in">len</span>(new_pubkey)</span><br><span class="line">d = n / log(<span class="built_in">max</span>(new_pubkey), <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(CDF(d))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> trange(<span class="number">256</span>):</span><br><span class="line">    S = enc + k*p</span><br><span class="line">    L = Matrix(ZZ,n+<span class="number">1</span>,n+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        L[i,i] = <span class="number">2</span></span><br><span class="line">        L[-<span class="number">1</span>,i] = <span class="number">1</span></span><br><span class="line">        L[i,-<span class="number">1</span>] = new_pubkey[i]</span><br><span class="line">    L[-<span class="number">1</span>,-<span class="number">1</span>] = S</span><br><span class="line">    L[:,-<span class="number">1</span>] *= <span class="number">2</span>^<span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> L.LLL():</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">set</span>(line[:-<span class="number">1</span>]).issubset(&#123;-<span class="number">1</span>,<span class="number">1</span>&#125;):</span><br><span class="line">        m = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> line[:-<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">                m += <span class="string">&#x27;0&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                m += <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        flag = <span class="string">b&#x27;LitCTF&#123;&#x27;</span> + long_to_bytes(<span class="built_in">int</span>(m,<span class="number">2</span>)) + <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># LitCTF&#123;Am3xItsT&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Wp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>比赛杂记</title>
      <link href="/2025/05/25/%E6%AF%94%E8%B5%9B%E6%9D%82%E8%AE%B0/"/>
      <url>/2025/05/25/%E6%AF%94%E8%B5%9B%E6%9D%82%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>把最近打的几个比赛记录在一起</p><h1 id="黄河流域技能挑战赛2025">黄河流域技能挑战赛2025</h1><h2 id="因式分解">因式分解</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,a,b,c</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">256</span>)</span><br><span class="line"></span><br><span class="line">q = getPrime(<span class="number">256</span>)</span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">_q = <span class="built_in">int</span>(<span class="built_in">bin</span>(q)[<span class="number">2</span>:][::-<span class="number">1</span>] , <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">n = 7688109450918412752403544831281002390909833419780604228031807748258766149305710928557842935597759373483911172486806200079137977020089610947423466744079981</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">c = 6470273779347221033316093386019083111753019159457126878637258794718443144439812725263309232245307744208957171971247518708231996986359926490571921925899978</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> a**<span class="number">3</span>+b**<span class="number">3</span>+c**<span class="number">3</span> == <span class="number">3</span>*a*b*c</span><br><span class="line"></span><br><span class="line">gift = secert**<span class="number">3</span> - <span class="number">9</span>*secert + <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(gift)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="number">3</span>*(p ^ _q) == a + b + c</span><br><span class="line"></span><br><span class="line">\<span class="comment">#16174454302590604301534105361719250538317088773024913985896374029052621214070408075926265229111851489902642328975085914458074453963086159246933939207642987161923181946601656883349077418380372857072224674380642689142603970810010050</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> hint</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> encrypt</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">dicts = string.ascii_lowercase +<span class="string">&quot;&#123;=&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">key = (<span class="string">&#x27;&#x27;</span>.join([random.choice(dicts) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)])) * <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(hint) == <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(key) == <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">cipher = encrypt(hint, key)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cipher)</span><br><span class="line"></span><br><span class="line">\<span class="comment"># cp=wmaunapgimjfpopeblvup=aywqygb</span></span><br></pre></td></tr></table></figure><p>首先题目给了两个附件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_q = int(bin(q)[2:][::-1] , 2)</span><br></pre></td></tr></table></figure><p>这里可以看到题目给我们的是q的二进制逆序值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3*(p ^ _q) == a + b + c</span><br></pre></td></tr></table></figure><p>在看到这一步，如果我们知道p^_q的值我们就可以通过剪枝来求到flag了，那么接下来就是要求a+b+c的值</p><p>这里先说我自己的解法（感觉算非预期XD）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gift = secert**3 - 9*secert + 8</span><br></pre></td></tr></table></figure><p>我们知道gift的值，那么就可以求出secret的大小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal, getcontext</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_secret</span>(<span class="params">gift</span>):</span><br><span class="line"></span><br><span class="line">  getcontext().prec = <span class="number">100</span>  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  d_gift = Decimal(gift)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  secret_approx = d_gift ** (Decimal(<span class="number">1</span>)/Decimal(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  secret = <span class="built_in">round</span>(secret_approx)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  calculated_gift = secret**<span class="number">3</span> - <span class="number">9</span>*secret + <span class="number">8</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> calculated_gift == gift:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> secret</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> delta <span class="keyword">in</span> [-<span class="number">1</span>, <span class="number">1</span>, -<span class="number">2</span>, <span class="number">2</span>, -<span class="number">3</span>, <span class="number">3</span>]:</span><br><span class="line"></span><br><span class="line">      test_secret = secret + delta</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> test_secret**<span class="number">3</span> - <span class="number">9</span>*test_secret + <span class="number">8</span> == gift:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> test_secret</span><br><span class="line"></span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;Exact integer solution not found&quot;</span>)</span><br><span class="line"></span><br><span class="line">gift = <span class="number">16174454302590604301534105361719250538317088773024913985896374029052621214070408075926265229111851489902642328975085914458074453963086159246933939207642987161923181946601656883349077418380372857072224674380642689142603970810010050</span></span><br><span class="line"></span><br><span class="line">secret = find_secret(gift)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;secret&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment">#25289672915296952421286820568694528489788342353673740247988495109991492893326</span></span><br></pre></td></tr></table></figure><p>这里的secret是254bit与p^_q的数量级接近，所以我当时猜测两者相同，然后直接剪枝</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.setrecursionlimit(<span class="number">1500</span>)</span><br><span class="line"></span><br><span class="line">pxorq = <span class="number">25289672915296952421286820568694528489788342353673740247988495109991492893326</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">7688109450918412752403544831281002390909833419780604228031807748258766149305710928557842935597759373483911172486806200079137977020089610947423466744079981</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">6470273779347221033316093386019083111753019159457126878637258794718443144439812725263309232245307744208957171971247518708231996986359926490571921925899978</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">pxorq = <span class="built_in">str</span>(<span class="built_in">bin</span>(pxorq)[<span class="number">2</span>:]).zfill(<span class="number">256</span>)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">ph,qh,pl,ql</span>):</span><br><span class="line"></span><br><span class="line">  l = <span class="built_in">len</span>(ph)</span><br><span class="line"></span><br><span class="line">  tmp0 = ph + (<span class="number">256</span>-<span class="number">2</span>*l)*<span class="string">&quot;0&quot;</span> + pl</span><br><span class="line"></span><br><span class="line">  tmp1 = ph + (<span class="number">256</span>-<span class="number">2</span>*l)*<span class="string">&quot;1&quot;</span> + pl</span><br><span class="line"></span><br><span class="line">  tmq0 = qh + (<span class="number">256</span>-<span class="number">2</span>*l)*<span class="string">&quot;0&quot;</span> + ql</span><br><span class="line"></span><br><span class="line">  tmq1 = qh + (<span class="number">256</span>-<span class="number">2</span>*l)*<span class="string">&quot;1&quot;</span> + ql</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">int</span>(tmp0,<span class="number">2</span>)*<span class="built_in">int</span>(tmq0,<span class="number">2</span>) &gt; n):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">int</span>(tmp1,<span class="number">2</span>)*<span class="built_in">int</span>(tmq1,<span class="number">2</span>) &lt; n):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">int</span>(pl,<span class="number">2</span>)*<span class="built_in">int</span>(ql,<span class="number">2</span>) % (<span class="number">2</span>**(l-<span class="number">1</span>)) != n % (<span class="number">2</span>**(l-<span class="number">1</span>))):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(l == <span class="number">128</span>):</span><br><span class="line"></span><br><span class="line">    pp0 = <span class="built_in">int</span>(tmp0,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(n % pp0 == <span class="number">0</span>):</span><br><span class="line"></span><br><span class="line">      pf = pp0</span><br><span class="line"></span><br><span class="line">      qf = n//pp0</span><br><span class="line"></span><br><span class="line">      phi = (pf-<span class="number">1</span>)*(qf-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">      d = inverse(e,phi)</span><br><span class="line"></span><br><span class="line">      m1 = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"></span><br><span class="line">      <span class="built_in">print</span>(long_to_bytes(m1))</span><br><span class="line"></span><br><span class="line">      exit()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pxorq[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span>-l] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line"></span><br><span class="line">      find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line"></span><br><span class="line">      find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line"></span><br><span class="line">      find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line"></span><br><span class="line">      find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span>(pxorq[l] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span>-l] == <span class="string">&quot;0&quot;</span>):</span><br><span class="line"></span><br><span class="line">      find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line"></span><br><span class="line">      find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line"></span><br><span class="line">      find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line"></span><br><span class="line">      find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span>(pxorq[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span>-l] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line"></span><br><span class="line">      find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line"></span><br><span class="line">      find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line"></span><br><span class="line">      find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line"></span><br><span class="line">      find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span>(pxorq[l] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> pxorq[<span class="number">255</span>-l] == <span class="string">&quot;0&quot;</span>):</span><br><span class="line"></span><br><span class="line">      find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line"></span><br><span class="line">      find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;0&quot;</span>,<span class="string">&quot;0&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line"></span><br><span class="line">      find(ph+<span class="string">&quot;0&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;0&quot;</span>+ql)</span><br><span class="line"></span><br><span class="line">      find(ph+<span class="string">&quot;1&quot;</span>,qh+<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>+pl,<span class="string">&quot;1&quot;</span>+ql)</span><br><span class="line"></span><br><span class="line">find(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="comment">#flag&#123;80a59062-9bbf-99a3-6af0-a24e94032163&#125;</span></span><br></pre></td></tr></table></figure><p>预期的解法肯定是要我们求出hint先</p><p>我们可以先通过爆破四字节key+猜测一下’secret’在字符串中进行判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"></span><br><span class="line">dicts = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&#123;=&#125;&quot;</span></span><br><span class="line">cipher = <span class="string">&quot;cp=wmaunapgimjfpopeblvup=aywqygb&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> product(dicts, repeat=<span class="number">4</span>):</span><br><span class="line">    key = <span class="string">&#x27;&#x27;</span>.join(key) * <span class="number">8</span></span><br><span class="line">    plain = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line">        c = dicts.index(cipher[i])</span><br><span class="line">        k = dicts.index(key[i])</span><br><span class="line">        p = (c - k) % <span class="number">29</span></span><br><span class="line">        plain += dicts[p]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;secret&quot;</span> <span class="keyword">in</span> plain:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Key:&quot;</span>, key[:<span class="number">4</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Plaintext:&quot;</span>, plain)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tellasecret&#123;a=secert&#125;keepsilentt</span></span><br></pre></td></tr></table></figure><p>这里我们知道a=secert，这里的a可以通过上述的方法求出，那么我们还要求出b，c</p><p>我们先移项 <spanclass="math display"><em>a</em><sup>3</sup> + <em>b</em><sup>3</sup> + <em>c</em><sup>3</sup> − 3<em>a</em><em>b</em><em>c</em> = 0</span>那么就有 <spanclass="math display"><em>a</em><sup>3</sup> + <em>b</em><sup>3</sup> + <em>c</em><sup>3</sup> − 3<em>a</em><em>b</em><em>c</em> = (<em>a</em> + <em>b</em> + <em>c</em>)(<em>a</em><sup>2</sup> + <em>b</em><sup>2</sup> + <em>c</em><sup>2</sup> − <em>a</em><em>b</em> − <em>b</em><em>c</em> − <em>c</em><em>a</em>) = 0</span>这里<spanclass="math inline"><em>a</em> + <em>b</em> + <em>c</em></span>显然是不可能为0的，那么只有<spanclass="math inline">(<em>a</em><sup>2</sup> + <em>b</em><sup>2</sup> + <em>c</em><sup>2</sup> − <em>a</em><em>b</em> − <em>b</em><em>c</em> − <em>c</em><em>a</em>)</span>为0</p><p>这里不难想到利用平方差公，将上式乘2，即 <spanclass="math display">(2<em>a</em><sup>2</sup> + 2<em>b</em><sup>2</sup> + 2<em>c</em><sup>2</sup> − 2<em>a</em><em>b</em> − 2<em>b</em><em>c</em> − 2<em>c</em><em>a</em>) = 0</span></p><p><spanclass="math display">(<em>a</em> − <em>b</em>)<sup>2</sup> + (<em>b</em> − <em>c</em>)<sup>2</sup> + (<em>c</em> − <em>a</em>)<sup>2</sup> = 0</span></p><p>到这里b,c也就求出了，只有当a=b=c的时候等式成立</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3*(p ^ _q) == a + b + c</span><br></pre></td></tr></table></figure><p>那么这里的p^_q可解</p><h2 id="sandwitch">sandwitch</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;flag&#123;fake_flag&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">39</span></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x3</span></span><br><span class="line"></span><br><span class="line">pad1 = <span class="string">b&#x27;easy_problem&#x27;</span></span><br><span class="line"></span><br><span class="line">pad2 = <span class="string">b&#x27;How_to_solve_it&#x27;</span></span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(bytes_to_long(pad1 + flag + pad2),e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">n = 130210658110511504736422597261591182174531847806532340762131145212035478695205314931974421838392310731226415266775095601890938846830080329061111533796518633011922277343217149648494987341818402753017296362015915834670450122261511337212801488239810623226740266516836721952886027130703886460578247562781194524199</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">c = 58274335440051115211211273605191310114692293785750437685473044454042062899661976407492451518086227780147882738264722645944582899451063113444881286175099872016956825274378613983870549046907444680021237171113596116147511706486372974792692071549068969896395366667516390709069131700584308236332248449116109156503</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><spanclass="math display"><em>c</em> ≡ (<em>p</em><em>a</em><em>d</em>1 + <em>f</em><em>l</em><em>a</em><em>g</em> + <em>p</em><em>a</em><em>d</em>2) mod  <em>n</em></span></p><p>这里在看到题目给出的条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flag_len = 39 </span><br><span class="line">pad2 = b&#x27;How_to_solve_it&#x27;</span><br><span class="line">pad2_len = 15</span><br></pre></td></tr></table></figure><p>那么我们就知道了pad1和pad2的长度</p><p>上式就可以变换为 <spanclass="math display"><em>c</em> ≡ (<em>p</em><em>a</em><em>d</em>1<sup>54</sup> + <em>f</em><em>l</em><em>a</em><em>g</em><sup>15</sup> + <em>p</em><em>a</em><em>d</em>2) mod  <em>n</em></span>然后我们直接打cooper就可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">import gmpy2</span><br><span class="line"></span><br><span class="line">n = 130210658110511504736422597261591182174531847806532340762131145212035478695205314931974421838392310731226415266775095601890938846830080329061111533796518633011922277343217149648494987341818402753017296362015915834670450122261511337212801488239810623226740266516836721952886027130703886460578247562781194524199</span><br><span class="line"></span><br><span class="line">c = 58274335440051115211211273605191310114692293785750437685473044454042062899661976407492451518086227780147882738264722645944582899451063113444881286175099872016956825274378613983870549046907444680021237171113596116147511706486372974792692071549068969896395366667516390709069131700584308236332248449116109156503</span><br><span class="line"></span><br><span class="line">pad1 = b&#x27;easy_problem&#x27;</span><br><span class="line"></span><br><span class="line">pad2 = b&#x27;How_to_solve_it&#x27;</span><br><span class="line"></span><br><span class="line">pad1 = bytes_to_long(pad1)</span><br><span class="line"></span><br><span class="line">pad2 = bytes_to_long(pad2)</span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"></span><br><span class="line">f = (pad1*256**54+x*256**15+pad2)^3-c</span><br><span class="line"></span><br><span class="line">f = f.monic()</span><br><span class="line"></span><br><span class="line">res = f.small_roots(X=256^39,beta=1,epsilon=0.04)</span><br><span class="line"></span><br><span class="line">if(res != []):</span><br><span class="line"></span><br><span class="line">  print(long_to_bytes(int(res[0])))</span><br><span class="line"> #b&#x27;flag&#123;A_C0pper5mi1tH_4Ues7iOn_SplIt_Pad&#125;&#x27;</span><br></pre></td></tr></table></figure><p>这里还有另一种解法，是在SHCTF中学到的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">n = 130210658110511504736422597261591182174531847806532340762131145212035478695205314931974421838392310731226415266775095601890938846830080329061111533796518633011922277343217149648494987341818402753017296362015915834670450122261511337212801488239810623226740266516836721952886027130703886460578247562781194524199</span><br><span class="line"></span><br><span class="line">c = 58274335440051115211211273605191310114692293785750437685473044454042062899661976407492451518086227780147882738264722645944582899451063113444881286175099872016956825274378613983870549046907444680021237171113596116147511706486372974792692071549068969896395366667516390709069131700584308236332248449116109156503</span><br><span class="line"></span><br><span class="line">e = 3</span><br><span class="line"></span><br><span class="line">pad1 = b&#x27;easy_problem&#x27;  </span><br><span class="line"></span><br><span class="line">flag_len = 39  </span><br><span class="line"></span><br><span class="line">pad2 = b&#x27;How_to_solve_it&#x27;  </span><br><span class="line"></span><br><span class="line">A = bytes_to_long(pad1)</span><br><span class="line"></span><br><span class="line">C = bytes_to_long(pad2)</span><br><span class="line"></span><br><span class="line">B = 256 ** len(pad2)  </span><br><span class="line"></span><br><span class="line">shift = (flag_len + len(pad2)) * 8 </span><br><span class="line"></span><br><span class="line">A_shift = A * (256 ** (flag_len + len(pad2)))</span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"></span><br><span class="line">f = (A_shift + x * B + C)^e - c</span><br><span class="line"></span><br><span class="line">f = f.monic()</span><br><span class="line"></span><br><span class="line">X = 2^(flag_len * 8)  </span><br><span class="line"></span><br><span class="line">beta = 0.9</span><br><span class="line"></span><br><span class="line">epsilon = 0.03</span><br><span class="line"></span><br><span class="line">roots = f.small_roots(X=X, beta=beta, epsilon=epsilon)</span><br><span class="line"></span><br><span class="line">if roots:</span><br><span class="line"></span><br><span class="line">  flag = long_to_bytes(int(roots[0]))</span><br><span class="line"></span><br><span class="line">  print(flag)</span><br><span class="line"></span><br><span class="line">else:</span><br><span class="line"></span><br><span class="line">  print(&quot;No roots found&quot;)</span><br><span class="line"></span><br><span class="line">#flag&#123;A_C0pper5mi1tH_4Ues7iOn_SplIt_Pad&#125;</span><br></pre></td></tr></table></figure><h2 id="lattice">Lattice</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>(<span class="params">q, n, N, sigma</span>):</span><br><span class="line"></span><br><span class="line">  t = np.random.randint(<span class="number">0</span>, high=q // <span class="number">2</span>, size=n)</span><br><span class="line"></span><br><span class="line">  s = np.concatenate([np.ones(<span class="number">1</span>, dtype=np.int32), t])</span><br><span class="line"></span><br><span class="line">  A = np.random.randint(<span class="number">0</span>, high=q // <span class="number">2</span>, size=(N, n))</span><br><span class="line"></span><br><span class="line">  e = np.<span class="built_in">round</span>(np.random.randn(N) * sigma**<span class="number">2</span>).astype(np.int32) % q</span><br><span class="line"></span><br><span class="line">  b = ((np.dot(A, t) + e).reshape(-<span class="number">1</span>, <span class="number">1</span>)) % q</span><br><span class="line"></span><br><span class="line">  P = np.hstack([b, -A])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> P, s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">P, M, q</span>):</span><br><span class="line"></span><br><span class="line">  N = P.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">  n = <span class="built_in">len</span>(M)</span><br><span class="line"></span><br><span class="line">  r = np.random.randint(<span class="number">0</span>, <span class="number">2</span>, (n, N))</span><br><span class="line"></span><br><span class="line">  Z = np.zeros((n, P.shape[<span class="number">1</span>]), dtype=np.int32)</span><br><span class="line"></span><br><span class="line">  Z[:, <span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  C = np.zeros((n, P.shape[<span class="number">1</span>]), dtype=np.int32)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line"></span><br><span class="line">    C[i] = (np.dot(P.T, r[i]) + (np.floor(q / <span class="number">2</span>) * Z[i] * M[i])) % q</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> C</span><br><span class="line"></span><br><span class="line">q = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">N = <span class="built_in">int</span>(<span class="number">1.1</span> * n * np.log(q))</span><br><span class="line"></span><br><span class="line">sigma = <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">P, s = gen(q, n, N, sigma)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prep</span>(<span class="params">s</span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> np.array([<span class="built_in">int</span>(b) <span class="keyword">for</span> char <span class="keyword">in</span> s <span class="keyword">for</span> b <span class="keyword">in</span> <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">ord</span>(char):08b&#125;</span>&quot;</span>], dtype=np.int32)</span><br><span class="line"></span><br><span class="line">C = enc(P, prep(hint), q)</span><br><span class="line"></span><br><span class="line">P = P.tolist()</span><br><span class="line"></span><br><span class="line">C = C.tolist()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;P=&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;C=&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">P=[[87, -27, -52, -29], [57, -41, -24, -60], [76, -17, -55, -37], [75, -46, -33, -21], [121, -55, -33, -34], [47, -4, -34, -45], [112, -33, -44, -16], [74, -44, -5, -25], [20, -21, -16, -49], [89, -21, -54, -24], [18, -23, -53, -1], [35, -40, -4, -29], [105, -54, -2, -8], [44, -24, -43, -36], [111, -15, -15, -54]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">C=[[24, 75, 81, 85], [24, 14, 85, 102], [115, 1, 5, 21], [58, 118, 104, 77], [65, 42, 101, 103], [33, 38, 50, 67], [7, 81, 38, 58], [117, 101, 54, 11], [44, 29, 81, 8], [59, 114, 70, 121], [62, 13, 9, 105], [11, 43, 97, 23], [39, 82, 75, 97], [122, 113, 14, 30], [70, 102, 116, 5], [58, 44, 61, 20], [73, 119, 59, 28], [119, 68, 57, 122], [61, 91, 83, 44], [103, 29, 1, 73], [47, 60, 120, 125], [17, 126, 14, 21], [104, 8, 78, 123], [72, 121, 54, 74], [48, 104, 49, 66], [72, 56, 27, 69], [34, 110, 41, 54], [33, 54, 74, 44], [70, 65, 11, 113], [122, 3, 69, 35], [58, 7, 39, 64], [59, 106, 49, 66], [77, 92, 87, 92], [95, 21, 96, 83], [67, 55, 30, 73], [99, 54, 18, 90], [101, 102, 126, 107], [81, 46, 104, 83], [38, 24, 94, 60], [114, 105, 76, 97], [22, 115, 20, 67], [40, 72, 110, 65], [111, 92, 106, 117], [5, 123, 21, 96], [41, 14, 23, 114], [113, 75, 43, 65], [56, 3, 61, 48], [40, 101, 16, 114], [42, 84, 95, 13], [36, 110, 91, 107], [4, 13, 60, 74], [24, 80, 125, 76], [123, 26, 27, 119], [31, 87, 6, 123], [61, 106, 73, 120], [66, 10, 36, 65], [91, 38, 46, 9], [121, 20, 106, 48], [123, 21, 78, 27], [22, 74, 55, 110], [47, 49, 118, 76], [30, 10, 16, 118], [43, 19, 52, 61], [100, 9, 37, 35], [20, 102, 111, 94], [116, 63, 55, 43], [13, 110, 42, 14], [46, 65, 71, 28], [82, 5, 76, 74], [86, 34, 117, 84], [28, 44, 82, 50], [76, 79, 77, 11], [68, 39, 51, 89], [83, 93, 95, 2], [54, 108, 101, 82], [99, 90, 122, 37], [16, 92, 79, 12], [67, 86, 24, 36], [80, 94, 106, 59], [50, 56, 95, 98], [33, 68, 89, 40], [74, 124, 14, 82], [88, 93, 54, 93], [51, 17, 124, 31], [17, 17, 45, 35], [113, 71, 76, 44], [48, 6, 120, 4], [36, 91, 108, 11], [2, 41, 58, 72], [42, 59, 51, 81], [73, 22, 79, 27], [85, 35, 29, 98], [76, 76, 37, 22], [82, 29, 42, 27], [75, 114, 37, 106], [40, 69, 53, 73], [39, 44, 33, 121], [94, 85, 92, 54], [91, 77, 124, 46], [108, 31, 101, 84], [35, 33, 97, 45], [99, 32, 17, 14], [1, 66, 11, 35], [78, 100, 95, 81], [73, 49, 14, 37], [70, 9, 107, 2], [84, 98, 92, 62], [123, 87, 87, 110], [3, 81, 111, 28], [20, 2, 91, 37], [93, 101, 77, 93], [27, 16, 31, 105], [95, 81, 87, 17], [10, 103, 21, 102], [81, 57, 118, 82], [15, 92, 60, 71], [16, 84, 126, 49], [35, 26, 2, 120], [70, 86, 45, 9], [29, 8, 40, 66], [99, 77, 14, 9], [12, 70, 50, 52], [21, 21, 85, 54], [91, 94, 100, 85], [9, 42, 47, 14], [117, 55, 17, 99], [53, 45, 4, 72], [49, 10, 27, 121], [108, 61, 73, 42], [121, 42, 41, 71], [49, 63, 50, 117], [5, 78, 24, 101], [0, 117, 21, 46], [90, 43, 47, 32], [74, 85, 118, 84], [13, 73, 18, 66], [95, 24, 120, 18], [94, 21, 111, 34], [66, 68, 80, 21], [102, 49, 57, 55], [25, 85, 107, 98], [8, 18, 88, 12], [18, 6, 86, 82], [18, 91, 126, 115], [26, 11, 30, 35], [88, 78, 76, 74], [51, 75, 76, 15], [60, 24, 72, 27], [91, 72, 44, 104], [84, 113, 39, 116], [41, 83, 91, 74], [84, 17, 94, 119], [46, 95, 85, 5], [109, 58, 71, 42], [126, 29, 114, 73], [27, 70, 7, 125], [121, 66, 97, 111], [8, 21, 10, 57], [15, 62, 65, 8], [101, 79, 32, 74], [69, 42, 38, 58], [65, 81, 72, 16], [20, 81, 1, 126], [91, 111, 69, 33], [56, 84, 65, 66], [47, 78, 43, 100], [43, 90, 80, 25], [46, 55, 10, 60], [116, 110, 49, 116], [72, 115, 38, 104], [79, 43, 74, 106], [86, 113, 84, 76], [102, 2, 119, 3], [126, 25, 83, 44], [37, 83, 46, 40], [13, 75, 101, 101], [76, 93, 3, 63], [69, 9, 84, 37], [103, 47, 106, 80], [72, 104, 85, 19], [124, 118, 34, 81], [57, 25, 52, 119], [44, 56, 63, 90], [123, 46, 124, 31], [19, 116, 23, 77], [126, 78, 37, 93], [34, 95, 43, 98], [37, 90, 32, 97], [106, 8, 80, 8], [90, 5, 113, 68], [99, 40, 39, 18], [90, 37, 48, 45], [56, 13, 76, 6], [68, 33, 52, 102], [62, 45, 29, 123], [100, 21, 73, 92], [92, 18, 118, 23], [84, 86, 42, 83], [107, 8, 71, 52], [114, 106, 78, 85], [10, 120, 115, 119], [27, 49, 124, 16], [65, 40, 48, 37], [69, 42, 8, 29], [35, 39, 55, 102], [58, 19, 41, 75], [17, 2, 113, 12], [8, 34, 72, 75], [91, 32, 19, 52], [62, 50, 109, 78], [9, 115, 35, 50], [42, 83, 78, 41], [34, 94, 97, 58], [56, 73, 25, 115], [55, 12, 16, 86], [97, 95, 30, 92], [47, 105, 70, 68], [50, 18, 51, 23], [46, 57, 80, 29], [4, 66, 123, 24], [55, 53, 26, 36], [71, 59, 104, 91], [94, 3, 1, 34], [57, 8, 85, 102], [89, 73, 115, 25], [13, 38, 81, 76], [104, 30, 81, 104], [55, 101, 95, 101], [69, 65, 5, 11], [123, 105, 84, 125], [38, 110, 4, 28], [112, 115, 92, 71], [90, 120, 112, 39], [50, 18, 107, 71], [95, 63, 118, 93], [93, 111, 59, 55], [17, 15, 2, 88], [78, 126, 37, 12], [56, 112, 53, 12], [65, 34, 82, 100], [9, 94, 72, 99], [78, 76, 43, 91], [7, 88, 107, 31], [43, 91, 97, 4], [113, 112, 36, 15], [8, 97, 23, 84], [65, 92, 31, 63], [54, 38, 119, 103], [89, 50, 57, 50], [61, 37, 87, 0], [21, 35, 44, 22], [20, 32, 95, 116], [10, 94, 103, 84], [59, 29, 7, 50], [98, 33, 87, 33], [7, 96, 36, 67], [85, 10, 35, 98], [65, 49, 19, 62], [56, 67, 14, 91], [30, 49, 111, 77], [121, 49, 108, 119], [89, 67, 115, 69], [65, 8, 0, 82], [117, 57, 117, 23], [23, 38, 2, 98], [60, 28, 94, 93], [23, 65, 8, 114], [121, 105, 122, 40], [120, 12, 21, 112], [55, 51, 2, 77], [48, 41, 113, 62], [66, 82, 117, 119], [4, 15, 5, 21], [41, 14, 12, 80], [23, 61, 106, 16], [23, 53, 122, 68], [6, 54, 5, 101], [69, 49, 7, 79], [17, 70, 64, 88], [103, 30, 76, 31], [108, 82, 90, 109], [55, 56, 113, 37], [93, 99, 126, 44], [1, 46, 105, 124], [55, 54, 35, 115], [0, 89, 53, 97], [67, 111, 107, 80], [92, 122, 40, 64], [75, 2, 126, 118], [90, 84, 43, 74], [101, 69, 60, 17], [104, 10, 4, 122], [94, 4, 115, 91], [15, 11, 111, 105], [9, 7, 32, 101], [77, 18, 55, 56], [66, 7, 117, 108], [116, 121, 33, 66], [32, 41, 83, 125], [60, 52, 70, 58], [125, 54, 93, 15], [70, 19, 10, 58], [83, 94, 61, 126], [95, 85, 80, 44], [25, 89, 117, 74], [12, 17, 63, 87], [118, 80, 96, 26], [6, 97, 79, 38], [97, 3, 107, 95], [7, 82, 106, 92], [83, 100, 119, 95], [81, 26, 99, 56], [25, 60, 51, 122], [56, 18, 22, 84], [9, 72, 107, 114], [80, 97, 92, 52], [108, 47, 58, 46], [9, 47, 7, 47], [115, 68, 91, 7], [14, 120, 87, 122], [97, 15, 40, 79], [5, 92, 85, 93], [4, 97, 73, 63], [25, 22, 92, 108], [88, 4, 34, 86], [0, 43, 21, 57], [67, 90, 36, 50], [15, 126, 37, 12], [92, 73, 96, 71], [76, 107, 27, 115], [79, 8, 68, 55], [38, 12, 120, 126], [54, 46, 7, 69], [72, 114, 93, 60], [59, 98, 27, 102], [50, 76, 87, 19], [77, 107, 29, 40], [36, 73, 21, 123], [36, 89, 82, 74], [24, 73, 118, 86], [58, 89, 115, 106], [12, 27, 33, 72], [28, 94, 21, 26], [0, 79, 48, 110], [72, 62, 82, 57], [65, 84, 114, 97], [80, 68, 52, 52], [119, 35, 103, 101], [10, 67, 68, 69], [101, 17, 54, 40], [98, 46, 21, 42], [30, 39, 56, 118], [27, 33, 77, 114], [66, 74, 61, 63], [23, 13, 14, 47], [88, 30, 122, 119], [15, 58, 55, 52], [56, 27, 47, 45], [119, 95, 59, 14], [84, 69, 5, 83], [21, 35, 39, 36], [10, 92, 68, 17], [79, 67, 111, 38], [36, 1, 4, 117], [117, 30, 5, 7], [112, 15, 115, 123], [54, 47, 18, 93], [102, 111, 3, 68], [91, 91, 5, 44], [123, 118, 57, 32], [12, 121, 31, 103], [114, 52, 105, 12], [100, 28, 117, 102], [51, 42, 12, 124], [47, 1, 42, 47], [28, 3, 22, 100], [103, 105, 119, 24], [101, 59, 13, 78], [79, 36, 61, 54], [11, 46, 75, 116], [31, 73, 118, 0], [92, 32, 0, 124], [77, 85, 25, 90], [29, 21, 74, 7], [3, 66, 11, 8], [112, 91, 50, 53], [45, 113, 99, 123], [35, 65, 85, 22], [108, 99, 42, 1], [103, 113, 116, 72], [125, 74, 112, 24], [75, 79, 80, 12], [83, 44, 94, 86], [64, 20, 0, 8], [104, 126, 31, 120], [85, 75, 61, 74], [36, 93, 36, 102], [70, 54, 101, 83], [90, 46, 109, 83], [112, 126, 114, 23], [16, 123, 97, 62], [118, 86, 108, 53], [99, 18, 2, 18], [103, 3, 38, 8], [99, 49, 123, 81], [37, 75, 89, 53], [34, 77, 27, 122], [29, 8, 40, 66], [119, 13, 64, 83], [4, 108, 116, 121], [49, 87, 1, 92], [15, 63, 80, 62], [27, 81, 100, 83], [7, 90, 16, 0], [13, 50, 61, 65], [51, 64, 76, 5], [55, 100, 106, 66], [52, 102, 105, 2], [49, 34, 89, 116], [24, 55, 11, 27], [91, 48, 73, 38], [27, 5, 1, 126], [66, 55, 80, 19], [52, 118, 104, 43], [36, 1, 111, 60], [65, 4, 34, 17], [54, 22, 0, 39], [52, 30, 64, 62], [26, 40, 32, 86], [93, 71, 41, 47], [77, 23, 15, 9], [11, 20, 51, 31], [64, 50, 37, 50], [17, 49, 80, 37], [119, 115, 115, 50], [20, 86, 27, 5], [101, 65, 17, 78], [56, 25, 125, 56], [16, 118, 2, 96], [114, 108, 69, 121], [14, 37, 76, 101], [113, 124, 121, 82], [43, 120, 35, 94], [82, 67, 23, 43], [9, 79, 47, 122], [39, 28, 110, 31], [35, 48, 27, 16], [72, 8, 115, 66], [54, 46, 122, 19], [77, 77, 30, 74], [58, 63, 81, 96], [6, 122, 75, 63], [115, 31, 119, 110], [82, 86, 89, 1], [79, 100, 6, 110], [117, 67, 15, 13], [4, 15, 63, 0], [106, 108, 122, 107], [34, 72, 0, 114], [20, 0, 32, 56], [121, 104, 66, 3], [86, 28, 76, 84], [85, 9, 60, 45], [95, 80, 78, 65], [39, 85, 50, 49], [42, 103, 36, 90], [70, 99, 116, 117], [34, 15, 40, 52], [24, 49, 19, 31], [98, 90, 95, 89], [63, 45, 40, 77], [114, 14, 30, 106], [10, 35, 116, 9], [103, 111, 112, 16], [71, 112, 71, 32], [77, 31, 105, 64], [84, 87, 24, 67], [1, 27, 123, 57], [104, 29, 87, 123], [110, 39, 67, 7], [28, 70, 108, 113], [96, 9, 101, 36], [13, 28, 6, 13], [69, 81, 89, 26], [79, 113, 77, 91], [112, 62, 104, 117], [109, 95, 55, 83], [78, 68, 98, 14], [73, 79, 96, 12], [108, 39, 97, 49], [27, 111, 106, 100], [82, 70, 9, 36], [48, 31, 90, 70], [99, 92, 45, 35], [55, 100, 31, 37], [75, 17, 69, 35], [12, 38, 119, 112], [103, 34, 63, 76], [26, 19, 91, 111], [74, 122, 12, 78], [64, 117, 16, 60], [2, 97, 122, 106], [62, 79, 56, 30], [71, 47, 13, 22], [38, 78, 116, 16], [87, 28, 94, 76], [77, 126, 94, 116], [83, 46, 104, 90], [5, 95, 13, 26], [47, 10, 46, 115], [82, 19, 91, 70], [111, 72, 49, 65], [18, 103, 59, 72], [17, 37, 56, 24], [19, 120, 24, 64], [28, 40, 11, 20], [18, 19, 80, 62], [37, 11, 74, 14], [109, 97, 75, 72], [116, 65, 52, 121], [95, 63, 82, 122], [88, 93, 54, 93], [77, 30, 65, 121], [99, 121, 42, 87], [62, 52, 44, 6], [79, 60, 55, 4], [96, 64, 6, 20], [94, 114, 90, 8], [123, 98, 29, 27], [116, 84, 31, 80], [9, 77, 45, 45], [120, 33, 63, 15], [51, 44, 66, 25], [2, 46, 72, 94], [107, 113, 50, 46], [115, 64, 126, 85], [64, 10, 28, 78], [84, 112, 64, 103], [59, 114, 15, 82], [65, 122, 104, 89], [113, 122, 21, 11], [69, 106, 19, 78], [42, 93, 125, 0], [7, 123, 82, 70], [103, 114, 62, 92], [15, 30, 78, 114], [4, 78, 111, 60], [40, 80, 34, 55], [3, 87, 120, 27], [122, 64, 3, 122], [24, 49, 31, 81], [26, 43, 100, 19], [52, 78, 2, 97], [116, 45, 15, 33], [21, 119, 92, 86], [28, 118, 71, 24], [106, 15, 0, 79], [36, 4, 52, 73], [22, 43, 8, 60], [96, 22, 9, 100], [19, 64, 26, 96], [97, 61, 22, 39], [6, 112, 76, 38], [58, 6, 97, 94], [103, 87, 87, 101], [17, 49, 80, 37], [117, 33, 26, 8], [59, 108, 78, 91], [113, 28, 30, 44], [119, 78, 72, 20], [49, 101, 77, 2], [26, 18, 35, 7], [34, 38, 99, 37], [45, 52, 90, 27], [108, 31, 118, 67], [3, 37, 29, 88], [111, 96, 12, 111], [91, 111, 106, 100], [52, 78, 117, 80], [14, 51, 87, 0], [1, 52, 116, 1], [117, 2, 33, 48], [57, 0, 48, 34], [59, 14, 84, 63], [82, 83, 8, 82], [58, 100, 32, 33], [75, 29, 112, 103], [0, 49, 45, 54], [94, 9, 51, 110], [54, 61, 27, 47], [88, 89, 23, 37], [73, 43, 0, 32], [123, 6, 35, 78], [73, 72, 119, 64], [81, 46, 11, 102], [42, 124, 47, 8], [50, 66, 3, 40], [116, 7, 51, 20], [47, 112, 99, 7], [42, 37, 86, 89], [18, 74, 78, 101], [57, 85, 75, 7], [26, 90, 35, 10], [72, 126, 10, 77], [55, 12, 5, 78], [37, 87, 85, 96], [91, 9, 114, 68], [79, 76, 44, 20], [84, 52, 63, 56], [95, 9, 22, 117], [96, 38, 50, 67], [43, 114, 45, 56], [94, 21, 74, 107], [92, 82, 81, 71], [40, 10, 10, 90], [20, 18, 15, 56], [72, 2, 30, 22], [50, 31, 123, 20], [85, 40, 115, 115], [93, 1, 48, 47], [111, 118, 45, 34], [9, 122, 37, 121], [60, 27, 77, 41], [122, 38, 22, 39], [115, 66, 74, 126], [77, 67, 90, 78], [96, 3, 53, 52], [5, 26, 120, 101], [45, 100, 72, 6], [106, 56, 87, 77], [52, 68, 102, 95], [1, 13, 36, 33], [58, 27, 35, 8], [52, 5, 38, 35], [102, 82, 63, 47], [24, 71, 119, 43], [11, 36, 90, 13], [11, 93, 27, 23], [4, 107, 26, 125], [85, 9, 5, 13], [116, 25, 55, 119], [73, 82, 73, 2], [40, 123, 77, 41], [10, 98, 51, 111], [23, 79, 120, 54], [56, 18, 22, 84], [61, 115, 51, 109], [33, 5, 12, 121], [8, 81, 35, 70], [22, 39, 103, 2], [38, 74, 66, 126], [83, 20, 117, 85], [8, 32, 91, 98], [37, 31, 94, 119], [7, 30, 45, 43], [68, 16, 124, 97], [86, 124, 37, 21], [29, 101, 15, 30], [27, 31, 52, 45], [47, 37, 102, 3], [117, 49, 54, 89], [48, 94, 126, 66], [42, 115, 63, 104], [14, 74, 6, 112], [68, 125, 4, 5], [66, 3, 78, 52], [108, 33, 6, 77], [77, 99, 16, 52], [61, 78, 73, 70], [108, 106, 124, 0], [23, 35, 119, 118], [125, 124, 37, 65], [69, 30, 61, 110], [77, 10, 120, 118], [53, 121, 24, 30], [87, 32, 29, 63], [54, 64, 1, 3], [16, 59, 104, 25], [30, 6, 59, 102], [43, 120, 35, 94], [89, 13, 69, 39], [87, 78, 100, 14], [83, 17, 14, 4], [24, 49, 31, 81], [73, 32, 72, 10], [0, 22, 61, 54], [81, 42, 70, 13], [108, 56, 52, 2], [25, 99, 116, 72], [66, 23, 18, 102], [121, 115, 47, 12], [96, 37, 123, 48], [64, 69, 4, 39], [78, 38, 124, 31], [27, 69, 10, 70], [5, 29, 2, 85], [30, 45, 56, 7], [31, 25, 120, 61], [36, 89, 89, 118], [98, 63, 18, 21], [121, 83, 36, 57], [60, 5, 86, 17], [121, 55, 117, 58], [12, 96, 4, 27], [119, 63, 124, 37], [96, 27, 45, 91], [42, 119, 8, 103], [104, 42, 68, 37], [104, 55, 41, 38], [120, 3, 50, 87], [120, 121, 20, 67], [58, 123, 50, 28], [103, 62, 58, 20], [97, 27, 89, 102], [7, 51, 56, 108], [73, 60, 10, 77], [56, 72, 103, 69], [101, 89, 18, 66], [115, 35, 80, 36], [98, 103, 39, 63], [29, 126, 67, 76], [27, 97, 15, 79], [36, 6, 17, 90], [126, 54, 101, 42], [115, 66, 74, 126], [78, 80, 62, 83], [60, 11, 31, 88], [16, 73, 108, 13]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">key = os.urandom(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">encrypted = AES.new(key=key, iv=iv, mode=AES.MODE_CBC).encrypt(<span class="string">b&quot;&quot;</span>.join([pad(i.encode(), <span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> flag]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(leak)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(encrypted)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-3.257518803980229925210589904230583482986646342139415561576950148286382674434770529248486501793457710730252401258721482142654716015216299244487794967600132597049154513815052213387666360825101667524635777006510550117512116441539852315185793280311905620746025669520152068447372368293640072502196959919309286241</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">b&#x27;\x8fj\x94\x98-\x1fd\xd5\x89\xbe\xa9*Tu\x90\xb7&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">b&#x27;\x9fT@\xbc\x82\x8esQ\x1e\xd8\x1d\xdb\x9b\xb4\xf8rU\xc8\xa0\xcb\xaf H\xa9.\x04\x1e\xd2\x92\x1f\x0fBja-\x965x\xa8@\xc9x\xf9\xaf\x87\xd1\xa5&#125;\xfc\x1b\xe0#\xc3m\xc9\x8973\x1c\x1f\x13\x8f\xb2a\xae\xa9]\xb9\xc2\xe8\x83A\x80\x13g\xc9a\x1c&lt;\x8a\x9c&amp;\xd9\xbd\x06\xef\xba9\xb0\x03\x9f\x022\xc9\x13\x9a\xffXPG\xc6o\xc0\xeaV7)XG9L\x84N7U\xe3Wn0G\x8e\xd3\x04(\n\x08\xb9\x17\xe6\xf1\xaa\xb7\x8a@$\x16\x13\x06A\x00\xc9Z\xdf\x7fQ\xc9\x08\xb4\xf3P\xfcpe\xe2\xeb\x96\x0e(-\xde\x17\xd1\x01\x1c_\x82\x8b\x9fw\xc8\x86\xfbw\xb5\xf7\xd0\xc8\x1784\xe3?\x00\x0b.)\xb7\xbc\x8e&#123;\xe0\xae\x8d$\x0f\x19\&#x27;\xb6\xee@d\x00\xd9\x84\x8c\x0e\xa3,\xc6a\xa3\xba*1\xfd&lt;\xfd\x18\xd6\x9e\x8c4\x8e#\xfd\xbd&amp;0R\xeddE,\xed\xb6\x1e\x00\x11\xa6K\xd3\x1dT\x8c5\x8e\x00\xea\x10\xe9\&#x27;u&quot;B#\xa1#\xd8\xe3\xf5j\xbc\x94M\xda\xe3\xcb*\xf0W1\xa0\x80\x1d\xfc\xbfo\x01?(da\r\xb6\x86\xd0\x90\x88Z\xa1`B\x89\x89\x89\xb3v\xa5\xf0\xe0\x0c\x8e\xcc+P\xfc\xfd#\x83\xe9\x93\x96\n\xf2\xa5\xfb\xc3\xc5\xaa\x9e\x89\x93\xb6\xf5\xea\x8c%NY\xc3\x0eR\xfas\xa1\x13\xf2/*\xce\x8b_:_r\xeb\xbe\x0b\x8a\x8c\x97\x7f|m&#125;\xae\xa9I\x95\xcc\xe7\x80\xa5yC4\x1f5\xa4P\xc5\xbf.\xf9V\xe8|\xbb\xc3\xcb\x98&amp;\&#x27;JB\x99\x94\xc0\r$\x0b\xbe48u\xeb\xca\xa1\xfbb\xd8_R\x97\x8e\xaeI\xfc\xc2\xb2\xd2#@\xec\x16\xf1\xd7eCQ\x1cO\x13\xca\xb5\xd3\x1a\xb1\xf1_D\x80\x06\xa5\xbe\xbev\xbd\xd6\xbb\x9a\xc9x\x9cf:\xcb&gt;\xa2\xe1\xcad\xde]aw\xa0\xdc\xb2\xb3&#123;+\x85\x8d\x8b\xc5\rT\xcc\xd9X\xd5\x9b\r&lt;\x99m\xb8b6s\xbfp\x0eo~\xe9&amp;\xb2&#123;\xbe\xee\x93\xd2N1\\\x94\x968IWO7\xcb\xb6e\x80\xf7\x9air\xb2~\x17\x1cF\x0f\x82T]RBX\xdex\x13\x85\xfa\xcd-\xce\xdc\xe4\xe5^\x99u\xb5\x01\xd0-\xc3C\xcd\xc4y6\xb7\x9d|L1\xe74\xf7\x8cH\xe9\xa9\xfav\n\xec;\xf2\xa2w\xfb\x13_b\r)z!\xa3\xc8\xa8\xc2\xd2\x10\x00\x11\x11\r\xb2&amp;\xfb\x04&amp;\x84&quot;&gt;x6l[\x06n&gt;\xa0\xbe\x9c`\xa7\x9e\xe0\xfb\x85\x91\xc4,\xcf\xac\xe11@a\xed3@\xfd&#125;\x8e\xfaTp\xcb7\xe7\xbf\xd4\xe0~b\xd9\xe0&lt;\xba\x81\xd4&quot;e\xfc\x939|j#0H\x86\xf8\x0b\x03\xd2\xe8\xf5\xe55\xdc\xc8\x06\\\xb7)\xcc\x9b\&#x27;\xf12&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>其实题目变量名没设置好</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">encrypted = AES.new(key=key, iv=iv, mode=AES.MODE_CBC).encrypt(b&quot;&quot;.join([pad(i.encode(), 16) for i in flag]))</span><br></pre></td></tr></table></figure><p>这是关键点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"></span><br><span class="line">key = <span class="string">b&#x27;\x8fj\x94\x98-\x1fd\xd5\x89\xbe\xa9*Tu\x90\xb7&#x27;</span></span><br><span class="line"></span><br><span class="line">encrypted = <span class="string">b&#x27;\x9fT@\xbc\x82\x8esQ\x1e\xd8\x1d\xdb\x9b\xb4\xf8rU\xc8\xa0\xcb\xaf H\xa9.\x04\x1e\xd2\x92\x1f\x0fBja-\x965x\xa8@\xc9x\xf9\xaf\x87\xd1\xa5&#125;\xfc\x1b\xe0#\xc3m\xc9\x8973\x1c\x1f\x13\x8f\xb2a\xae\xa9]\xb9\xc2\xe8\x83A\x80\x13g\xc9a\x1c&lt;\x8a\x9c&amp;\xd9\xbd\x06\xef\xba9\xb0\x03\x9f\x022\xc9\x13\x9a\xffXPG\xc6o\xc0\xeaV7)XG9L\x84N7U\xe3Wn0G\x8e\xd3\x04(\n\x08\xb9\x17\xe6\xf1\xaa\xb7\x8a@$\x16\x13\x06A\x00\xc9Z\xdf\x7fQ\xc9\x08\xb4\xf3P\xfcpe\xe2\xeb\x96\x0e(-\xde\x17\xd1\x01\x1c_\x82\x8b\x9fw\xc8\x86\xfbw\xb5\xf7\xd0\xc8\x1784\xe3?\x00\x0b.)\xb7\xbc\x8e&#123;\xe0\xae\x8d$\x0f\x19\&#x27;\xb6\xee@d\x00\xd9\x84\x8c\x0e\xa3,\xc6a\xa3\xba*1\xfd&lt;\xfd\x18\xd6\x9e\x8c4\x8e#\xfd\xbd&amp;0R\xeddE,\xed\xb6\x1e\x00\x11\xa6K\xd3\x1dT\x8c5\x8e\x00\xea\x10\xe9\&#x27;u&quot;B#\xa1#\xd8\xe3\xf5j\xbc\x94M\xda\xe3\xcb*\xf0W1\xa0\x80\x1d\xfc\xbfo\x01?(da\r\xb6\x86\xd0\x90\x88Z\xa1`B\x89\x89\x89\xb3v\xa5\xf0\xe0\x0c\x8e\xcc+P\xfc\xfd#\x83\xe9\x93\x96\n\xf2\xa5\xfb\xc3\xc5\xaa\x9e\x89\x93\xb6\xf5\xea\x8c%NY\xc3\x0eR\xfas\xa1\x13\xf2/*\xce\x8b_:_r\xeb\xbe\x0b\x8a\x8c\x97\x7f|m&#125;\xae\xa9I\x95\xcc\xe7\x80\xa5yC4\x1f5\xa4P\xc5\xbf.\xf9V\xe8|\xbb\xc3\xcb\x98&amp;\&#x27;JB\x99\x94\xc0\r$\x0b\xbe48u\xeb\xca\xa1\xfbb\xd8_R\x97\x8e\xaeI\xfc\xc2\xb2\xd2#@\xec\x16\xf1\xd7eCQ\x1cO\x13\xca\xb5\xd3\x1a\xb1\xf1_D\x80\x06\xa5\xbe\xbev\xbd\xd6\xbb\x9a\xc9x\x9cf:\xcb&gt;\xa2\xe1\xcad\xde]aw\xa0\xdc\xb2\xb3&#123;+\x85\x8d\x8b\xc5\rT\xcc\xd9X\xd5\x9b\r&lt;\x99m\xb8b6s\xbfp\x0eo~\xe9&amp;\xb2&#123;\xbe\xee\x93\xd2N1\\\x94\x968IWO7\xcb\xb6e\x80\xf7\x9air\xb2~\x17\x1cF\x0f\x82T]RBX\xdex\x13\x85\xfa\xcd-\xce\xdc\xe4\xe5^\x99u\xb5\x01\xd0-\xc3C\xcd\xc4y6\xb7\x9d|L1\xe74\xf7\x8cH\xe9\xa9\xfav\n\xec;\xf2\xa2w\xfb\x13_b\r)z!\xa3\xc8\xa8\xc2\xd2\x10\x00\x11\x11\r\xb2&amp;\xfb\x04&amp;\x84&quot;&gt;x6l[\x06n&gt;\xa0\xbe\x9c`\xa7\x9e\xe0\xfb\x85\x91\xc4,\xcf\xac\xe11@a\xed3@\xfd&#125;\x8e\xfaTp\xcb7\xe7\xbf\xd4\xe0~b\xd9\xe0&lt;\xba\x81\xd4&quot;e\xfc\x939|j#0H\x86\xf8\x0b\x03\xd2\xe8\xf5\xe55\xdc\xc8\x06\\\xb7)\xcc\x9b\&#x27;\xf12&#x27;</span></span><br><span class="line"></span><br><span class="line">iv = encrypted[:<span class="number">16</span>]</span><br><span class="line"></span><br><span class="line">ciphertext = encrypted[<span class="number">16</span>:]</span><br><span class="line"></span><br><span class="line">cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line"></span><br><span class="line">decrypted = unpad(cipher.decrypt(ciphertext), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Decrypted flag:&quot;</span>, decrypted.decode())</span><br></pre></td></tr></table></figure><h2 id="happy">Happy*</h2><p>比赛的时候没解出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">\<span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Simplify the problem by happy4321</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os, utils</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">b&#x27;flag&#123;&#x27;</span>) <span class="keyword">and</span> flag.endswith(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">seed = <span class="built_in">int</span>(os.urandom(<span class="number">16</span>).<span class="built_in">hex</span>(), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">gen = utils.Gen(seed)</span><br><span class="line"></span><br><span class="line">msg = <span class="string">b&#x27;Happy4321: &#x27;</span> + flag</span><br><span class="line"></span><br><span class="line">enc = <span class="built_in">bytes</span>(m ^ <span class="built_in">next</span>(gen) <span class="keyword">for</span> m <span class="keyword">in</span> msg).<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(enc)</span><br><span class="line"></span><br><span class="line">\<span class="comment"># cd1dd7c7a9cfe3c0067ff64694e64c38aa759c81d1c8f48cf6f7ee1df2d1e58584da52644ea56bd24dadca6bd5a6899a92b118f57de2529670264d48</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Gen</span>:</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, state</span>):</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">self</span>.nbits = <span class="number">128</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">self</span>.state = state &amp; ((<span class="number">1</span> &lt;&lt; <span class="variable language_">self</span>.nbits) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">self</span>.mask = <span class="number">109908700282042807039366676242995409413</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">func0</span>(<span class="params">self, steps=<span class="number">1</span></span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(steps):</span><br><span class="line"></span><br><span class="line">      res = <span class="variable language_">self</span>.state &amp; <span class="variable language_">self</span>.mask</span><br><span class="line"></span><br><span class="line">      bit = <span class="built_in">sum</span>([(res &gt;&gt; i) &amp; <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.nbits)]) &amp; <span class="number">1</span></span><br><span class="line"></span><br><span class="line">      <span class="variable language_">self</span>.state = ((<span class="variable language_">self</span>.state &lt;&lt; <span class="number">1</span>) ^ bit) &amp; ((<span class="number">1</span> &lt;&lt; <span class="variable language_">self</span>.nbits) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bit</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">    out = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line"></span><br><span class="line">      bit = <span class="variable language_">self</span>.func0(<span class="number">2023</span>)</span><br><span class="line"></span><br><span class="line">      out = (out &lt;&lt; <span class="number">1</span>) ^ bit</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> out</span><br></pre></td></tr></table></figure><h1 id="轩辕杯2025">轩辕杯2025</h1><h2 id="babyrsa">babyrsa</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;flag&#123;****************************&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">256</span>)</span><br><span class="line"></span><br><span class="line">q = getPrime(<span class="number">256</span>)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">d = getPrime(<span class="number">130</span>)</span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">e = invert(d, phi)</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">\<span class="comment"># print(f&#x27;e = &#123;e&#125;&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>(<span class="params">bits</span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">    p = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> p.bit_length() &lt; bits:</span><br><span class="line"></span><br><span class="line">      p *= choice(sieve_base)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> isPrime(p - <span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> p - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">p1 = gen(<span class="number">256</span>)</span><br><span class="line"></span><br><span class="line">q1 = gen(<span class="number">256</span>)</span><br><span class="line"></span><br><span class="line">n1 = p1 * q1</span><br><span class="line"></span><br><span class="line">c1 = p1 + e</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n1 = <span class="subst">&#123;n1&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c1 = <span class="subst">&#123;c1&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">n = 10037257627154486608196774801095855162090578704439233219876490744017222686494761706171113312036056644757212254824459536550416291797454693336043852190135363</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">c = 6723803125309437675713195914771839852631361554645954138639198200804046718848872479140347495288135138109762940384847808522874831433140182790750890982139835</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">n1 = 151767047787614712083974720416865469041528766980347881592164779139223941980832935534609228636599644744364450753148219193621511377088383418096756216139022880709</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">c1 = 6701513605196718137208327145211106525052740242222174201768345944717813148931922063338128366155730924516887607710111701686062781667128443135522927486682574</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里观察到d是只有130bit的符合boneh-durfee，现在还需要求出e</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c1 = p1 + e</span><br></pre></td></tr></table></figure><p>我们知道c1，现在只需要求出p1即可求出e</p><p>很明显我们可以用Williams的p+1算法分解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> count</span><br><span class="line"></span><br><span class="line">n = <span class="number">151767047787614712083974720416865469041528766980347881592164779139223941980832935534609228636599644744364450753148219193621511377088383418096756216139022880709</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">26971181342240802276810747395669930355754928952080329914687241779532014305320191048439959934699795162709365987652696472998140484810728817991804469778237933925</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mlucas</span>(<span class="params">v, a, n</span>):</span><br><span class="line">  v1, v2 = v, (v ** <span class="number">2</span> - <span class="number">2</span>) % n</span><br><span class="line">  <span class="keyword">for</span> bit <span class="keyword">in</span> <span class="built_in">bin</span>(a)[<span class="number">3</span>:]: v1, v2 = ((v1 ** <span class="number">2</span> - <span class="number">2</span>) % n, (v1 * v2 - v) % n) <span class="keyword">if</span> bit == <span class="string">&quot;0&quot;</span><span class="keyword">else</span> (</span><br><span class="line">    (v1 * v2 - v) % n, (v2 ** <span class="number">2</span> - <span class="number">2</span>) % n)</span><br><span class="line">  <span class="keyword">return</span> v1</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">primegen</span>():</span><br><span class="line">  yield2</span><br><span class="line">  yield3</span><br><span class="line">  yield5</span><br><span class="line">  yield7</span><br><span class="line">  yield11</span><br><span class="line">  yield13</span><br><span class="line">  ps = primegen()  *<span class="comment"># yay recursion*</span></span><br><span class="line">  p = ps.__next__() <span class="keyword">and</span> ps.__next__()</span><br><span class="line">  q, sieve, n = p ** <span class="number">2</span>, &#123;&#125;, <span class="number">13</span></span><br><span class="line">  whileTrue:</span><br><span class="line">    <span class="keyword">if</span> n notin sieve:</span><br><span class="line">      <span class="keyword">if</span> n &lt; q:</span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">next</span>, step = q + <span class="number">2</span> * p, <span class="number">2</span> * p</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">next</span> <span class="keyword">in</span> sieve:</span><br><span class="line">          <span class="built_in">next</span> += step</span><br><span class="line">        sieve[<span class="built_in">next</span>] = step</span><br><span class="line">        p = ps.__next__()</span><br><span class="line">        q = p ** <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      step = sieve.pop(n)</span><br><span class="line">      <span class="built_in">next</span> = n + step</span><br><span class="line">      <span class="keyword">while</span> <span class="built_in">next</span> <span class="keyword">in</span> sieve:</span><br><span class="line">        <span class="built_in">next</span> += step</span><br><span class="line">      sieve[<span class="built_in">next</span>] = step</span><br><span class="line">    n += <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ilog</span>(<span class="params">x, b</span>):*<span class="comment"># greatest integer l such that b**l &lt;= x.*</span></span><br><span class="line">  l = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> x &gt;= b:</span><br><span class="line">    x /= b</span><br><span class="line">    l += <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">n</span>):</span><br><span class="line">  <span class="keyword">for</span> v <span class="keyword">in</span> count(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> primegen():</span><br><span class="line">      e = ilog(isqrt(n), p)</span><br><span class="line">      <span class="keyword">if</span> e == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(e):</span><br><span class="line">        v = mlucas(v, p, n)</span><br><span class="line">      g = gcd(v - <span class="number">2</span>, n)</span><br><span class="line">      if1 &lt; g &lt; n:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(g), <span class="built_in">int</span>(n // g)  *<span class="comment"># g|n*</span></span><br><span class="line">      <span class="keyword">if</span> g == n:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">p1, q1 = attack(n)</span><br><span class="line"><span class="built_in">print</span>(p1)</span><br><span class="line"><span class="built_in">print</span>(q1)</span><br></pre></td></tr></table></figure><p>求出e后直接打就好</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br></pre></td><td class="code"><pre><span class="line">from __future__ import print_function</span><br><span class="line">import time</span><br><span class="line">from Crypto.Util.number import long_to_bytes</span><br><span class="line">from Crypto.PublicKey import RSA</span><br><span class="line"></span><br><span class="line">############################################</span><br><span class="line"></span><br><span class="line"># Config</span><br><span class="line"></span><br><span class="line">##########################################</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">Setting debug to true will display more informations</span><br><span class="line">about the lattice, the bounds, the vectors...</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">debug = False</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">Setting strict to true will stop the algorithm (and</span><br><span class="line">return (-1, -1)) if we don&#x27;t have a correct</span><br><span class="line">upperbound on the determinant. Note that this</span><br><span class="line">doesn&#x27;t necesseraly mean that no solutions</span><br><span class="line">will be found since the theoretical upperbound is</span><br><span class="line">usualy far away from actual results. That is why</span><br><span class="line">you should probably use `strict = False`</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">strict = False</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">This is experimental, but has provided remarkable results</span><br><span class="line">so far. It tries to reduce the lattice as much as it can</span><br><span class="line">while keeping its efficiency. I see no reason not to use</span><br><span class="line">this option, but if things don&#x27;t work, you should try</span><br><span class="line">disabling it</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">helpful_only = True</span><br><span class="line">dimension_min = 7 # stop removing if lattice reaches that dimension</span><br><span class="line"></span><br><span class="line">############################################</span><br><span class="line"></span><br><span class="line"># Functions</span><br><span class="line"></span><br><span class="line">##########################################</span><br><span class="line"></span><br><span class="line"># display stats on helpful vectors</span><br><span class="line"></span><br><span class="line">def helpful_vectors(BB, modulus):</span><br><span class="line">    nothelpful = 0</span><br><span class="line">    for ii in range(BB.dimensions()[0]):</span><br><span class="line">        if BB[ii,ii] &gt;= modulus:</span><br><span class="line">            nothelpful += 1</span><br><span class="line"></span><br><span class="line"># display matrix picture with 0 and X</span><br><span class="line"></span><br><span class="line">def matrix_overview(BB, bound):</span><br><span class="line">    for ii in range(BB.dimensions()[0]):</span><br><span class="line">        a = (&#x27;%02d &#x27; % ii)</span><br><span class="line">        for jj in range(BB.dimensions()[1]):</span><br><span class="line">            a += &#x27;0&#x27; if BB[ii,jj] == 0 else &#x27;X&#x27;</span><br><span class="line">            if BB.dimensions()[0] &lt; 60:</span><br><span class="line">                a += &#x27; &#x27;</span><br><span class="line">        if BB[ii, ii] &gt;= bound:</span><br><span class="line">            a += &#x27;~&#x27;</span><br><span class="line">        print(a)</span><br><span class="line"></span><br><span class="line"># tries to remove unhelpful vectors</span><br><span class="line"></span><br><span class="line"># we start at current = n-1 (last vector)</span><br><span class="line"></span><br><span class="line">def remove_unhelpful(BB, monomials, bound, current):</span><br><span class="line"></span><br><span class="line">    # end of our recursive function</span><br><span class="line"></span><br><span class="line">​    if current == -1 or BB.dimensions()[0] &lt;= dimension_min:</span><br><span class="line">​        return BB</span><br><span class="line"></span><br><span class="line">    # we start by checking from the end</span><br><span class="line"></span><br><span class="line">​    for ii in range(current, -1, -1):</span><br><span class="line"></span><br><span class="line">        # if it is unhelpful:</span><br><span class="line"></span><br><span class="line">​        if BB[ii, ii] &gt;= bound:</span><br><span class="line">​            affected_vectors = 0</span><br><span class="line">​            affected_vector_index = 0</span><br><span class="line"></span><br><span class="line">            # let&#x27;s check if it affects other vectors</span><br><span class="line"></span><br><span class="line">​            for jj in range(ii + 1, BB.dimensions()[0]):</span><br><span class="line"></span><br><span class="line">                # if another vector is affected:</span><br><span class="line"></span><br><span class="line">                # we increase the count</span><br><span class="line"></span><br><span class="line">​                if BB[jj, ii] != 0:</span><br><span class="line">​                    affected_vectors += 1</span><br><span class="line">​                    affected_vector_index = jj</span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">            # level:0</span><br><span class="line"></span><br><span class="line">            # if no other vectors end up affected</span><br><span class="line"></span><br><span class="line">            # we remove it</span><br><span class="line"></span><br><span class="line">​            if affected_vectors == 0:</span><br><span class="line">​                BB = BB.delete_columns([ii])</span><br><span class="line">​                BB = BB.delete_rows([ii])</span><br><span class="line">​                monomials.pop(ii)</span><br><span class="line">​                BB = remove_unhelpful(BB, monomials, bound, ii-1)</span><br><span class="line">​                return BB</span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">            # level:1</span><br><span class="line"></span><br><span class="line">            # if just one was affected we check</span><br><span class="line"></span><br><span class="line">            # if it is affecting someone else</span><br><span class="line"></span><br><span class="line">​            elif affected_vectors == 1:</span><br><span class="line">​                affected_deeper = True</span><br><span class="line">​                for kk in range(affected_vector_index + 1, BB.dimensions()[0]):</span><br><span class="line"></span><br><span class="line">                    # if it is affecting even one vector</span><br><span class="line"></span><br><span class="line">                    # we give up on this one</span><br><span class="line"></span><br><span class="line">​                    if BB[kk, affected_vector_index] != 0:</span><br><span class="line">​                        affected_deeper = False</span><br><span class="line"></span><br><span class="line">                # remove both it if no other vector was affected and</span><br><span class="line"></span><br><span class="line">                # this helpful vector is not helpful enough</span><br><span class="line"></span><br><span class="line">                # compared to our unhelpful one</span><br><span class="line"></span><br><span class="line">​                if affected_deeper and abs(bound - BB[affected_vector_index, affected_vector_index]) &lt; abs(bound - BB[ii, ii]):</span><br><span class="line">​                    print(&quot;* removing unhelpful vectors&quot;, ii, &quot;and&quot;, affected_vector_index)</span><br><span class="line">​                    BB = BB.delete_columns([affected_vector_index, ii])</span><br><span class="line">​                    BB = BB.delete_rows([affected_vector_index, ii])</span><br><span class="line">​                    monomials.pop(affected_vector_index)</span><br><span class="line">​                    monomials.pop(ii)</span><br><span class="line">​                    BB = remove_unhelpful(BB, monomials, bound, ii-1)</span><br><span class="line">​                    return BB</span><br><span class="line"></span><br><span class="line">    # nothing happened</span><br><span class="line"></span><br><span class="line">​    return BB</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot; </span><br><span class="line">Returns:</span><br><span class="line"></span><br><span class="line">* 0,0   if it fails</span><br><span class="line"></span><br><span class="line">* -1,-1 if `strict=true`, and determinant doesn&#x27;t bound</span><br><span class="line"></span><br><span class="line">* x0,y0 the solutions of `pol`</span><br><span class="line">  &quot;&quot;&quot;</span><br><span class="line">  def boneh_durfee(pol, modulus, mm, tt, XX, YY):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Boneh and Durfee revisited by Herrmann and May</span><br><span class="line"></span><br><span class="line">    finds a solution if:</span><br><span class="line"></span><br><span class="line">    * d &lt; N^delta</span><br><span class="line">    * |x| &lt; e^delta</span><br><span class="line">    * |y| &lt; e^0.5</span><br><span class="line">      whenever delta &lt; 1 - sqrt(2)/2 ~ 0.292</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    # substitution (Herrman and May)</span><br><span class="line"></span><br><span class="line">    PR.&lt;u, x, y&gt; = PolynomialRing(ZZ)</span><br><span class="line">    Q = PR.quotient(x*y + 1 - u) # u = xy + 1</span><br><span class="line">    polZ = Q(pol).lift()</span><br><span class="line"></span><br><span class="line">    UU = XX*YY + 1</span><br><span class="line"></span><br><span class="line">    # x-shifts</span><br><span class="line"></span><br><span class="line">    gg = []</span><br><span class="line">    for kk in range(mm + 1):</span><br><span class="line">        for ii in range(mm - kk + 1):</span><br><span class="line">            xshift = x^ii * modulus^(mm - kk) * polZ(u, x, y)^kk</span><br><span class="line">            gg.append(xshift)</span><br><span class="line">    gg.sort()</span><br><span class="line"></span><br><span class="line">    # x-shifts list of monomials</span><br><span class="line"></span><br><span class="line">    monomials = []</span><br><span class="line">    for polynomial in gg:</span><br><span class="line">        for monomial in polynomial.monomials():</span><br><span class="line">            if monomial not in monomials:</span><br><span class="line">                monomials.append(monomial)</span><br><span class="line">    monomials.sort()</span><br><span class="line"></span><br><span class="line">    # y-shifts (selected by Herrman and May)</span><br><span class="line"></span><br><span class="line">    for jj in range(1, tt + 1):</span><br><span class="line">        for kk in range(floor(mm/tt) * jj, mm + 1):</span><br><span class="line">            yshift = y^jj * polZ(u, x, y)^kk * modulus^(mm - kk)</span><br><span class="line">            yshift = Q(yshift).lift()</span><br><span class="line">            gg.append(yshift) # substitution</span><br><span class="line"></span><br><span class="line">    # y-shifts list of monomials</span><br><span class="line"></span><br><span class="line">    for jj in range(1, tt + 1):</span><br><span class="line">        for kk in range(floor(mm/tt) * jj, mm + 1):</span><br><span class="line">            monomials.append(u^kk * y^jj)</span><br><span class="line"></span><br><span class="line">    # construct lattice B</span><br><span class="line"></span><br><span class="line">    nn = len(monomials)</span><br><span class="line">    BB = Matrix(ZZ, nn)</span><br><span class="line">    for ii in range(nn):</span><br><span class="line">        BB[ii, 0] = gg[ii](0, 0, 0)</span><br><span class="line">        for jj in range(1, ii + 1):</span><br><span class="line">            if monomials[jj] in gg[ii].monomials():</span><br><span class="line">                BB[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj](UU,XX,YY)</span><br><span class="line"></span><br><span class="line">    # Prototype to reduce the lattice</span><br><span class="line"></span><br><span class="line">    if helpful_only:</span><br><span class="line"></span><br><span class="line">        # automatically remove</span><br><span class="line"></span><br><span class="line">  ​      BB = remove_unhelpful(BB, monomials, modulus^mm, nn-1)</span><br><span class="line"></span><br><span class="line">        # reset dimension</span><br><span class="line"></span><br><span class="line">  ​      nn = BB.dimensions()[0]</span><br><span class="line">  ​      if nn == 0:</span><br><span class="line">  ​          print(&quot;failure&quot;)</span><br><span class="line">  ​          return 0,0</span><br><span class="line"></span><br><span class="line">    # check if vectors are helpful</span><br><span class="line"></span><br><span class="line">    if debug:</span><br><span class="line">        helpful_vectors(BB, modulus^mm)</span><br><span class="line"></span><br><span class="line">    # check if determinant is correctly bounded</span><br><span class="line"></span><br><span class="line">    det = BB.det()</span><br><span class="line">    bound = modulus^(mm*nn)</span><br><span class="line">    if det &gt;= bound:</span><br><span class="line">        print(&quot;We do not have det &lt; bound. Solutions might not be found.&quot;)</span><br><span class="line">        print(&quot;Try with highers m and t.&quot;)</span><br><span class="line">        if debug:</span><br><span class="line">            diff = (log(det) - log(bound)) / log(2)</span><br><span class="line">            print(&quot;size det(L) - size e^(m*n) = &quot;, floor(diff))</span><br><span class="line">        if strict:</span><br><span class="line">            return -1, -1</span><br><span class="line"></span><br><span class="line">    # display the lattice basis</span><br><span class="line"></span><br><span class="line">    if debug:</span><br><span class="line">        matrix_overview(BB, modulus^mm)</span><br><span class="line"></span><br><span class="line">    # LLL</span><br><span class="line"></span><br><span class="line">    if debug:</span><br><span class="line">        print(&quot;optimizing basis of the lattice via LLL, this can take a long time&quot;)</span><br><span class="line"></span><br><span class="line">    BB = BB.LLL()</span><br><span class="line"></span><br><span class="line">    if debug:</span><br><span class="line">        print(&quot;LLL is done!&quot;)</span><br><span class="line"></span><br><span class="line">    # transform vector i &amp; j -&gt; polynomials 1 &amp; 2</span><br><span class="line"></span><br><span class="line">    if debug:</span><br><span class="line">        print(&quot;looking for independent vectors in the lattice&quot;)</span><br><span class="line">    found_polynomials = False</span><br><span class="line"></span><br><span class="line">    for pol1_idx in range(nn - 1):</span><br><span class="line">        for pol2_idx in range(pol1_idx + 1, nn):</span><br><span class="line"></span><br><span class="line">            # for i and j, create the two polynomials</span><br><span class="line"></span><br><span class="line">  ​          PR.&lt;w,z&gt; = PolynomialRing(ZZ)</span><br><span class="line">  ​          pol1 = pol2 = 0</span><br><span class="line">  ​          for jj in range(nn):</span><br><span class="line">  ​              pol1 += monomials[jj](w*z+1,w,z) * BB[pol1_idx, jj] / monomials[jj](UU,XX,YY)</span><br><span class="line">  ​              pol2 += monomials[jj](w*z+1,w,z) * BB[pol2_idx, jj] / monomials[jj](UU,XX,YY)</span><br><span class="line"></span><br><span class="line">            # resultant</span><br><span class="line"></span><br><span class="line">  ​          PR.&lt;q&gt; = PolynomialRing(ZZ)</span><br><span class="line">  ​          rr = pol1.resultant(pol2)</span><br><span class="line">  ​    </span><br><span class="line"></span><br><span class="line">            # are these good polynomials?</span><br><span class="line"></span><br><span class="line">  ​          if rr.is_zero() or rr.monomials() == [1]:</span><br><span class="line">  ​              continue</span><br><span class="line">  ​          else:</span><br><span class="line">  ​              print(&quot;found them, using vectors&quot;, pol1_idx, &quot;and&quot;, pol2_idx)</span><br><span class="line">  ​              found_polynomials = True</span><br><span class="line">  ​              break</span><br><span class="line">  ​      if found_polynomials:</span><br><span class="line">  ​          break</span><br><span class="line"></span><br><span class="line">    if not found_polynomials:</span><br><span class="line">        print(&quot;no independant vectors could be found. This should very rarely happen...&quot;)</span><br><span class="line">        return 0, 0</span><br><span class="line"></span><br><span class="line">    rr = rr(q, q)</span><br><span class="line"></span><br><span class="line">    # solutions</span><br><span class="line"></span><br><span class="line">    soly = rr.roots()</span><br><span class="line"></span><br><span class="line">    if len(soly) == 0:</span><br><span class="line">        print(&quot;Your prediction (delta) is too small&quot;)</span><br><span class="line">        return 0, 0</span><br><span class="line"></span><br><span class="line">    soly = soly[0][0]</span><br><span class="line">    ss = pol1(q, soly)</span><br><span class="line">    solx = ss.roots()[0][0]</span><br><span class="line"></span><br><span class="line">    #</span><br><span class="line">    return solx, soly</span><br><span class="line"></span><br><span class="line">def example():</span><br><span class="line">    ############################################</span><br><span class="line"></span><br><span class="line">    # How To Use This Script</span><br><span class="line"></span><br><span class="line">​    ##########################################</span><br><span class="line"></span><br><span class="line">​    #</span><br><span class="line"></span><br><span class="line">    # The problem to solve (edit the following values)</span><br><span class="line"></span><br><span class="line">​    #</span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">    # the modulus</span><br><span class="line"></span><br><span class="line">​    N=10037257627154486608196774801095855162090578704439233219876490744017222686494761706171113312036056644757212254824459536550416291797454693336043852190135363;</span><br><span class="line">​    e=6701513605196718137208327145211106525052740242222174201768345944717813148931274437740087428165253744741547590314279846187850432858954606153257994418035341;</span><br><span class="line">​    c=6723803125309437675713195914771839852631361554645954138639198200804046718848872479140347495288135138109762940384847808522874831433140182790750890982139835;</span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">    # the hypothesis on the private exponent (the theoretical maximum is 0.292)</span><br><span class="line"></span><br><span class="line">​    delta = .278 # this means that d &lt; N^delta</span><br><span class="line">​    </span><br><span class="line">​    #</span><br><span class="line"></span><br><span class="line">    # Lattice (tweak those values)</span><br><span class="line"></span><br><span class="line">​    #</span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">    # you should tweak this (after a first run), (e.g. increment it until a solution is found)</span><br><span class="line"></span><br><span class="line">​    m = 11 # size of the lattice (bigger the better/slower)</span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">    # you need to be a lattice master to tweak these</span><br><span class="line"></span><br><span class="line">​    t = int((1-2*delta) * m)  # optimization from Herrmann and May</span><br><span class="line">​    X = 2*floor(N^delta)  # this _might_ be too much</span><br><span class="line">​    Y = floor(N^(1/2))    # correct if p, q are ~ same size</span><br><span class="line">​    </span><br><span class="line">​    #</span><br><span class="line"></span><br><span class="line">    # Don&#x27;t touch anything below</span><br><span class="line"></span><br><span class="line">​    #</span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">    # Problem put in equation</span><br><span class="line"></span><br><span class="line">​    P.&lt;x,y&gt; = PolynomialRing(ZZ)</span><br><span class="line">​    A = int((N+1)/2)</span><br><span class="line">​    pol = 1 + x * (A + y)</span><br><span class="line">​    </span><br><span class="line">​    #</span><br><span class="line"></span><br><span class="line">    # Find the solutions!</span><br><span class="line"></span><br><span class="line">​    #</span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">    # Checking bounds</span><br><span class="line"></span><br><span class="line">​    if debug:</span><br><span class="line">​        print(&quot;=== checking values ===&quot;)</span><br><span class="line">​        print(&quot;* delta:&quot;, delta)</span><br><span class="line">​        print(&quot;* delta &lt; 0.292&quot;, delta &lt; 0.292)</span><br><span class="line">​        print(&quot;* size of e:&quot;, int(log(e)/log(2)))</span><br><span class="line">​        print(&quot;* size of N:&quot;, int(log(N)/log(2)))</span><br><span class="line">​        print(&quot;* m:&quot;, m, &quot;, t:&quot;, t)</span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">    # boneh_durfee</span><br><span class="line"></span><br><span class="line">​    if debug:</span><br><span class="line">​        print(&quot;=== running algorithm ===&quot;)</span><br><span class="line">​        start_time = time.time()</span><br><span class="line">​    </span><br><span class="line">​    solx, soly = boneh_durfee(pol, e, m, t, X, Y)</span><br><span class="line">​    </span><br><span class="line"></span><br><span class="line">    # found a solution?</span><br><span class="line"></span><br><span class="line">​    if solx &gt; 0:</span><br><span class="line">​        d = int(pol(solx, soly) / e)</span><br><span class="line">​        pplusq = int(soly*2)</span><br><span class="line">​        import gmpy2</span><br><span class="line">​        pminusq = gmpy2.iroot(pplusq^2-4*N,2)[0]</span><br><span class="line">​        p = (pplusq + pminusq) // 2</span><br><span class="line">​        q = N // p</span><br><span class="line">​    </span><br><span class="line">​        print(&quot;d =&quot;, d)</span><br><span class="line">​        print(&quot;p =&quot;,p)</span><br><span class="line">​        print(&quot;q =&quot;,q)</span><br><span class="line">​        assert p*q == N</span><br><span class="line">​        m = pow(c,d,N)</span><br><span class="line">​        print(long_to_bytes(int(m))[::-1])</span><br><span class="line">​        ##</span><br><span class="line">​    else:</span><br><span class="line">​        print(&quot;=== no solution was found ===&quot;)</span><br><span class="line">​    </span><br><span class="line">​    if debug:</span><br><span class="line">​        print((&quot;=== %s seconds ===&quot; % (time.time() - start_time)))</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    example()</span><br></pre></td></tr></table></figure><p>easy_rsa</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">1000000000000000000000000000156000000000000000000000000005643</span></span><br><span class="line">c = <span class="number">418535905348643941073541505434424306523376401168593325605206</span></span><br></pre></td></tr></table></figure><p>直接分解n解RSA</p><h2 id="简单编码">简单编码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ABBAABB ABBABAB ABABAAA ABABAAB ABBBBAA ABBAABA ABABBAA ABBAAAA ABBAAAB ABBABAB ABBBAAA ABAABBB ABABBAA ABABABB ABABBAA ABBABBB ABBABAA ABABABA ABAABAB ABBBAAA ABBBABA ABABBAB ABBBBAA ABABBAB ABBBAAA ABBABAB ABBAABA ABABAAA ABABABA AABBAB ABBBABB ABBAABA ABBABAB AABABA ABBBBAA ABBBAAB ABBAABA AABBAB ABABBAA ABBAAAB ABBBAAA ABBABAB ABBABAA ABABABB ABBBABA ABABABB ABBAABB ABBABAA ABBABAB ABBABAB ABABAAA ABBBABA AABABB ABABBAB AABBAB ABABAAA ABBAAAB ABBBBAB ABBBAAA ABABABA ABBAAAA ABABAAB ABABABB ABBABBA ABBABAB AABABA ABBABAA ABBBABA ABBBABA AABBAA ABBBBAA ABBAAAA ABABBBB ABBABAB ABABABB ABAABBB ABBAAAA ABABAAA ABABABB ABBABAA ABBABBA ABABABA ABAABAB ABABABA AABABB ABABBAB ABBBBAA ABBBBAB ABBBAAA ABABAAB ABBABBB ABABAAB ABBAAAA ABAABAB ABBBABB ABBABAA ABBABAB ABABABA ABAABAB ABBBABA ABBAABA AABBAB ABABBAA ABAABAB ABBBAAA ABBABAB ABBBABA ABAABBB ABABBBA ABABABB ABABBAA ABBABBB ABBABAA ABAABAB ABABABA ABBBAAB ABABBAA ABBAABA ABABBAA ABAABAB ABBBAAA ABBABAB ABBABBB ABBBABB ABBBABA ABABBAA ABBABAB ABABABA ABBAABA ABAABAB ABBAABA ABBABBB ABBBAAA ABBAABA ABBBBAA ABBAAAA ABBABAA ABABBAB ABBABAA ABAABBB ABABABA ABABABB ABABABB AABBAB ABBAAAB ABBBBAB ABABABA ABBBABA AABBAB ABABABA ABBABAB ABBBAAB ABBBAAA ABBAAAB ABBBBAA ABBBBAA ABBABAA ABBAABA AABBAB ABBBABA</span><br></pre></td></tr></table></figure><p>先考虑把A换成1，B换成0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="string">&quot;ABBAABB ABBABAB ABABAAA ABABAAB ABBBBAA ABBAABA ABABBAA ABBAAAA ABBAAAB ABBABAB ABBBAAA ABAABBB ABABBAA ABABABB ABABBAA ABBABBB ABBABAA ABABABA ABAABAB ABBBAAA ABBBABA ABABBAB ABBBBAA ABABBAB ABBBAAA ABBABAB ABBAABA ABABAAA ABABABA AABBAB ABBBABB ABBAABA ABBABAB AABABA ABBBBAA ABBBAAB ABBAABA AABBAB ABABBAA ABBAAAB ABBBAAA ABBABAB ABBABAA ABABABB ABBBABA ABABABB ABBAABB ABBABAA ABBABAB ABBABAB ABABAAA ABBBABA AABABB ABABBAB AABBAB ABABAAA ABBAAAB ABBBBAB ABBBAAA ABABABA ABBAAAA ABABAAB ABABABB ABBABBA ABBABAB AABABA ABBABAA ABBBABA ABBBABA AABBAA ABBBBAA ABBAAAA ABABBBB ABBABAB ABABABB ABAABBB ABBAAAA ABABAAA ABABABB ABBABAA ABBABBA ABABABA ABAABAB ABABABA AABABB ABABBAB ABBBBAA ABBBBAB ABBBAAA ABABAAB ABBABBB ABABAAB ABBAAAA ABAABAB ABBBABB ABBABAA ABBABAB ABABABA ABAABAB ABBBABA ABBAABA AABBAB ABABBAA ABAABAB ABBBAAA ABBABAB ABBBABA ABAABBB ABABBBA ABABABB ABABBAA ABBABBB ABBABAA ABAABAB ABABABA ABBBAAB ABABBAA ABBAABA ABABBAA ABAABAB ABBBAAA ABBABAB ABBABBB ABBBABB ABBBABA ABABBAA ABBABAB ABABABA ABBAABA ABAABAB ABBAABA ABBABBB ABBBAAA ABBAABA ABBBBAA ABBAAAA ABBABAA ABABBAB ABBABAA ABAABBB ABABABA ABABABB ABABABB AABBAB ABBAAAB ABBBBAB ABABABA ABBBABA AABBAB ABABABA ABBABAB ABBBAAB ABBBAAA ABBAAAB ABBBBAA ABBBBAA ABBABAA ABBAABA AABBAB ABBBABA&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c=c.replace(<span class="string">&quot;A&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">c=c.replace(<span class="string">&quot;B&quot;</span>,<span class="string">&quot;0&quot;</span>)</span><br><span class="line">bl=c.split()</span><br><span class="line">bits = []</span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> bl:</span><br><span class="line">  bits.append(<span class="built_in">int</span>(b, <span class="number">2</span>))</span><br><span class="line">encoded=<span class="built_in">bytes</span>(bits).decode()</span><br><span class="line"><span class="built_in">print</span>(encoded)</span><br></pre></td></tr></table></figure><p>然后到厨子上解base32</p><p><imgsrc="/img/test_photo/db7b3f36337c794bc213f0ad710a9c65.png" /></p><p>然后再解base64</p><p><imgsrc="/img/test_photo/c2cffdeee63144a1e156413cb49348a2.png" /></p><p>这里看到类似flag的东西</p><p>最后栅栏一下</p><p><imgsrc="/img/test_photo/1cac6a14eca0cdd67d8b110df0f770c0.png" /></p><h2 id="diladilas-cipher">Diladila’s Cipher</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rol</span>(<span class="params">val, r_bits, max_bits=<span class="number">16</span></span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ((val &lt;&lt; r_bits) &amp; (<span class="number">2</span>**max_bits - <span class="number">1</span>)) | (val &gt;&gt; (max_bits - r_bits))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ror</span>(<span class="params">val, r_bits, max_bits=<span class="number">16</span></span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (val &gt;&gt; r_bits) | ((val &lt;&lt; (max_bits - r_bits)) &amp; (<span class="number">2</span>**max_bits - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">speck_round</span>(<span class="params">x, y, k</span>):</span><br><span class="line"></span><br><span class="line">  x = (ror(x, <span class="number">7</span>) + y) &amp; <span class="number">0xFFFF</span></span><br><span class="line"></span><br><span class="line">  x ^= k</span><br><span class="line"></span><br><span class="line">  y = rol(y, <span class="number">2</span>) ^ x</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> x, y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_block</span>(<span class="params">x, y, keys</span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> k <span class="keyword">in</span> keys:</span><br><span class="line"></span><br><span class="line">​    x, y = speck_round(x, y, k)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> x, y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">str_to_blocks</span>(<span class="params">s</span>):</span><br><span class="line"></span><br><span class="line">  b = s.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(b) % <span class="number">4</span> != <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">​    b += <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">4</span> - <span class="built_in">len</span>(b) % <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">  blocks = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(b), <span class="number">4</span>):</span><br><span class="line"></span><br><span class="line">​    x = <span class="built_in">int</span>.from_bytes(b[i:i+<span class="number">2</span>], <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"></span><br><span class="line">​    y = <span class="built_in">int</span>.from_bytes(b[i+<span class="number">2</span>:i+<span class="number">4</span>], <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"></span><br><span class="line">​    blocks.append((x, y))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> blocks</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 这里写明文变量时用占位符，实际加密时请自行替换</span></span><br><span class="line"></span><br><span class="line">plaintext = <span class="string">&quot;***********&quot;</span></span><br><span class="line"></span><br><span class="line">keys = [<span class="number">0x1234</span>, <span class="number">0x5678</span>, <span class="number">0x9abc</span>, <span class="number">0xdef0</span>]</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 组织分组</span></span><br><span class="line"></span><br><span class="line">blocks = str_to_blocks(plaintext)</span><br><span class="line"></span><br><span class="line">ciphertext = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> blocks:</span><br><span class="line"></span><br><span class="line">  cx, cy = encrypt_block(x, y, keys)</span><br><span class="line"></span><br><span class="line">  ciphertext.append((cx, cy))</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 打印密文，供题目发布用</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;加密后的密文:&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> ciphertext:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><p>最搞笑的一集，因为出题人的失误导致前面的一天根本无法解</p><p><code>speck_round()</code>直接逆回去就行了，因为是对称加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rol</span>(<span class="params">val, r_bits, max_bits=<span class="number">16</span></span>):</span><br><span class="line">  <span class="keyword">return</span> ((val &lt;&lt; r_bits) &amp; (<span class="number">2</span> ** max_bits - <span class="number">1</span>)) | (val &gt;&gt; (max_bits - r_bits))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ror</span>(<span class="params">val, r_bits, max_bits=<span class="number">16</span></span>):</span><br><span class="line">  <span class="keyword">return</span> (val &gt;&gt; r_bits) | ((val &lt;&lt; (max_bits - r_bits)) &amp; (<span class="number">2</span> ** max_bits - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">speck_decrypt_round</span>(<span class="params">x_prime, y_prime, k</span>):</span><br><span class="line"> </span><br><span class="line">  x_xor_k = x_prime ^ k</span><br><span class="line">  y_prev = ror((y_prime ^ x_prime), <span class="number">2</span>) </span><br><span class="line">  x_prev = rol((x_xor_k - y_prev) &amp; <span class="number">0xFFFF</span>, <span class="number">7</span>) </span><br><span class="line">  <span class="keyword">return</span> x_prev, y_prev</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_block</span>(<span class="params">x, y, keys</span>):</span><br><span class="line">  <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">reversed</span>(keys): *</span><br><span class="line">    x, y = speck_decrypt_round(x, y, k)</span><br><span class="line">  <span class="keyword">return</span> x, y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">blocks_to_str</span>(<span class="params">blocks</span>):</span><br><span class="line">  byte_arr = <span class="built_in">bytearray</span>()</span><br><span class="line">  <span class="keyword">for</span> x, y <span class="keyword">in</span> blocks:</span><br><span class="line">    byte_arr.extend(x.to_bytes(<span class="number">2</span>, <span class="string">&#x27;little&#x27;</span>))</span><br><span class="line">    byte_arr.extend(y.to_bytes(<span class="number">2</span>, <span class="string">&#x27;little&#x27;</span>))</span><br><span class="line"></span><br><span class="line">  padding_len = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(byte_arr))):</span><br><span class="line">    <span class="keyword">if</span> byte_arr[i] == <span class="number">0</span>:</span><br><span class="line">      padding_len += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">if</span> padding_len &gt; <span class="number">0</span>:</span><br><span class="line">    byte_arr = byte_arr[:-padding_len]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> byte_arr.decode(<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">keys = [<span class="number">0x1234</span>, <span class="number">0x5678</span>, <span class="number">0x9abc</span>, <span class="number">0xdef0</span>]</span><br><span class="line"></span><br><span class="line">cipher_blocks = [(<span class="number">57912</span>, <span class="number">19067</span>), (<span class="number">38342</span>, <span class="number">34089</span>), (<span class="number">16842</span>, <span class="number">41652</span>), (<span class="number">30292</span>, <span class="number">50979</span>), (<span class="number">9137</span>, <span class="number">57458</span>), (<span class="number">29822</span>, <span class="number">64285</span>), (<span class="number">33379</span>, <span class="number">14140</span>), (<span class="number">16514</span>, <span class="number">4653</span>)]</span><br><span class="line">decrypted_blocks = []</span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> cipher_blocks:</span><br><span class="line">  dx, dy = decrypt_block(x, y, keys)</span><br><span class="line">  decrypted_blocks.append((dx, dy))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = blocks_to_str(decrypted_blocks)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="dp">dp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">110231451148882079381796143358970452100202953702391108796134950841737642949460527878714265898036116331356438846901198470479054762675790266666921561175879745335346704648242558094026330525194100460497557690574823790674495407503937159099381516207615786485815588440939371996099127648410831094531405905724333332751</span> </span><br><span class="line">dp = <span class="number">3086447084488829312768217706085402222803155373133262724515307236287352098952292947424429554074367555883852997440538764377662477589192987750154075762783925</span> </span><br><span class="line">c = <span class="number">59325046548488308883386075244531371583402390744927996480498220618691766045737849650329706821216622090853171635701444247741920578127703036446381752396125610456124290112692914728856924559989383692987222821742728733347723840032917282464481629726528696226995176072605314263644914703785378425284460609365608120126</span> </span><br><span class="line">e = <span class="number">65537</span></span><br></pre></td></tr></table></figure><p>dp的泄露，随便找个板子打就好，本来是一血的，后面题目被删了，一血没了(╥﹏╥)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">110231451148882079381796143358970452100202953702391108796134950841737642949460527878714265898036116331356438846901198470479054762675790266666921561175879745335346704648242558094026330525194100460497557690574823790674495407503937159099381516207615786485815588440939371996099127648410831094531405905724333332751</span></span><br><span class="line">dp = <span class="number">3086447084488829312768217706085402222803155373133262724515307236287352098952292947424429554074367555883852997440538764377662477589192987750154075762783925</span></span><br><span class="line">c = <span class="number">59325046548488308883386075244531371583402390744927996480498220618691766045737849650329706821216622090853171635701444247741920578127703036446381752396125610456124290112692914728856924559989383692987222821742728733347723840032917282464481629726528696226995176072605314263644914703785378425284460609365608120126</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,e):  *<span class="comment">#遍历X*</span></span><br><span class="line">  <span class="keyword">if</span> (dp*e - <span class="number">1</span>) % x == <span class="number">0</span>:</span><br><span class="line">    p = (dp*e - <span class="number">1</span>)// x + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n % p == <span class="number">0</span>:</span><br><span class="line">      q = n // p  *<span class="comment">#得到q*</span></span><br><span class="line">      phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)  *<span class="comment">#欧拉函数*</span></span><br><span class="line">      d = gmpy2.invert(e,phi)  *<span class="comment">#求逆元*</span></span><br><span class="line">      m = <span class="built_in">pow</span>(c,d,n) *<span class="comment">#幂取模，m=c^d mod n*</span></span><br><span class="line">      flag = long_to_bytes(m)</span><br><span class="line">      <span class="built_in">print</span>(flag)</span><br><span class="line">      <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="古典密码">古典密码*</h2><p>没做出来</p><h2 id="告白">告白*</h2><p>看其他师傅说是摩尔斯电码里的爱情故事</p><h1 id="帕鲁杯2025">帕鲁杯2025</h1><h2 id="rsa_quartic_quandary">RSA_Quartic_Quandary</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">FLAG = <span class="string">b&#x27;**************&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_parameters</span>(<span class="params">bit_length=<span class="number">512</span></span>):</span><br><span class="line">    p = getPrime(bit_length)</span><br><span class="line">    q = getPrime(bit_length)</span><br><span class="line">    n = p * q</span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, phi)</span><br><span class="line">    s = p ** <span class="number">4</span> + q ** <span class="number">4</span></span><br><span class="line">    <span class="keyword">return</span> n, e, d, s, p, q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    n, e, d, s, p, q = generate_parameters()</span><br><span class="line">    c = <span class="built_in">pow</span>(bytes_to_long(FLAG), e, n)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>\n&quot;</span>)</span><br><span class="line">        f.write(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>\n&quot;</span>)</span><br><span class="line">        f.write(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>\n&quot;</span>)</span><br><span class="line">        f.write(<span class="string">f&quot;s = <span class="subst">&#123;s&#125;</span>\n&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] Parameters saved to output.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>直接解方程即可，题目给出了 <spanclass="math display"><em>s</em> = <em>p</em><sup>4</sup> + <em>q</em><sup>4</sup></span></p><p><spanclass="math display"><em>n</em> = <em>p</em> * <em>q</em></span></p><p>两个未知数，两个方程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">n = 125997816345753096048865891139073286898143461169514858050232837657906289840897974068391106608902082960171083817785532702158298589600947834699494234633846206712414663927142998976208173208829799860130354978308649020815886262453865196867390105038666506017720712272359417586671917060323891124382072599746305448903</span><br><span class="line">e = 65537</span><br><span class="line">c = 16076213508704830809521504161524867240789661063230251272973700316524961511842110066547743812160813341691286895800830395413052502516451815705610447484880112548934311914559776633140762863945819054432492392315491109745915225117227073045171062365772401296382778452901831550773993089344837645958797206220200272941</span><br><span class="line">s = 35935569267272146368441512592153486419244649035623643902985220815940198358146024590300394059909370115858091217597774010493938674472746828352595432824315405933241792789402041405932624651226442192749572918686958461029988244396875361295785103356745756304497466567342796329331150560777052588294638069488836419744297241409127729615544668547101580333420563318486256358906310909703237944327684178950282413703357020770127158209107658407007489563388980582632159120621869165333921661377997970334407786581024278698231418756106787058054355713472306409772260619117725561889350862414726861327985706773512963177174611689685575805282</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">import math</span><br><span class="line">from sympy import *</span><br><span class="line">f1, f2 = symbols(&quot;f1, f2&quot;)</span><br><span class="line">f_solve = solve([f1 * f2 - n, f1 ** 4 + f2 ** 4 - s], [f1, f2])</span><br><span class="line"></span><br><span class="line">print(f_solve)</span><br><span class="line">p = 9886283652121924227364367891763650443585646023924602862402832944457976031272516261452668401020850156092802805016302198750132659632249261237412357024908843</span><br><span class="line">q = 12744709820126371501672538820972733986675228838744099116170499394098621931788837908787562175058998307224041741444921422195431949471972242197577242845982421</span><br><span class="line"></span><br><span class="line">phi = (p-1)*(q-1)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = pow(c,d,n)</span><br><span class="line">print(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"># palu&#123;This_is_a_fake_flag_change_it_for_real_use&#125;</span><br></pre></td></tr></table></figure><h2 id="欧几里得">欧几里得</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">import os</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import lcm, gcd</span><br><span class="line">def exgcd(a, b):</span><br><span class="line">    if b == 0: return 1, 0</span><br><span class="line">    x, y = exgcd(b, a%b)</span><br><span class="line">    return y, x - a//b*y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_k():</span><br><span class="line">    while True:</span><br><span class="line">        p = getPrime(512)</span><br><span class="line">        q = getPrime(512)</span><br><span class="line">        phi = (p - 1) * (q - 1)</span><br><span class="line">        if gcd(p * q, phi) == 1:</span><br><span class="line">            break</span><br><span class="line">    n = p * q</span><br><span class="line">    while True:</span><br><span class="line">        g = random.randint(1, n * n)</span><br><span class="line">        if gcd((g - 1) // n, n) == 1:</span><br><span class="line">            break</span><br><span class="line">    return (n, g), (p, q)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def Paillier_encode(m, g, n):</span><br><span class="line">    while True:</span><br><span class="line">        r = random.randint(1, n - 1)</span><br><span class="line">        if gcd(r, n) == 1:</span><br><span class="line">            break</span><br><span class="line">    return (pow(g, m, n * n) * pow(r, n, n * n)) % (n * n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def Paillier_decode(c, p, q, g, n):</span><br><span class="line">    lam = lcm(p - 1, q - 1)</span><br><span class="line">    mi = exgcd((pow(g, lam, n * n) - 1) // n, n)[0] % n</span><br><span class="line">    return (pow(c, lam, n * n) - 1) // n * mi % n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pk, sk = get_k()</span><br><span class="line">n, g = pk</span><br><span class="line">p, q = sk</span><br><span class="line">m1 = bytes_to_long(flag)</span><br><span class="line">m2 = bytes_to_long(os.urandom(2) * 35)</span><br><span class="line">c1 = Paillier_encode(m1, g, n)</span><br><span class="line">c2 = Paillier_encode(m2, g, n)</span><br><span class="line">print(f&#x27;c = &#123;Paillier_decode(c1 * c2, p, q, g, n)&#125;&#x27;)</span><br><span class="line"></span><br><span class="line"># c = 1426774899479339414711783875769670405758108494041927642533743607154735397076811133205075799614352194241060726689487117802867974494099614371033282640015883625484033889861</span><br></pre></td></tr></table></figure><p>Piallier加密具有加法同态性也就是密文相乘等于明文相加</p><p>这篇<ahref="https://blog.csdn.net/qq_43707926/article/details/122490897">博客</a>里有介绍</p><p>那么<spanclass="math inline"><em>c</em> = <em>m</em>1 + <em>m</em>2</span></p><p>再看到这里的m2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m2 = bytes_to_long(os.urandom(2) * 35)</span><br></pre></td></tr></table></figure><p>用等比数列求和公式来表示 <spanclass="math display"><em>S</em> = （1 + 256<sup>2</sup> + 256<sup>4</sup> + ... + 256<sup>68</sup>）</span></p><p><spanclass="math display"><em>m</em>1 = <em>c</em> = <em>k</em> * <em>S</em></span></p><p>这里爆破k即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">c = <span class="number">1426774899479339414711783875769670405758108494041927642533743607154735397076811133205075799614352194241060726689487117802867974494099614371033282640015883625484033889861</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">geom_factor = (<span class="built_in">pow</span>(<span class="number">256</span>, <span class="number">70</span>) - <span class="number">1</span>) // (<span class="built_in">pow</span>(<span class="number">256</span>, <span class="number">2</span>) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">found = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65536</span>):</span><br><span class="line"></span><br><span class="line">  m2 = s * geom_factor</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> m2 &gt; c:  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">  m1 = c - m2</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">    flag = long_to_bytes(m1)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> flag.isascii() <span class="keyword">and</span> <span class="built_in">len</span>(flag) &lt; <span class="number">100</span>:  </span><br><span class="line">    </span><br><span class="line">      <span class="built_in">print</span>(<span class="string">f&quot;Trying s = <span class="subst">&#123;s&#125;</span>: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span> <span class="string">b&#x27;flag&#123;&#x27;</span> <span class="keyword">in</span> flag:  </span><br><span class="line">    </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Found flag: <span class="subst">&#123;flag.decode()&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">        found = <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">except</span> ValueError:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> found:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Flag not found. Try adjusting the search conditions.&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="易如反掌">易如反掌</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">primes = [(getPrime(<span class="number">1024</span>), getPrime(<span class="number">1024</span>)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">N = [p * q <span class="keyword">for</span> p, q <span class="keyword">in</span> primes]</span><br><span class="line">PHI = [(p**<span class="number">2</span> - <span class="number">1</span>) * (q**<span class="number">2</span> - <span class="number">1</span>) <span class="keyword">for</span> p, q <span class="keyword">in</span> primes]</span><br><span class="line">d = getPrime(<span class="number">800</span>)</span><br><span class="line">flag = <span class="string">&quot;palu&#123;&quot;</span> + hashlib.md5(<span class="built_in">str</span>(d)[].encode()).hexdigest() + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">E = [<span class="built_in">int</span>(gmpy2.invert(d, PHI[i])) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line"><span class="built_in">print</span>(N)</span><br><span class="line"><span class="built_in">print</span>(E)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [23796646026878116589547283793150995927866567938335548416869023482791889761195291718895745055959853934513618760888513821480917766191633897946306199721200583177442944168533218236080466338723721813833112934172813408785753690869328477108925253250272864647989241887047368829689684698870160049332949549671046125158024445929082758264311584669347802324514633164611600348485747482925940752960745308927584754759033237553398957651216385369140164712159020014009858771182426893515016507774993840721603911101735647966838456333878426803669855790758035721418868768618171692143354466457771363078719423863861881209003100274869680348729, 19552522218179875003847447592795537408210008360038264050591506858077823059915495579150792312404199675077331435544143983146080988327453540449160493126531689234464110427289951139790715136775261122038034076109559997394039408007831367922647325571759843192843854522333120187643778356206039403073606561618190519937691323868253954852564110558105862497499849080112804340364976236598384571278659796189204447521325485338769935361453819608921520780103184296098278610439625935404967972315908808657494638735904210709873823527111315139018387713381604550946445856087746716671838144925662314348628830687634437271225081272705532826343, 20588310030910623387356293638800302031856407530120841616298227518984893505166480372963166394317326422544430837759332223527939420321960057410073228508230111170414845403161052128790464277007579491219950440477721075788978767309211469555824310913593208232853272958011299985202799390532181335087622499894389777412111445377637396650710486263652440053717323053536700098339137819966260269752816515681602936416736576044630343136577023173210517247609888936337876211461528203642347119434700140264859102502126842250671976238033270367185358966766106988830596616311824691409766437473419074865115209866730272194297815209976737570183, 18468380817178794606027384089796802449939260582378979728469492439450780893746976934315768186829245395964644992296264093276556001477514083927556578752836255491334765496791841945178275793885002188397918857222419803612711637177559554489679414049308077300718317502586411333302434329130562745942681716547306138457088216901181646333860559988117376012816579422902808478175975263110581667936249474308868051767856694498210084853797453949193117835061402537058150493808371384063278793041752943930928932275052745657700368980150842377283198946138726219378646040515809994704174471793592322237777371900834531014326150160506449286179]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [229904181453273080302209653709086531153804577507365859149808244958841045687064628362978517491609413507875726243121473678430010600891588643092042173698830147997497783886459583186019270582236955524620567373560535686287255124958954671737097645556109314142383275516997850786599322033792080045303427363366927030304214333894247469120513426641296678531965795930756543043851154646310114366477311633838078242963665452936523438928643273392454483600446242320078010627755587492056369779661382734170244060951095344418599686788550312205964136120979823565225768814898285224838691541122088693411388097496320157113230752327025862802020421665288007529320920942060329299409362236414929126050037144149017275031336018100081931062647888329912802477032857776085190828105602067426203163344931483638271679183910241511044338001446584634203146294743522375846913845041274967653508735863706778364499099286484552570083394223973734909997825522191349543295855925973354640349809770822075226834555111927586299176453943116511915434890643239957459427390624136283086434711471863737451011157026905191204496081860277138227247744470804087252965368757930797560277881668806206419629425126031049566579233056222579590529869798537893505779097868221221068867624660759084762471141, 374749619911728044650812367560174497001343067563440477135516664935394734686391543012901514676044211541958613458868769659861216149364768233000844624035620893309356372294598009760824255187442531508754966566917198975934706398309982525100772311586501118200858124845012643495006029930202324305874402291277845166060497038915773767003006049720519011634861166208163030159519901867416488082395270295488885724507937683469910251316231210838654273986152493722244271430422693265608430755620420680629979226285393465423870727975987787149515374769359243334743541460110042872587610309611770320600248289328406805995688596910226273861759369388105641549933915686192055533242723330981192183310876306968103333706140401422550917946410378174896274789619184565321544130428008804628699594759946577979319393247067750024729672029363433673084437510430506410293512293930056667971242862448029841846596288648691077795207341975907335202945548990662460491169957175452745622341245617265849042542964819126377775749222973138584978725470886059043251544634105653274564085280013340679259157119014619894553239015777411757887293044706448625760604242512494466386343040583010961386979963779928616733980046763291988848903515836247301007113187121999960487508948748354549628160741, 111738429639840672983162926852338651562094139707285850255632987705635459657893186493838711733560515475806567653354737245246745810892238414756414117557971683747269900627524702653772058841085258035513296218047505149691384287812041721130367506731427022265277885965948486359682023555050085264531256406043361391744086539522028829421284667293339869140564699750714145488199268791908205712660933607330454849730499840287271163350865799682565216636393526339218836244889719975150503253630419647851422620890082315396457329065508602521784001607236788620811397449483104884860551374031790663030220424841642241965983726516537123807061999084476076850833658360594525986997125319941689903869138176347916707622148840226672408554102717625456819726220575710494929111642866840516339713870850732638906870325693572445316904688582043485093120585767903009745325497085286577015692005747499504730575062998090846463157669448943725039951120963375521054164657547731579771203443617489609201617736584055562887243883898406182052632245189418568410854530995044542628531851356363297989653392057214167031332353949367816700838296651167799441279086074308299608106786918676697564002641234952760724731325383088682051108589283162705846714876543662335188222683115878319143239781, 185935167438248768027713217055147583431480103445262049361952417166499278728434926508937684304985810617277398880507451351333771783039360671467147075085417403764439214700549777320094501151755362122677245586884124615115132430034242191429064710012407308619977881929109092467325180864745257810774684549914888829203014922855369708286801194645263982661023515570231007900615244109762444081806466412714045462184361892356485713147687194230341085490571821445962465385514845915484336766973332384198790601633964078447446832581798146300515184339036127604597014458389481920870330726947546808739829589808006774479656385317205167932706748974482578749055876192429032258189528408353619365693624106394913101463023497175917598944803733849984703912670992613579847331081015979121834040110652608301633876167262248103403520536210279949844194696898862249482809107840303473964914083996538912970715834110371196970613332286296427286356036576876121010776933023901744994067564045429384172315640135483480089769992730928266885675143187679290648773060781987273082229827156531141515679114580622348238382074084270808291251400949744720804368426414308355267344210055608246286737478682527960260877955900464059404976906697164610891962198768354924180929300959036213841843941]</span></span><br></pre></td></tr></table></figure><p>可以根据<ahref="https://ijcsi.org/papers/IJCSI-9-2-1-311-314.pdf">论文</a>来实现攻击</p><p>这里要构造的格是 <span class="math display">$$L = \begin{pmatrix}M^2 &amp; e_0 &amp; e_1 &amp; e_2 &amp; e_3 \\0 &amp; -n_0^2 &amp; 0 &amp; 0 &amp; 0 \\0 &amp; 0 &amp; -n_1^2 &amp; 0 &amp; 0 \\0 &amp; 0 &amp; 0 &amp; -n_2^2 &amp; 0 \\0 &amp; 0 &amp; 0 &amp; 0 &amp; -n_3^2 \\\end{pmatrix}$$</span> 这里我是用另一种办法写的</p><p>我们这里需要求出的是d <spanclass="math display"><em>e</em><em>d</em> ≡ 1 mod  (<em>p</em><sup>2</sup> − 1)(<em>q</em><sup>2</sup> − 1)</span></p><p><spanclass="math display"><em>e</em><em>d</em> = 1 + <em>k</em>(<em>p</em><sup>2</sup> − 1)(<em>q</em><sup>2</sup> − 1)</span></p><p>因为这里的p，q都很大，所以 <spanclass="math display"><em>p</em><sup>2</sup> − 1 ≈ <em>p</em><sup>2</sup></span></p><p><spanclass="math display"><em>q</em><sup>2</sup> − 1 ≈ <em>q</em><sup>2</sup></span></p><p>同除<spanclass="math inline"><em>d</em> * <em>n</em><sup>3</sup></span> <spanclass="math display">$$\frac{e}{n^{2}} =\frac{k}{d}+\frac{1}{d*n^{2}}$$</span> <span class="math display">$$\frac{e}{n^{2}} \approx \frac{k}{d}$$</span> 然后连分数展开求<spanclass="math inline">（<em>p</em><sup>2</sup> − 1）(<em>q</em><sup>2</sup> − 1)</span></p><p>联立n=p*q</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">from tqdm import *</span><br><span class="line"></span><br><span class="line">N=[23796646026878116589547283793150995927866567938335548416869023482791889761195291718895745055959853934513618760888513821480917766191633897946306199721200583177442944168533218236080466338723721813833112934172813408785753690869328477108925253250272864647989241887047368829689684698870160049332949549671046125158024445929082758264311584669347802324514633164611600348485747482925940752960745308927584754759033237553398957651216385369140164712159020014009858771182426893515016507774993840721603911101735647966838456333878426803669855790758035721418868768618171692143354466457771363078719423863861881209003100274869680348729, 19552522218179875003847447592795537408210008360038264050591506858077823059915495579150792312404199675077331435544143983146080988327453540449160493126531689234464110427289951139790715136775261122038034076109559997394039408007831367922647325571759843192843854522333120187643778356206039403073606561618190519937691323868253954852564110558105862497499849080112804340364976236598384571278659796189204447521325485338769935361453819608921520780103184296098278610439625935404967972315908808657494638735904210709873823527111315139018387713381604550946445856087746716671838144925662314348628830687634437271225081272705532826343, 20588310030910623387356293638800302031856407530120841616298227518984893505166480372963166394317326422544430837759332223527939420321960057410073228508230111170414845403161052128790464277007579491219950440477721075788978767309211469555824310913593208232853272958011299985202799390532181335087622499894389777412111445377637396650710486263652440053717323053536700098339137819966260269752816515681602936416736576044630343136577023173210517247609888936337876211461528203642347119434700140264859102502126842250671976238033270367185358966766106988830596616311824691409766437473419074865115209866730272194297815209976737570183, 18468380817178794606027384089796802449939260582378979728469492439450780893746976934315768186829245395964644992296264093276556001477514083927556578752836255491334765496791841945178275793885002188397918857222419803612711637177559554489679414049308077300718317502586411333302434329130562745942681716547306138457088216901181646333860559988117376012816579422902808478175975263110581667936249474308868051767856694498210084853797453949193117835061402537058150493808371384063278793041752943930928932275052745657700368980150842377283198946138726219378646040515809994704174471793592322237777371900834531014326150160506449286179]</span><br><span class="line"></span><br><span class="line">E=[229904181453273080302209653709086531153804577507365859149808244958841045687064628362978517491609413507875726243121473678430010600891588643092042173698830147997497783886459583186019270582236955524620567373560535686287255124958954671737097645556109314142383275516997850786599322033792080045303427363366927030304214333894247469120513426641296678531965795930756543043851154646310114366477311633838078242963665452936523438928643273392454483600446242320078010627755587492056369779661382734170244060951095344418599686788550312205964136120979823565225768814898285224838691541122088693411388097496320157113230752327025862802020421665288007529320920942060329299409362236414929126050037144149017275031336018100081931062647888329912802477032857776085190828105602067426203163344931483638271679183910241511044338001446584634203146294743522375846913845041274967653508735863706778364499099286484552570083394223973734909997825522191349543295855925973354640349809770822075226834555111927586299176453943116511915434890643239957459427390624136283086434711471863737451011157026905191204496081860277138227247744470804087252965368757930797560277881668806206419629425126031049566579233056222579590529869798537893505779097868221221068867624660759084762471141, 374749619911728044650812367560174497001343067563440477135516664935394734686391543012901514676044211541958613458868769659861216149364768233000844624035620893309356372294598009760824255187442531508754966566917198975934706398309982525100772311586501118200858124845012643495006029930202324305874402291277845166060497038915773767003006049720519011634861166208163030159519901867416488082395270295488885724507937683469910251316231210838654273986152493722244271430422693265608430755620420680629979226285393465423870727975987787149515374769359243334743541460110042872587610309611770320600248289328406805995688596910226273861759369388105641549933915686192055533242723330981192183310876306968103333706140401422550917946410378174896274789619184565321544130428008804628699594759946577979319393247067750024729672029363433673084437510430506410293512293930056667971242862448029841846596288648691077795207341975907335202945548990662460491169957175452745622341245617265849042542964819126377775749222973138584978725470886059043251544634105653274564085280013340679259157119014619894553239015777411757887293044706448625760604242512494466386343040583010961386979963779928616733980046763291988848903515836247301007113187121999960487508948748354549628160741, 111738429639840672983162926852338651562094139707285850255632987705635459657893186493838711733560515475806567653354737245246745810892238414756414117557971683747269900627524702653772058841085258035513296218047505149691384287812041721130367506731427022265277885965948486359682023555050085264531256406043361391744086539522028829421284667293339869140564699750714145488199268791908205712660933607330454849730499840287271163350865799682565216636393526339218836244889719975150503253630419647851422620890082315396457329065508602521784001607236788620811397449483104884860551374031790663030220424841642241965983726516537123807061999084476076850833658360594525986997125319941689903869138176347916707622148840226672408554102717625456819726220575710494929111642866840516339713870850732638906870325693572445316904688582043485093120585767903009745325497085286577015692005747499504730575062998090846463157669448943725039951120963375521054164657547731579771203443617489609201617736584055562887243883898406182052632245189418568410854530995044542628531851356363297989653392057214167031332353949367816700838296651167799441279086074308299608106786918676697564002641234952760724731325383088682051108589283162705846714876543662335188222683115878319143239781, 185935167438248768027713217055147583431480103445262049361952417166499278728434926508937684304985810617277398880507451351333771783039360671467147075085417403764439214700549777320094501151755362122677245586884124615115132430034242191429064710012407308619977881929109092467325180864745257810774684549914888829203014922855369708286801194645263982661023515570231007900615244109762444081806466412714045462184361892356485713147687194230341085490571821445962465385514845915484336766973332384198790601633964078447446832581798146300515184339036127604597014458389481920870330726947546808739829589808006774479656385317205167932706748974482578749055876192429032258189528408353619365693624106394913101463023497175917598944803733849984703912670992613579847331081015979121834040110652608301633876167262248103403520536210279949844194696898862249482809107840303473964914083996538912970715834110371196970613332286296427286356036576876121010776933023901744994067564045429384172315640135483480089769992730928266885675143187679290648773060781987273082229827156531141515679114580622348238382074084270808291251400949744720804368426414308355267344210055608246286737478682527960260877955900464059404976906697164610891962198768354924180929300959036213841843941]</span><br><span class="line"></span><br><span class="line">n =N[0] </span><br><span class="line"></span><br><span class="line">e = E[0]</span><br><span class="line"></span><br><span class="line">cf = continued_fraction(Integer(e) / Integer(n^2))</span><br><span class="line"></span><br><span class="line">for i in trange(2,2000):</span><br><span class="line"></span><br><span class="line">   k = int(cf.numerator(i))    #取连分数的分子</span><br><span class="line"></span><br><span class="line">   d = int(cf.denominator(i))</span><br><span class="line"></span><br><span class="line">   if (e*d - 1)%k == 0:</span><br><span class="line"></span><br><span class="line"> print(f&quot;k = &#123;k&#125;&quot;)</span><br><span class="line"></span><br><span class="line"> print(f&quot;d = &#123;d&#125;&quot;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后md5加密d即可</p><h2 id="循环锁链">循环锁链</h2><p>拿到数据直接异或就好</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cipher = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;110D190E122A7442312B2500070C163927210300280D2720262C19000C3B0439221952440D&quot;</span>)</span><br><span class="line"></span><br><span class="line">plain = [<span class="number">0x70</span>]  <span class="comment"># &#x27;p&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line"></span><br><span class="line">  plain.append(cipher[i] ^ plain[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(plain).decode())</span><br></pre></td></tr></table></figure><h2 id="轮回密码">轮回密码</h2><p>轮回密文: y¦_6&gt;X¬y!,!n¡mSaÜñüë9¼6</p><p>后面放hint给了加密脚本和key</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line"></span><br><span class="line">def samsara_decrypt(cipher_text, key_word=b&quot;&quot;):</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    if not key_word:</span><br><span class="line">        phase3 = cipher_text.encode(&#x27;latin-1&#x27;)  </span><br><span class="line">    else:</span><br><span class="line">        cipher_bytes = cipher_text.encode(&#x27;latin-1&#x27;)</span><br><span class="line">        phase3 = bytes([cipher_bytes[i] ^ key_word[i % len(key_word)] for i in range(len(cipher_bytes))])</span><br><span class="line"></span><br><span class="line">    cycle_step = len(key_word) % 6 + 1 if key_word else 1  </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    phase2 = bytes([((c &lt;&lt; cycle_step) | (c &gt;&gt; (8 - cycle_step))) &amp; 0xFF for c in phase3])</span><br><span class="line"></span><br><span class="line">    # Base85 解码</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        phase1 = base64.b85decode(phase2)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(&quot;Base85 解码失败:&quot;, e)</span><br><span class="line">        return None</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    original = bytes([((c &lt;&lt; cycle_step) | (c &gt;&gt; (8 - cycle_step))) &amp; 0xFF for c in phase1])</span><br><span class="line"></span><br><span class="line">    return original</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    cipher_text = &quot;y¦_6&gt;X¬y!,!n¡mSaÜñüë9¼6&quot;</span><br><span class="line">    key = b&quot;Bore&quot;  </span><br><span class="line">    </span><br><span class="line">    decrypted = samsara_decrypt(cipher_text, key)</span><br><span class="line">    print(&quot;解密结果:&quot;, decrypted)</span><br></pre></td></tr></table></figure><h2 id="星际广播站">星际广播站*</h2><h2 id="文件查看器">文件查看器*</h2>]]></content>
      
      
      <categories>
          
          <category> Wp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>New Year CTF 2025</title>
      <link href="/2025/05/15/New%20Year%20CTF2025/"/>
      <url>/2025/05/15/New%20Year%20CTF2025/</url>
      
        <content type="html"><![CDATA[<p>复现一下西电平台的题目</p><h1 id="see-you-again">See you again</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">from random import*</span><br><span class="line"></span><br><span class="line">import string</span><br><span class="line"></span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">from sage.all import*</span><br><span class="line"></span><br><span class="line">flag = b&#x27;flag&#123;XXXXXXXXXXXXX&#125;&#x27;</span><br><span class="line"></span><br><span class="line">ext_len = 4*23 - len(flag)</span><br><span class="line"></span><br><span class="line">flag += &#x27;&#x27;.join(choice(string.printable) for _ in range(ext_len))</span><br><span class="line"></span><br><span class="line">def my_rsa_encrypt():</span><br><span class="line"></span><br><span class="line">  p = getPrime(512)</span><br><span class="line"></span><br><span class="line">  q = getPrime(512)</span><br><span class="line"></span><br><span class="line">  n = p * q</span><br><span class="line"></span><br><span class="line">  data = []</span><br><span class="line"></span><br><span class="line">  for i in range(4):</span><br><span class="line"></span><br><span class="line">    data.append(bytes_to_long(flag[23*i:23*(i+1)].encode()))</span><br><span class="line"></span><br><span class="line">  M = Matrix(Zmod(n), [data[i:i+2] for i in range(0, len(data), 2)])</span><br><span class="line"></span><br><span class="line">  e = 65537</span><br><span class="line"></span><br><span class="line">  C = M**e</span><br><span class="line"></span><br><span class="line">  x1=randint(0,2**11)</span><br><span class="line"></span><br><span class="line">  y1=randint(0,2**114)</span><br><span class="line"></span><br><span class="line">  x2=randint(0,2**11)</span><br><span class="line"></span><br><span class="line">  y2=randint(0,2**514)</span><br><span class="line"></span><br><span class="line">  hint1=x1*p+y1*q</span><br><span class="line"></span><br><span class="line">  hint2=x2*p+y2*q</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  print(&quot;hint1 =&quot;, hint1)</span><br><span class="line"></span><br><span class="line">  print(&quot;hint2 =&quot;, hint2)</span><br><span class="line"></span><br><span class="line">  print(&quot;n =&quot;, n)</span><br><span class="line"></span><br><span class="line">  return C</span><br><span class="line"></span><br><span class="line">C = my_rsa_encrypt()</span><br><span class="line"></span><br><span class="line">print(&quot;C =&quot;, C)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">hint1 = 168265279404811256277233395102642358475458409482403711393035752197600859883963939768385846094966123277287664746626323932557461116229847433749541823928128333856483359321776317487696165625065</span><br><span class="line"></span><br><span class="line">hint2 = 388525731960756845976560311958832822501361876609762739131361346349184345486942393347353228412856257245501810230005909157804781984160852691049705221909148849268628655156230494562410040271685185427100514456092002902461455124227295965928975113228265630904429459035860216889967825964526267040037892094324439719411</span><br><span class="line"></span><br><span class="line">n = 73072541902206871020737492238712393160727227031674788366854370087046494314953414149210811810993251599137993812618059430654795580640655927531189983107761278404614174799313759634478308102715209502959314132742690028687179640727016334879648957747421327650216141691465903844138851357328611067635106605344718049129</span><br><span class="line"></span><br><span class="line">C = [ 6310748775703051581154234569431184868982413857734351142080359008436987630184616677942361392389551047027017330071293367514311142151815936199483256586417636348041649876709276752266778499479183523443148337562720814581572407854278542331966812940447535783779656684256297221348716866635101085755860498353339242115  5144330870923367619389647825281339367482009106753859407075628907488466365472218688907933875894666639770145465222088465870419295906638236631404037390832689261596431619354248820909813429665843949224111735121883894006720533494334946354541598413794931072951879543749090953489715640123785787585906571296066228337]</span><br><span class="line"></span><br><span class="line">[33291873086307192132352453738238356328226272776193653137970607851693478963529798496768193693023879049338380362901921264407689229849253505523956752578525472920304538365514116510285387059498125392190213470841105539220357787132908727038425638513550855537375794144340611979256932750425138088529265202217417349326  8710391985351492354130113806218295166875250333985231739921757023007679201614662002300751925094702862907693146762459566351810351082709246293390023137646644466382528873636039529534916744087376534336847024714465012051303713158199842172134865427319373041223732135032837752292040371239661190751800891412327395907]</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>这里拿到题目先观察加密方式</p><p>这里我们发现是矩阵RSA，这里是将明文分为四段放入矩阵当中</p><p>这里先贴个<ahref="https://www.gcsu.edu/sites/files/page-assets/node-808/attachments/pangia.pdf">论文</a></p><p>要想知道具体的加密过程就要先了解什么是一般线性群</p><p><imgsrc="/img/test_photo/8a1c4bcd350b678ab44865a4f82d0b96.png" /></p><p>单位矩阵 I 属于 <spanclass="math inline"><em>G</em><em>L</em><sub><em>s</em></sub>(ℤ<sub><em>n</em></sub>)</span>，矩阵乘法满足结合律，矩阵行列式与<span class="math inline"><em>n</em></span> 互质即 <spanclass="math inline"><em>G</em><em>L</em><sub><em>s</em></sub>(ℤ<sub><em>n</em></sub>)</span>中每一个元素都有乘法逆元，所以构成一个群。</p><p>那么要想解密也很容易</p><p>只要求出d <spanclass="math display"><em>C</em><sup><em>d</em></sup> = <em>m</em> mod  (<em>n</em>)</span>那么这里d要怎么求</p><p><imgsrc="/img/test_photo/61807a98b7f9ce8a039b068fb1680aeb.png" /></p><p>论文中给出了明确的求法，我们phi不再是之前了而是<spanclass="math inline">（<em>p</em><sup>2</sup> − 1）(<em>p</em><sup>2</sup> − <em>p</em>)(<em>q</em><sup>2</sup> − 1)(<em>q</em><sup>2</sup> − <em>q</em>)</span></p><p>那么现在我们要求的是p,q了</p><p>但是对于这题来说有个小小的非预期，phi好像怎么取值都行，原本我的理解是M的阶刚好是<spanclass="math inline">（<em>p</em> − 1）（<em>q</em> − 1）</span></p><p>但是，这里真的好像取啥都行，问了其他师傅，说是数据给的有问题</p><p>回到题目我们要怎么求p,q呢</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x1=randint(0,2**11)</span><br><span class="line"></span><br><span class="line">y1=randint(0,2**114)</span><br><span class="line"></span><br><span class="line">x2=randint(0,2**11)</span><br><span class="line"></span><br><span class="line">y2=randint(0,2**514)</span><br><span class="line"></span><br><span class="line">hint1=x1*p+y1*q</span><br><span class="line"></span><br><span class="line">hint2=x2*p+y2*q</span><br></pre></td></tr></table></figure><p>这里还是很简单的</p><p>我们会发现x1，x2都不是很大，那么可以选择爆破</p><p>将第一式乘x2，第二式乘x1</p><p><span class="math display">$$hint1*x_{2}=x_{2}*(x_{1}*p+y_{1}*q) \\hint2*x_{1}=x_{1}*(x_{2}*p+y_{2}*q)$$</span></p><p>现在再将两式相减</p><p><spanclass="math display"><em>h</em><em>i</em><em>n</em><em>t</em>1 * <em>x</em><sub>2</sub> − <em>h</em><em>i</em><em>n</em><em>t</em>2 * <em>x</em><sub>1</sub> = (<em>x</em><sub>1</sub><em>y</em><sub>2</sub> − <em>x</em><sub>2</sub><em>y</em><sub>1</sub>)<em>q</em></span></p><p>即</p><p><spanclass="math display"><em>A</em> = <em>B</em><em>q</em></span></p><p>那么接下来只要做个gcd就可以得到q了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">73072541902206871020737492238712393160727227031674788366854370087046494314953414149210811810993251599137993812618059430654795580640655927531189983107761278404614174799313759634478308102715209502959314132742690028687179640727016334879648957747421327650216141691465903844138851357328611067635106605344718049129</span></span><br><span class="line"></span><br><span class="line">hint1 = <span class="number">168265279404811256277233395102642358475458409482403711393035752197600859883963939768385846094966123277287664746626323932557461116229847433749541823928128333856483359321776317487696165625065</span></span><br><span class="line"></span><br><span class="line">hint2 = <span class="number">388525731960756845976560311958832822501361876609762739131361346349184345486942393347353228412856257245501810230005909157804781984160852691049705221909148849268628655156230494562410040271685185427100514456092002902461455124227295965928975113228265630904429459035860216889967825964526267040037892094324439719411</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">11</span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">11</span>):</span><br><span class="line"></span><br><span class="line">    temp = hint1  * i - hint2  * j</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> gmpy2.gcd(temp,n) != <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">      p = gmpy2.gcd(temp,n)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> n % p ==<span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">        q = n // p</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;p=&quot;</span>,p)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;q=&quot;</span>,q)</span><br></pre></td></tr></table></figure><p>加下来就是恢复M了，上面也说过了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line"></span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">n = 73072541902206871020737492238712393160727227031674788366854370087046494314953414149210811810993251599137993812618059430654795580640655927531189983107761278404614174799313759634478308102715209502959314132742690028687179640727016334879648957747421327650216141691465903844138851357328611067635106605344718049129</span><br><span class="line"></span><br><span class="line">p = 9840199651059680279315545552078195603933414815185149988850805053207130958990873093781755127037056517374437691746406285746154497813695817556539648065445111</span><br><span class="line"></span><br><span class="line">q = 7425920661511961227328493926307082700428726975369330043535693658853751767178547931292974567810134212365247300045094600690928968177216378782623096259591839</span><br><span class="line"></span><br><span class="line">C = Matrix(Zmod(n), [</span><br><span class="line"></span><br><span class="line">  [6310748775703051581154234569431184868982413857734351142080359008436987630184616677942361392389551047027017330071293367514311142151815936199483256586417636348041649876709276752266778499479183523443148337562720814581572407854278542331966812940447535783779656684256297221348716866635101085755860498353339242115, </span><br><span class="line"></span><br><span class="line">   5144330870923367619389647825281339367482009106753859407075628907488466365472218688907933875894666639770145465222088465870419295906638236631404037390832689261596431619354248820909813429665843949224111735121883894006720533494334946354541598413794931072951879543749090953489715640123785787585906571296066228337],</span><br><span class="line"></span><br><span class="line">  [33291873086307192132352453738238356328226272776193653137970607851693478963529798496768193693023879049338380362901921264407689229849253505523956752578525472920304538365514116510285387059498125392190213470841105539220357787132908727038425638513550855537375794144340611979256932750425138088529265202217417349326, </span><br><span class="line"></span><br><span class="line">   8710391985351492354130113806218295166875250333985231739921757023007679201614662002300751925094702862907693146762459566351810351082709246293390023137646644466382528873636039529534916744087376534336847024714465012051303713158199842172134865427319373041223732135032837752292040371239661190751800891412327395907]</span><br><span class="line"></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">e = 65537</span><br><span class="line"></span><br><span class="line">\#phi=(p^2-1)*(p^2-p)*(q^2-1)*(q^2-q)</span><br><span class="line"></span><br><span class="line">phi=(p-1)*(q-1)</span><br><span class="line"></span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line"></span><br><span class="line">M = C**d</span><br><span class="line"></span><br><span class="line">m = b&#x27;&#x27;.join(long_to_bytes(int(y)) for x in M for y in x)</span><br><span class="line"></span><br><span class="line">print(m)</span><br></pre></td></tr></table></figure><h1 id="hnnnnnp">hnnnnnp</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">flag = b&#x27;flag&#123;XXXXXXXXXXXXXXXX&#125;&#x27;</span><br><span class="line"></span><br><span class="line">len(bin(bytes_to_long(flag))) = 241 </span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">q = getPrime(256)</span><br><span class="line"></span><br><span class="line">A = []</span><br><span class="line"></span><br><span class="line">B = []</span><br><span class="line"></span><br><span class="line">for i in range(40):</span><br><span class="line"></span><br><span class="line">  a = getRandomInteger(256)</span><br><span class="line"></span><br><span class="line">  A.append(a)</span><br><span class="line"></span><br><span class="line">  b = (a * m % q) &gt;&gt; 246</span><br><span class="line"></span><br><span class="line">  B.append(b)</span><br><span class="line"></span><br><span class="line">print(&#x27;q = &#x27;,q)</span><br><span class="line"></span><br><span class="line">print(&#x27;A = &#x27;,A)</span><br><span class="line"></span><br><span class="line">print(&#x27;B = &#x27;,B)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">q =  79114087378317225954892022480252117763918921251508274813632988119040558081957</span><br><span class="line"></span><br><span class="line">A =  [99293334762228409415871581396212237412953404357126780770028017803413316507688, 2500480840704745075911410946123687629524432551367413638642986009358154787372, 80685558004752117053336613030689142016338319732790152841247856882805636400967, 63290001864400721248272352929255137611989584118097077958408567982128698234534, 5048332633026992532834890641901394670789207101467603380531070147563959907435, 98345158033169941273559370561319923206165641360286918926165722533747367869044, 91661185592644662634101002232848898241014068680383461946834577089141708799408, 35883539106260317692857231527467938791115349400928738495153295603754797497003, 18850448551910645282253407416422777216080885714433351260880371928669115264186, 86803241348387239192288300857910031249784969059106976374312551858268245857442, 113779438160927993654998705272524709206271659504623230967447802327094495796781, 13735459600754846538171144203957927429136626155419829429669861649940998894997, 46280418602037825886010980190704083111219707606955301840430515744873877438775, 16278994219375932354158092674595809845774952941618307320565305777822420450943, 74927876286842101149511766920644259934347532918716712290257161737641674460298, 42178202650652528099749516560693500619443362792978884623518490495115906200316, 19151047172626938357474963053807928227857518257319920099967861099963796480418, 21787599078683620242310742514553440060243832982887133694157543001440264793591, 34075119848054572416068714633191349442086346533132115388443988285733183568037, 70884300905035090978863770641828348559532542870751550058652309789615992321329, 56638844602601914284538086316463617187093124581243824454129547501609966433533, 63173126643011517652232352750442686295089111186360350917063529989062125715462, 28513769949842169592533398466043837164454663770876296609570694346056935679972, 78576986164864622274471458294234572339552498559596959190642129314202635344362, 29040128818027182812085632623851615750950738459702000094747611239508626643986, 24643036623783907525543153714744708140593035044888678308137488533907283671880, 114371475713932020306500291701047080632524480018017816508069308216548075509192, 41900448697162816841352108181063898351906757401259309332438722605718438845658, 54568329635023979120173438773482273886435623791438511491045655663987235054396, 75001704264552278370093948911424867598236273326722937206696873331699786435512, 26706895892299062149149150389452432539968783870299486337639175716389699841556, 97377367425189290583063973155451138814295009389822857196761177411699410905996, 1232863831096632130472661739812011549745300164338793700648153670333514662537, 26269418325008581770232430581427109657764847410045079633943766642502404580438, 24030674773281787758235075763804799489668709537838088140878504368601473605962, 86811629367335760989061373668208214074416802123960391077272719421979492321722, 4705372930912236219640794828821928446476233836995906942068634486045889421427, 3780622760283474933545118612904995151472952554666209520142018462683489410492, 32331832055598312449459015904562983681658454867302312991024083766727098901481, 82703349291431759834259791616748332088687686947094717519824850606996211446209]</span><br><span class="line"></span><br><span class="line">B =  [644, 397, 406, 577, 263, 595, 180, 125, 492, 64, 15, 521, 303, 244, 481, 338, 323, 410, 562, 344, 117, 43, 171, 381, 300, 4, 427, 163, 141, 315, 454, 163, 197, 282, 650, 690, 5, 598, 355, 352]</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><p>第一眼以为是简单的hnp，但是仔细观察后发现并没有那么简单，题目中泄露的是高10位</p><p>那么肯定是要构造格的</p><p>具体的过程就不说了</p><p>鸡块师傅<ahref="https://tangcuxiaojikuai.xyz/post/9b40da15.html">博客</a>有讲过类似的，他说的肯定比我好</p><p>这里贴我自己的exp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">A =  [99293334762228409415871581396212237412953404357126780770028017803413316507688, 2500480840704745075911410946123687629524432551367413638642986009358154787372, 80685558004752117053336613030689142016338319732790152841247856882805636400967, 63290001864400721248272352929255137611989584118097077958408567982128698234534, 5048332633026992532834890641901394670789207101467603380531070147563959907435, 98345158033169941273559370561319923206165641360286918926165722533747367869044, 91661185592644662634101002232848898241014068680383461946834577089141708799408, 35883539106260317692857231527467938791115349400928738495153295603754797497003, 18850448551910645282253407416422777216080885714433351260880371928669115264186, 86803241348387239192288300857910031249784969059106976374312551858268245857442, 113779438160927993654998705272524709206271659504623230967447802327094495796781, 13735459600754846538171144203957927429136626155419829429669861649940998894997, 46280418602037825886010980190704083111219707606955301840430515744873877438775, 16278994219375932354158092674595809845774952941618307320565305777822420450943, 74927876286842101149511766920644259934347532918716712290257161737641674460298, 42178202650652528099749516560693500619443362792978884623518490495115906200316, 19151047172626938357474963053807928227857518257319920099967861099963796480418, 21787599078683620242310742514553440060243832982887133694157543001440264793591, 34075119848054572416068714633191349442086346533132115388443988285733183568037, 70884300905035090978863770641828348559532542870751550058652309789615992321329, 56638844602601914284538086316463617187093124581243824454129547501609966433533, 63173126643011517652232352750442686295089111186360350917063529989062125715462, 28513769949842169592533398466043837164454663770876296609570694346056935679972, 78576986164864622274471458294234572339552498559596959190642129314202635344362, 29040128818027182812085632623851615750950738459702000094747611239508626643986, 24643036623783907525543153714744708140593035044888678308137488533907283671880, 114371475713932020306500291701047080632524480018017816508069308216548075509192, 41900448697162816841352108181063898351906757401259309332438722605718438845658, 54568329635023979120173438773482273886435623791438511491045655663987235054396, 75001704264552278370093948911424867598236273326722937206696873331699786435512, 26706895892299062149149150389452432539968783870299486337639175716389699841556, 97377367425189290583063973155451138814295009389822857196761177411699410905996, 1232863831096632130472661739812011549745300164338793700648153670333514662537, 26269418325008581770232430581427109657764847410045079633943766642502404580438, 24030674773281787758235075763804799489668709537838088140878504368601473605962, 86811629367335760989061373668208214074416802123960391077272719421979492321722, 4705372930912236219640794828821928446476233836995906942068634486045889421427, 3780622760283474933545118612904995151472952554666209520142018462683489410492, 32331832055598312449459015904562983681658454867302312991024083766727098901481, 82703349291431759834259791616748332088687686947094717519824850606996211446209]</span><br><span class="line"></span><br><span class="line">B =  [644, 397, 406, 577, 263, 595, 180, 125, 492, 64, 15, 521, 303, 244, 481, 338, 323, 410, 562, 344, 117, 43, 171, 381, 300, 4, 427, 163, 141, 315, 454, 163, 197, 282, 650, 690, 5, 598, 355, 352]</span><br><span class="line"></span><br><span class="line">def matrix_overview(BB):</span><br><span class="line"></span><br><span class="line">  for ii in range(BB.dimensions()[0]):</span><br><span class="line"></span><br><span class="line">    a = (&#x27;%02d &#x27; % ii)</span><br><span class="line"></span><br><span class="line">    for jj in range(BB.dimensions()[1]):</span><br><span class="line"></span><br><span class="line">      if BB[ii, jj] == 0:</span><br><span class="line"></span><br><span class="line">        a += &#x27; &#x27;</span><br><span class="line"></span><br><span class="line">      else:</span><br><span class="line"></span><br><span class="line">        a += &#x27;X&#x27;</span><br><span class="line"></span><br><span class="line">      if BB.dimensions()[0] &lt; 60:</span><br><span class="line"></span><br><span class="line">        a += &#x27; &#x27;</span><br><span class="line"></span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line">m = 256</span><br><span class="line"></span><br><span class="line">s = 10</span><br><span class="line"></span><br><span class="line">AAA = [x for x in A]</span><br><span class="line"></span><br><span class="line">BBB = [x for x in B]</span><br><span class="line"></span><br><span class="line">A = [x for x in AAA]</span><br><span class="line"></span><br><span class="line">B = [x for x in BBB]</span><br><span class="line"></span><br><span class="line">\#B = [x &lt;&lt; (m-s) for x in B]</span><br><span class="line"></span><br><span class="line">B = [(x &lt;&lt; (m-s)) + (1 &lt;&lt; (m-s-1)) for x in B]</span><br><span class="line"></span><br><span class="line">assert len(A) == len(B)</span><br><span class="line"></span><br><span class="line">q = 79114087378317225954892022480252117763918921251508274813632988119040558081957</span><br><span class="line"></span><br><span class="line">n = len(A)-1</span><br><span class="line"></span><br><span class="line">AA = [x for x in A]</span><br><span class="line"></span><br><span class="line">BB = [x for x in B]</span><br><span class="line"></span><br><span class="line">for choice in range(n):</span><br><span class="line"></span><br><span class="line">  A = [x for x in AA]</span><br><span class="line"></span><br><span class="line">  B = [x for x in BB]</span><br><span class="line"></span><br><span class="line">  if A[choice] % 2 != 1:</span><br><span class="line"></span><br><span class="line">    continue</span><br><span class="line"></span><br><span class="line">  A0 = A[choice]</span><br><span class="line"></span><br><span class="line">  A0i = A0.inverse_mod(q)</span><br><span class="line"></span><br><span class="line">  B0 = B[choice]</span><br><span class="line"></span><br><span class="line">  del A[choice]</span><br><span class="line"></span><br><span class="line">  del B[choice]</span><br><span class="line"></span><br><span class="line">  assert gcd(A0, q) == 1</span><br><span class="line"></span><br><span class="line">  Mt = matrix(ZZ, n+2)</span><br><span class="line"></span><br><span class="line">  for i in range(n):</span><br><span class="line"></span><br><span class="line">    Mt[i, i]  = -q</span><br><span class="line"></span><br><span class="line">    Mt[-2, i] = A0i*A[i] % q</span><br><span class="line"></span><br><span class="line">    Mt[-1, i] = A0i*(A[i]*B0 - A0*B[i]) % q</span><br><span class="line"></span><br><span class="line">  Mt[-2, -2] = 1</span><br><span class="line"></span><br><span class="line">  R = 2^(m-s-1)</span><br><span class="line"></span><br><span class="line">  Mt[-1, -1] = R</span><br><span class="line"></span><br><span class="line">  L = Mt.BKZ()</span><br><span class="line"></span><br><span class="line">  for l in L:</span><br><span class="line"></span><br><span class="line">    if l[-1] == R:</span><br><span class="line"></span><br><span class="line">      b = vector(l)</span><br><span class="line"></span><br><span class="line">      b0 = b[-2]</span><br><span class="line"></span><br><span class="line">      x0 = (B0+b0) * A0.inverse_mod(q) % q</span><br><span class="line"></span><br><span class="line">      test1 = [bi &gt;&gt; (m-s) for bi in B] </span><br><span class="line"></span><br><span class="line">      test2 = [(ai*x0 % q) &gt;&gt; (m-s) for ai in A]</span><br><span class="line"></span><br><span class="line">      if test1 == test2:</span><br><span class="line"></span><br><span class="line">        print(&#x27;get: %d&#x27; % x0)</span><br><span class="line"></span><br><span class="line">  break</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="before-sunset">Before Sunset</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">from hashlib import sha256</span><br><span class="line"></span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line"></span><br><span class="line">from random import *</span><br><span class="line"></span><br><span class="line">from Crypto.Util.Padding import *</span><br><span class="line"></span><br><span class="line">flag = b&#x27;flag&#123;XXXXXXXXX&#125;&#x27;</span><br><span class="line"></span><br><span class="line">note = b&#x27;Before_Sunset*xt&#x27;</span><br><span class="line"></span><br><span class="line">keys = []</span><br><span class="line"></span><br><span class="line">for i in range(4):</span><br><span class="line"></span><br><span class="line">  key = bytes(choices(note,k=3))</span><br><span class="line"></span><br><span class="line">  keys.append(sha256(key).digest())</span><br><span class="line"></span><br><span class="line">cipher = b&#x27;happy_newyear!!!&#x27;</span><br><span class="line"></span><br><span class="line">for i in range(4):</span><br><span class="line"></span><br><span class="line">  cipher = AES.new(keys[i], AES.MODE_ECB).encrypt(cipher) </span><br><span class="line"></span><br><span class="line">enkey = sha256(b&quot;&quot;.join(keys)).digest()</span><br><span class="line"></span><br><span class="line">enflag = AES.new(enkey,AES.MODE_ECB).encrypt(pad(flag,AES.block_size))</span><br><span class="line"></span><br><span class="line">print(f&#x27;cipher = &#123;cipher&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">print(f&#x27;enflag = &#123;enflag&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">cipher = b&#x27;4\xf6\x89\x81:\xd7\xf4\xc4\xad\xb1)\x99\xb1l\xe2\x7f&#x27;</span><br><span class="line"></span><br><span class="line">enflag = b&#x27;\x964\xdcq\xcc\xe9\xde\xfe=\xfb\x08\\\x9e\xe3\xf5\xef^\x9c\x11\xaa\xb8\x97\xe61\x1ee\xe4dV\x0c\x1c\xf7 \xabX]\x92\xd6\xa3\xdegD\xbb\xbd\x98\x90\xeb~&#x27;</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><p>没什么好说的两次加密，和SHCTF有相同的</p><p>那么很自然想到利用mitm攻击来打</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 已知信息</span></span><br><span class="line"></span><br><span class="line">note = <span class="string">b&#x27;Before_Sunset*xt&#x27;</span></span><br><span class="line"></span><br><span class="line">leak = <span class="string">b&#x27;happy_newyear!!!&#x27;</span></span><br><span class="line"></span><br><span class="line">cipher = <span class="string">b&#x27;4\xf6\x89\x81:\xd7\xf4\xc4\xad\xb1)\x99\xb1l\xe2\x7f&#x27;</span> <span class="comment"># 从赛题中获取</span></span><br><span class="line"></span><br><span class="line">enc_flag = <span class="string">b&#x27;\x964\xdcq\xcc\xe9\xde\xfe=\xfb\x08\\\x9e\xe3\xf5\xef^\x9c\x11\xaa\xb8\x97\xe61\x1ee\xe4dV\x0c\x1c\xf7 \xabX]\x92\xd6\xa3\xdegD\xbb\xbd\x98\x90\xeb~&#x27;</span></span><br><span class="line"></span><br><span class="line">BLOCK_SIZE = <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_all_possible_keys</span>(<span class="params">note</span>):</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  生成所有可能的3字节密钥</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [<span class="built_in">bytes</span>(p) <span class="keyword">for</span> p <span class="keyword">in</span> itertools.product(note, repeat=<span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">precompute_forward</span>(<span class="params">leak, possible_keys</span>):</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  前向加密：对leak进行两层AES-ECB加密</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  返回中间密文到 (key1, key2) 的映射</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  forward_map = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  total = <span class="built_in">len</span>(possible_keys) ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;开始前向加密预计算...&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> key1 <span class="keyword">in</span> possible_keys:</span><br><span class="line"></span><br><span class="line">    sha_key1 = sha256(key1).digest()</span><br><span class="line"></span><br><span class="line">    cipher1 = AES.new(sha_key1, AES.MODE_ECB).encrypt(leak)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> key2 <span class="keyword">in</span> possible_keys:</span><br><span class="line"></span><br><span class="line">      sha_key2 = sha256(key2).digest()</span><br><span class="line"></span><br><span class="line">      cipher2 = AES.new(sha_key2, AES.MODE_ECB).encrypt(cipher1)</span><br><span class="line"></span><br><span class="line">      forward_map[cipher2] = (key1, key2)</span><br><span class="line"></span><br><span class="line">      count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> count % <span class="number">1000000</span> == <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;前向加密进度: <span class="subst">&#123;count&#125;</span>/<span class="subst">&#123;total&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;前向加密预计算完成。&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> forward_map</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">precompute_backward</span>(<span class="params">cipher, possible_keys</span>):</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  后向解密：对cipher进行两层AES-ECB解密</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  返回中间密文到 (key3, key4) 的映射</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  backward_map = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  total = <span class="built_in">len</span>(possible_keys) ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;开始后向解密预计算...&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> key4 <span class="keyword">in</span> possible_keys:</span><br><span class="line"></span><br><span class="line">    sha_key4 = sha256(key4).digest()</span><br><span class="line"></span><br><span class="line">    decrypted1 = AES.new(sha_key4, AES.MODE_ECB).decrypt(cipher)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> key3 <span class="keyword">in</span> possible_keys:</span><br><span class="line"></span><br><span class="line">      sha_key3 = sha256(key3).digest()</span><br><span class="line"></span><br><span class="line">      decrypted2 = AES.new(sha_key3, AES.MODE_ECB).decrypt(decrypted1)</span><br><span class="line"></span><br><span class="line">      backward_map[decrypted2] = (key3, key4)</span><br><span class="line"></span><br><span class="line">      count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> count % <span class="number">1000000</span> == <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;后向解密进度: <span class="subst">&#123;count&#125;</span>/<span class="subst">&#123;total&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;后向解密预计算完成。&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> backward_map</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_matching_keys</span>(<span class="params">forward_map, backward_map</span>):</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  查找前向加密和后向解密的中间密文是否匹配</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;开始查找匹配的中间密文...&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> intermediate <span class="keyword">in</span> forward_map:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> intermediate <span class="keyword">in</span> backward_map:</span><br><span class="line"></span><br><span class="line">      key1, key2 = forward_map[intermediate]</span><br><span class="line"></span><br><span class="line">      key3, key4 = backward_map[intermediate]</span><br><span class="line"></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;找到匹配的密钥组合！&quot;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> key1, key2, key3, key4</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">  possible_keys = generate_all_possible_keys(note)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&quot;总共生成了 <span class="subst">&#123;<span class="built_in">len</span>(possible_keys)&#125;</span> 个可能的3字节密钥。&quot;</span>)</span><br><span class="line"></span><br><span class="line">  \<span class="comment"># 前向加密预计算</span></span><br><span class="line"></span><br><span class="line">  forward_map = precompute_forward(leak, possible_keys)</span><br><span class="line"></span><br><span class="line">  \<span class="comment"># 后向解密预计算</span></span><br><span class="line"></span><br><span class="line">  backward_map = precompute_backward(cipher, possible_keys)</span><br><span class="line"></span><br><span class="line">  \<span class="comment"># 查找匹配的密钥组合</span></span><br><span class="line"></span><br><span class="line">  keys = find_matching_keys(forward_map, backward_map)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> keys:</span><br><span class="line"></span><br><span class="line">    key1, key2, key3, key4 = keys</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Key 1: <span class="subst">&#123;key1&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Key 2: <span class="subst">&#123;key2&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Key 3: <span class="subst">&#123;key3&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Key 4: <span class="subst">&#123;key4&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    \<span class="comment"># 生成 enc_key</span></span><br><span class="line"></span><br><span class="line">    concatenated_hashes = sha256(key1).digest() + sha256(key2).digest() + sha256(key3).digest() + sha256(key4).digest()</span><br><span class="line"></span><br><span class="line">    enc_key = sha256(concatenated_hashes).digest()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;生成的 enc_key: <span class="subst">&#123;binascii.hexlify(enc_key)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    \<span class="comment"># 解密 enc_flag</span></span><br><span class="line"></span><br><span class="line">    cipher_enc_flag = AES.new(enc_key, AES.MODE_ECB)</span><br><span class="line"></span><br><span class="line">    decrypted_flag_padded = cipher_enc_flag.decrypt(enc_flag)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">      decrypted_flag = unpad(decrypted_flag_padded, BLOCK_SIZE)</span><br><span class="line"></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">f&quot;解密后的 Flag: <span class="subst">&#123;decrypted_flag.decode()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line"></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;填充错误，无法解密 Flag。&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未找到匹配的密钥组合。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">  main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Wp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>复数域</title>
      <link href="/2025/05/07/%E5%A4%8D%E6%95%B0%E5%9F%9F/"/>
      <url>/2025/05/07/%E5%A4%8D%E6%95%B0%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="xyctf2025">XYCTF2025</h2><h2 id="complex_signin">Complex_signin</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">from Crypto.Cipher import ChaCha20</span><br><span class="line"></span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">from secret import flag</span><br><span class="line"></span><br><span class="line">class Complex:</span><br><span class="line"></span><br><span class="line">  def __init__(self, re, im):</span><br><span class="line"></span><br><span class="line">    self.re = re</span><br><span class="line"></span><br><span class="line">    self.im = im</span><br><span class="line"></span><br><span class="line">  def __mul__(self, c):</span><br><span class="line"></span><br><span class="line">    re_ = self.re * c.re - self.im * c.im</span><br><span class="line"></span><br><span class="line">    im_ = self.re * c.im + self.im * c.re</span><br><span class="line"></span><br><span class="line">    return Complex(re_, im_)</span><br><span class="line"></span><br><span class="line">  def __eq__(self, c):</span><br><span class="line"></span><br><span class="line">    return self.re == c.re and self.im == c.im</span><br><span class="line"></span><br><span class="line">  def __rshift__(self, m):</span><br><span class="line"></span><br><span class="line">    return Complex(self.re &gt;&gt; m, self.im &gt;&gt; m)</span><br><span class="line"></span><br><span class="line">  def __lshift__(self, m):</span><br><span class="line"></span><br><span class="line">    return Complex(self.re &lt;&lt; m, self.im &lt;&lt; m)</span><br><span class="line"></span><br><span class="line">  def __str__(self):</span><br><span class="line"></span><br><span class="line">    if self.im == 0:</span><br><span class="line"></span><br><span class="line">      return str(self.re)</span><br><span class="line"></span><br><span class="line">    elif self.re == 0:</span><br><span class="line"></span><br><span class="line">      if abs(self.im) == 1:</span><br><span class="line"></span><br><span class="line">        return f&quot;&#123;&#x27;-&#x27; if self.im &lt; 0 else &#x27;&#x27;&#125;i&quot;</span><br><span class="line"></span><br><span class="line">      else:</span><br><span class="line"></span><br><span class="line">        return f&quot;&#123;self.im&#125;i&quot;</span><br><span class="line"></span><br><span class="line">    else:</span><br><span class="line"></span><br><span class="line">      return f&quot;&#123;self.re&#125; &#123;&#x27;+&#x27; if self.im &gt; 0 else &#x27;-&#x27;&#125; &#123;abs(self.im)&#125;i&quot;</span><br><span class="line"></span><br><span class="line">  def tolist(self):</span><br><span class="line"></span><br><span class="line">    return [self.re, self.im]</span><br><span class="line"></span><br><span class="line">def complex_pow(c, exp, n):</span><br><span class="line"></span><br><span class="line">  result = Complex(1, 0)</span><br><span class="line"></span><br><span class="line">  while exp &gt; 0:</span><br><span class="line"></span><br><span class="line">    if exp &amp; 1:</span><br><span class="line"></span><br><span class="line">      result = result * c</span><br><span class="line"></span><br><span class="line">      result.re = result.re % n</span><br><span class="line"></span><br><span class="line">      result.im = result.im % n</span><br><span class="line"></span><br><span class="line">    c = c * c</span><br><span class="line"></span><br><span class="line">    c.re = c.re % n</span><br><span class="line"></span><br><span class="line">    c.im = c.im % n</span><br><span class="line"></span><br><span class="line">    exp &gt;&gt;= 1</span><br><span class="line"></span><br><span class="line">  return result</span><br><span class="line"></span><br><span class="line">bits = 128</span><br><span class="line"></span><br><span class="line">p = getPrime(1024)</span><br><span class="line"></span><br><span class="line">q = getPrime(1024)</span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">m = Complex(getRandomRange(1, n), getRandomRange(1, n))</span><br><span class="line"></span><br><span class="line">e = 3</span><br><span class="line"></span><br><span class="line">c = complex_pow(m, e, n)</span><br><span class="line"></span><br><span class="line">print(f&quot;n = &#123;n&#125;&quot;)</span><br><span class="line"></span><br><span class="line">print(f&quot;mh = &#123;(m &gt;&gt; bits &lt;&lt; bits).tolist()&#125;&quot;)</span><br><span class="line"></span><br><span class="line">print(f&quot;C = &#123;c.tolist()&#125;&quot;)</span><br><span class="line"></span><br><span class="line">print(f&quot;enc = &#123;ChaCha20.new(key=hashlib.sha256(str(m.re + m.im).encode()).digest(), nonce=b&#x27;Pr3d1ctmyxjj&#x27;).encrypt(flag)&#125;&quot;)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">n = 24240993137357567658677097076762157882987659874601064738608971893024559525024581362454897599976003248892339463673241756118600994494150721789525924054960470762499808771760690211841936903839232109208099640507210141111314563007924046946402216384360405445595854947145800754365717704762310092558089455516189533635318084532202438477871458797287721022389909953190113597425964395222426700352859740293834121123138183367554858896124509695602915312917886769066254219381427385100688110915129283949340133524365403188753735534290512113201932620106585043122707355381551006014647469884010069878477179147719913280272028376706421104753</span><br><span class="line"></span><br><span class="line">mh = [3960604425233637243960750976884707892473356737965752732899783806146911898367312949419828751012380013933993271701949681295313483782313836179989146607655230162315784541236731368582965456428944524621026385297377746108440938677401125816586119588080150103855075450874206012903009942468340296995700270449643148025957527925452034647677446705198250167222150181312718642480834399766134519333316989347221448685711220842032010517045985044813674426104295710015607450682205211098779229647334749706043180512861889295899050427257721209370423421046811102682648967375219936664246584194224745761842962418864084904820764122207293014016, 15053801146135239412812153100772352976861411085516247673065559201085791622602365389885455357620354025972053252939439247746724492130435830816513505615952791448705492885525709421224584364037704802923497222819113629874137050874966691886390837364018702981146413066712287361010611405028353728676772998972695270707666289161746024725705731676511793934556785324668045957177856807914741189938780850108643929261692799397326838812262009873072175627051209104209229233754715491428364039564130435227582042666464866336424773552304555244949976525797616679252470574006820212465924134763386213550360175810288209936288398862565142167552]</span><br><span class="line"></span><br><span class="line">C = [5300743174999795329371527870190100703154639960450575575101738225528814331152637733729613419201898994386548816504858409726318742419169717222702404409496156167283354163362729304279553214510160589336672463972767842604886866159600567533436626931810981418193227593758688610512556391129176234307448758534506432755113432411099690991453452199653214054901093242337700880661006486138424743085527911347931571730473582051987520447237586885119205422668971876488684708196255266536680083835972668749902212285032756286424244284136941767752754078598830317271949981378674176685159516777247305970365843616105513456452993199192823148760, 21112179095014976702043514329117175747825140730885731533311755299178008997398851800028751416090265195760178867626233456642594578588007570838933135396672730765007160135908314028300141127837769297682479678972455077606519053977383739500664851033908924293990399261838079993207621314584108891814038236135637105408310569002463379136544773406496600396931819980400197333039720344346032547489037834427091233045574086625061748398991041014394602237400713218611015436866842699640680804906008370869021545517947588322083793581852529192500912579560094015867120212711242523672548392160514345774299568940390940653232489808850407256752]</span><br><span class="line"></span><br><span class="line">enc = b&#x27;\x9c\xc4n\x8dF\xd9\x9e\xf4\x05\x82!\xde\xfe\x012$\xd0\x8c\xaf\xfb\rEb(\x04)\xa1\xa6\xbaI2J\xd2\xb2\x898\x11\xe6x\xa9\x19\x00pn\xf6rs- \xd2\xd1\xbe\xc7\xf51.\xd4\xd2 \xe7\xc6\xca\xe5\x19\xbe&#x27;</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>拿到题目我们先审计一波代码</p><p>想要恢复明文我们需要先获取到m的实部和虚部，然后解密ChaCha20加密，对于最后一步的解密是很简单的，关键就是恢复m的实部和虚部</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m = Complex(getRandomRange(1, n), getRandomRange(1, n))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mh = &#123;(m &gt;&gt; bits &lt;&lt; bits).tolist()&#125;</span><br></pre></td></tr></table></figure><p>这里的m是个复数，而且这里很明显是m的高位泄露</p><p>那么接下来要干的事就很清晰了</p><p>既然是在复数域下，那我们就有 <spanclass="math display"><em>m</em> = <em>r</em><em>e</em> + <em>i</em><em>m</em> * <em>i</em></span>那么这里的高位泄露就可以表示为 <span class="math display">$$\begin{aligned}re &amp;= mh\_re + x \\im &amp;= mh\_im + y\end{aligned}$$</span> 加密过程非常简单 <spanclass="math display"><em>c</em> = <em>m</em><sup>3</sup> (mod  <em>n</em>)</span>那么这里就是复数的立方了 <spanclass="math display"><em>m</em><sup>3</sup> = (re + im ⋅ <em>i</em>)<sup>3</sup> = (re<sup>3</sup> − 3 ⋅ re ⋅ im<sup>2</sup>) + (3 ⋅ re<sup>2</sup> ⋅ im − im<sup>3</sup>) ⋅ <em>i</em></span>这里出题的预期是解结式然后cooper，但是二元cooper可以直接出了,那么我们只用利用实部来列方程就好</p><p>我们设re的低位是x,im的虚部是y，则有方程 <spanclass="math display"><em>c</em> = (<em>r</em><em>e</em> + <em>x</em>)<sup>3</sup> − 3 * （<em>r</em><em>e</em> + <em>x</em>） * (<em>i</em><em>m</em> + <em>y</em>)<sup>2</sup></span>这里利用二元cooper解出x,y我们就可以成功恢复m了</p><p>接下来就是解ChaCha20了。这个没啥说的了</p><p>这里对系数稍微解释一下m是移位，也就是格的维度，d代表的是方程中最高系数的幂</p><p>对于128位的泄露，通常我们m=2或者3，这里最高次幂是3，毫无疑问的d=3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">from sage.all import *</span><br><span class="line"></span><br><span class="line">from Crypto.Cipher import ChaCha20</span><br><span class="line"></span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">import itertools</span><br><span class="line"></span><br><span class="line">def small_roots(f, bounds, m=1, d=None):</span><br><span class="line"></span><br><span class="line">  if not d:</span><br><span class="line"></span><br><span class="line">    d = f.degree()</span><br><span class="line"></span><br><span class="line">  R = f.base_ring()</span><br><span class="line"></span><br><span class="line">  N = R.cardinality()</span><br><span class="line"></span><br><span class="line">  f /= f.coefficients().pop(0)</span><br><span class="line"></span><br><span class="line">  f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">  G = Sequence([], f.parent())</span><br><span class="line"></span><br><span class="line">  for i in range(m + 1):</span><br><span class="line"></span><br><span class="line">    base = N ^ (m - i) * f ^ i</span><br><span class="line"></span><br><span class="line">    for shifts in itertools.product(range(d), repeat=f.nvariables()):</span><br><span class="line"></span><br><span class="line">      g = base * prod(map(power, f.variables(), shifts))</span><br><span class="line"></span><br><span class="line">      G.append(g)</span><br><span class="line"></span><br><span class="line">  B, monomials = G.coefficient_matrix()</span><br><span class="line"></span><br><span class="line">  monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">  factors = [monomial(*bounds) for monomial in monomials]</span><br><span class="line"></span><br><span class="line">  for i, factor in enumerate(factors):</span><br><span class="line"></span><br><span class="line">    B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">  B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">  B = B.change_ring(QQ)</span><br><span class="line"></span><br><span class="line">  for i, factor in enumerate(factors):</span><br><span class="line"></span><br><span class="line">    B.rescale_col(i, 1 / factor)</span><br><span class="line"></span><br><span class="line">  H = Sequence([], f.parent().change_ring(QQ))</span><br><span class="line"></span><br><span class="line">  for h in filter(None, B * monomials):</span><br><span class="line"></span><br><span class="line">    H.append(h)</span><br><span class="line"></span><br><span class="line">    I = H.ideal()</span><br><span class="line"></span><br><span class="line">    if I.dimension() == -1:</span><br><span class="line"></span><br><span class="line">      H.pop()</span><br><span class="line"></span><br><span class="line">    elif I.dimension() == 0:</span><br><span class="line"></span><br><span class="line">      roots = []</span><br><span class="line"></span><br><span class="line">      for root in I.variety(ring=ZZ):</span><br><span class="line"></span><br><span class="line">        root = tuple(R(root[var]) for var in f.variables())</span><br><span class="line"></span><br><span class="line">        roots.append(root)</span><br><span class="line"></span><br><span class="line">      return roots</span><br><span class="line"></span><br><span class="line">  return []</span><br><span class="line"></span><br><span class="line">n = 24240993137357567658677097076762157882987659874601064738608971893024559525024581362454897599976003248892339463673241756118600994494150721789525924054960470762499808771760690211841936903839232109208099640507210141111314563007924046946402216384360405445595854947145800754365717704762310092558089455516189533635318084532202438477871458797287721022389909953190113597425964395222426700352859740293834121123138183367554858896124509695602915312917886769066254219381427385100688110915129283949340133524365403188753735534290512113201932620106585043122707355381551006014647469884010069878477179147719913280272028376706421104753</span><br><span class="line"></span><br><span class="line">mh = [3960604425233637243960750976884707892473356737965752732899783806146911898367312949419828751012380013933993271701949681295313483782313836179989146607655230162315784541236731368582965456428944524621026385297377746108440938677401125816586119588080150103855075450874206012903009942468340296995700270449643148025957527925452034647677446705198250167222150181312718642480834399766134519333316989347221448685711220842032010517045985044813674426104295710015607450682205211098779229647334749706043180512861889295899050427257721209370423421046811102682648967375219936664246584194224745761842962418864084904820764122207293014016, 15053801146135239412812153100772352976861411085516247673065559201085791622602365389885455357620354025972053252939439247746724492130435830816513505615952791448705492885525709421224584364037704802923497222819113629874137050874966691886390837364018702981146413066712287361010611405028353728676772998972695270707666289161746024725705731676511793934556785324668045957177856807914741189938780850108643929261692799397326838812262009873072175627051209104209229233754715491428364039564130435227582042666464866336424773552304555244949976525797616679252470574006820212465924134763386213550360175810288209936288398862565142167552]</span><br><span class="line"></span><br><span class="line">C = [5300743174999795329371527870190100703154639960450575575101738225528814331152637733729613419201898994386548816504858409726318742419169717222702404409496156167283354163362729304279553214510160589336672463972767842604886866159600567533436626931810981418193227593758688610512556391129176234307448758534506432755113432411099690991453452199653214054901093242337700880661006486138424743085527911347931571730473582051987520447237586885119205422668971876488684708196255266536680083835972668749902212285032756286424244284136941767752754078598830317271949981378674176685159516777247305970365843616105513456452993199192823148760, 21112179095014976702043514329117175747825140730885731533311755299178008997398851800028751416090265195760178867626233456642594578588007570838933135396672730765007160135908314028300141127837769297682479678972455077606519053977383739500664851033908924293990399261838079993207621314584108891814038236135637105408310569002463379136544773406496600396931819980400197333039720344346032547489037834427091233045574086625061748398991041014394602237400713218611015436866842699640680804906008370869021545517947588322083793581852529192500912579560094015867120212711242523672548392160514345774299568940390940653232489808850407256752]</span><br><span class="line"></span><br><span class="line">enc = b&#x27;\x9c\xc4n\x8dF\xd9\x9e\xf4\x05\x82!\xde\xfe\x012$\xd0\x8c\xaf\xfb\rEb(\x04)\xa1\xa6\xbaI2J\xd2\xb2\x898\x11\xe6x\xa9\x19\x00pn\xf6rs- \xd2\xd1\xbe\xc7\xf51.\xd4\xd2 \xe7\xc6\xca\xe5\x19\xbe&#x27;</span><br><span class="line"></span><br><span class="line">mh_re,mh_im=mh</span><br><span class="line"></span><br><span class="line">R.&lt;x,y&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"></span><br><span class="line">f = (mh_re+x)^3-3*(mh_re+x)*(mh_im+y)^2 - C[0]</span><br><span class="line"></span><br><span class="line">res=small_roots(f,(2^128,2^128),m=2,d=3)   </span><br><span class="line"></span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">m_re=mh_re+int(res[0][0])</span><br><span class="line"></span><br><span class="line">m_im=mh_im+int(res[0][1])</span><br><span class="line"></span><br><span class="line">flag = ChaCha20.new(key=hashlib.sha256(str(m_re + m_im).encode()).digest(), nonce=b&#x27;Pr3d1ctmyxjj&#x27;).decrypt(enc).decode()</span><br><span class="line"></span><br><span class="line">print(flag)</span><br><span class="line">#[(200140573956551184845123803212115015633, 62109784561410747979732334460991877433)]</span><br><span class="line">#XYCTF&#123;Welcome_to_XYCTF_Now_let_us_together_play_Crypto_challenge&#125;</span><br></pre></td></tr></table></figure><h1 id="xyctf2025-1">XYCTF2025</h1><h2 id="complex_dlp">Complex_dlp</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">from secrets import flag</span><br><span class="line"></span><br><span class="line">class Complex:</span><br><span class="line"></span><br><span class="line">  def __init__(self, re, im):</span><br><span class="line"></span><br><span class="line">    self.re = re</span><br><span class="line"></span><br><span class="line">    self.im = im</span><br><span class="line"></span><br><span class="line">  def __mul__(self, c):</span><br><span class="line"></span><br><span class="line">    re_ = self.re * c.re - self.im * c.im</span><br><span class="line"></span><br><span class="line">    im_ = self.re * c.im + self.im * c.re</span><br><span class="line"></span><br><span class="line">    return Complex(re_, im_)</span><br><span class="line"></span><br><span class="line">  def __str__(self):</span><br><span class="line"></span><br><span class="line">    if self.im == 0:</span><br><span class="line"></span><br><span class="line">      return str(self.re)</span><br><span class="line"></span><br><span class="line">    elif self.re == 0:</span><br><span class="line"></span><br><span class="line">      if abs(self.im) == 1:</span><br><span class="line"></span><br><span class="line">        return f&quot;&#123;&#x27;-&#x27; if self.im &lt; 0 else &#x27;&#x27;&#125;i&quot;</span><br><span class="line"></span><br><span class="line">      else:</span><br><span class="line"></span><br><span class="line">        return f&quot;&#123;self.im&#125;i&quot;</span><br><span class="line"></span><br><span class="line">    else:</span><br><span class="line"></span><br><span class="line">      return f&quot;&#123;self.re&#125; &#123;&#x27;+&#x27; if self.im &gt; 0 else &#x27;-&#x27;&#125; &#123;abs(self.im)&#125;i&quot;</span><br><span class="line"></span><br><span class="line">def complex_pow(c, exp, n):</span><br><span class="line"></span><br><span class="line">  result = Complex(1, 0)</span><br><span class="line"></span><br><span class="line">  while exp &gt; 0:</span><br><span class="line"></span><br><span class="line">    if exp &amp; 1:</span><br><span class="line"></span><br><span class="line">      result = result * c</span><br><span class="line"></span><br><span class="line">      result.re = result.re % n</span><br><span class="line"></span><br><span class="line">      result.im = result.im % n</span><br><span class="line"></span><br><span class="line">    c = c * c</span><br><span class="line"></span><br><span class="line">    c.re = c.re % n</span><br><span class="line"></span><br><span class="line">    c.im = c.im % n</span><br><span class="line"></span><br><span class="line">    exp &gt;&gt;= 1</span><br><span class="line"></span><br><span class="line">  return result</span><br><span class="line"></span><br><span class="line">flag = flag.strip(b&quot;XYCTF&#123;&quot;).strip(b&quot;&#125;&quot;)</span><br><span class="line"></span><br><span class="line">p = 1127236854942215744482170859284245684922507818478439319428888584898927520579579027</span><br><span class="line"></span><br><span class="line">g = Complex(3, 7)</span><br><span class="line"></span><br><span class="line">x = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">print(complex_pow(g, x, p))</span><br><span class="line"></span><br><span class="line">\# 5699996596230726507553778181714315375600519769517892864468100565238657988087817 + 198037503897625840198829901785272602849546728822078622977599179234202360717671908i</span><br></pre></td></tr></table></figure><p>先来看一个性质</p><p>对于一个复数来说 <spanclass="math display"><em>c</em> = <em>a</em> + <em>b</em> ⋅ <em>i</em></span>它的模长是 <span class="math display">$$\left |c  \right |=\sqrt{a^{2}+b^{2}}$$</span> 那么对于它的平方也就是 <spanclass="math display"><em>c</em><sup>2</sup> = (<em>a</em><sup>2</sup> − <em>b</em><sup>2</sup>) + 2<em>a</em><em>b</em> ⋅ <em>i</em></span>它模长是 <span class="math display">$$\left |c^{2}  \right |=\sqrt{(a^{2}-b^{2})^{2}+4a^{2}b^{2}}=a^{2}+b^{2}$$</span>这里我们可以看复数平方的模长就是复数模长的平方，那么对于其他次幂能否满足这一条件呢,那当然也是满足的，这里就不在证明了，回到这道题<spanclass="math display">(3 + 7 ⋅ <em>i</em>)<sup><em>x</em></sup> ≡ (<em>c</em><sub><em>r</em><em>e</em></sub> + <em>c</em><sub><em>i</em><em>m</em></sub>) mod  <em>p</em></span>这里利用上面的性质 <spanclass="math display">|3 + 7 ⋅ <em>i</em>|<sup><em>x</em></sup> ≡ |(<em>c</em><sub><em>r</em><em>e</em></sub> + <em>c</em><sub><em>i</em><em>m</em></sub>)| mod  <em>p</em></span>那么这里还有一个问题模长的根号内部不是二次剩余，所以我选择把模长平方掉<spanclass="math display">|(3 + 7 ⋅ <em>i</em>)<sup>2</sup>|<sup><em>x</em></sup> ≡ |(<em>c</em><sub><em>r</em><em>e</em></sub> + <em>c</em><sub><em>i</em><em>m</em></sub>)<sup>2</sup>| mod  <em>p</em></span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">p = 1127236854942215744482170859284245684922507818478439319428888584898927520579579027</span><br><span class="line"></span><br><span class="line">g = 3^2 + 7^2</span><br><span class="line">a = 5699996596230726507553778181714315375600519769517892864468100565238657988087817 </span><br><span class="line">b = 198037503897625840198829901785272602849546728822078622977599179234202360717671908</span><br><span class="line">c = (a^2 + b^2) % p</span><br><span class="line"></span><br><span class="line">x = discrete_log(mod(c,p),mod(g,p))</span><br><span class="line">flag = b&quot;XYCTF&#123;&quot; + bytes.fromhex(hex(int(x))[2:]) + b&quot;&#125;&quot;</span><br><span class="line">print(flag)</span><br><span class="line"></span><br><span class="line"># XYCTF&#123;___c0mp13x_d1p_15_3@5y_f0r_y0u___&#125;</span><br></pre></td></tr></table></figure><p>这个写法好理解一点，这是Dexter师傅的</p><p>这个是我的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">p = 1127236854942215744482170859284245684922507818478439319428888584898927520579579027</span><br><span class="line"></span><br><span class="line">re=5699996596230726507553778181714315375600519769517892864468100565238657988087817</span><br><span class="line"></span><br><span class="line">im=198037503897625840198829901785272602849546728822078622977599179234202360717671908</span><br><span class="line"></span><br><span class="line">G=GF(p^2)</span><br><span class="line"></span><br><span class="line">g=G(3^2+7^2)</span><br><span class="line"></span><br><span class="line">c=G(re^2+im^2)</span><br><span class="line"></span><br><span class="line">x = discrete_log(c,g)</span><br><span class="line"></span><br><span class="line">flag = b&quot;XYCTF&#123;&quot; + bytes.fromhex(hex(int(x))[2:]) + b&quot;&#125;&quot;</span><br><span class="line"></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Coppersmith</title>
      <link href="/2025/05/06/Coppersmith/"/>
      <url>/2025/05/06/Coppersmith/</url>
      
        <content type="html"><![CDATA[<p>由于最近碰到了太多cooper的题目，有一元的也有多元的，其中不乏很多让人头痛的难题，自己就想先整理一遍吧</p><p><ahref="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_coppersmith_attack/">Coppersmith</a>相关攻击与 <a href="https://en.wikipedia.org/wiki/Don_Coppersmith">DonCoppersmith</a>紧密相关，他提出了一种针对于模多项式（单变量，二元变量，甚至多元变量）找所有小整数根的多项式时间的方法</p><p>一般来说，Coopersmith在RSA中的应用是最多的，<strong>高位攻击</strong>一类的已知部分二进制位</p><p>那么在我们究竟要获取多少后才能打Copper呢？</p><p>我们这里先来看coopersmith定理的应用场景</p><p>现在给定了一个e阶的多项式f：</p><ul><li>给定<spanclass="math inline"><em>β</em></span>，快速求出模某个n的因数b意义下较小的根，其中<spanclass="math inline"><em>b</em> ≥ <em>n</em><sup><em>β</em></sup></span>,(<span class="math inline">0 ≤ <em>β</em> ≤ 1</span>)</li><li>在模n的意义下，快速求出<spanclass="math inline">$n=\frac{β^{2}}{e}$</span> 以内的根</li></ul><p>那么高位攻击明显是可以根据第二点来实现的</p><p>这里先对要用到的函数进行简单的介绍</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PolynomialRing ：构造多项式环</span><br><span class="line">Zmod(n) ：模运算</span><br><span class="line"></span><br><span class="line">implementation=&#x27;NTL&#x27; ：执行 NTL</span><br><span class="line"></span><br><span class="line">small_roots(self, X=None , beta=1.0 , epsilon=None)：计算多项式的小整数根</span><br><span class="line"></span><br><span class="line">其中的参数：X —— 根的绝对边界， beta($\beta$) —— compute a root mod p where p is a factor of N and $p \geq N^\beta$</span><br><span class="line"></span><br><span class="line">(程序默认值是 1.0 ，此时 p=N)，epsilon （默认：$\beta/8$)</span><br><span class="line"></span><br><span class="line">monic()：用于将多项式的首项系数归一化为1。它接受一个多项式作为参数，然后返回一个新的多项式，其中首项系数已经被归一化为1。这个过程可以简化多项式的表达式，使其更易于计算和分析。</span><br></pre></td></tr></table></figure><p>这里打cooper，需要我们知道 的高位为素因子p 的位数约 <spanclass="math inline">$\frac{1}{2}$</span> 比特位时即可</p><h1 id="基础">基础</h1><h2 id="已知p高bit位">1.1、已知p高bit位</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> n</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span> p&gt;&gt;<span class="number">256</span>&lt;&lt;<span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># output</span></span><br><span class="line"><span class="comment"># 26406507468595611843852094067483173843988114465094045314324958205247973393878612589146897816881236818219902539975703710689353618174826904300589643161784341674436810639999244652231756242284615955258973430337702733454791782484002773967293198343866259490519754466626455660967042613249021854707331393440280088268816341057924652807723419166490363777181753297185283416885627445213950857480287818564281651822264024891956284486733856518809532470029519647769749231421957169481281821885757924521580543834665554242403238567286205389138437021157096962185096308108489101554724344868500500476691994206988217768341711716527866730487</span></span><br><span class="line"><span class="comment"># 22371088752722216457725632164373582195669473128756299754645443284929524768654545905154985577175225182544638209286885657892360668965805613727315024761409924679131145149936406239774150607378706790494820180586939668429812955766507811860718575149988809217701964019618239260041070894375952033566803105327100696642244951676616707205397327491933042019560545721027871057909242509336729865025061616686254481161431063503607378134616485979961926628954536592552923269161255759846497309277397441639921544384778106116567555705005440627393593876072210594939647990615797269482726733444406876986888296295032722008287447468255108089357</span></span><br><span class="line"><span class="comment"># 159945952275533485818121954231313618960321976049710904254772419907677971914439101482974923293074598678164025819370654132149566696084245679106109087142916286461708005676333840438629476722637189134626565206159794947442549588155962485884562239895738265024295739578695834796427810095412842888401159276765814718464</span></span><br></pre></td></tr></table></figure><p>对于上面的位操作来说相当与是先右移动256bit位，再向左移动256bit</p><p>看到这个例子</p><p>这就相当于是给了高位，或者说是低位的丢失</p><p>回到题目中来</p><p>我们知道p的高位=1024-256 = 768 bits，未知的低位数据为 256bits，根据上面的理论这里明显是可以直接打cooper的</p><p>那么这里的关键函数是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x0 = p.small_roots(X=2^256,beta=0.4)</span><br></pre></td></tr></table></figure><p>exp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">import gmpy2</span><br><span class="line"></span><br><span class="line">e = 65537</span><br><span class="line"></span><br><span class="line">p_high=159945952275533485818121954231313618960321976049710904254772419907677971914439101482974923293074598678164025819370654132149566696084245679106109087142916286461708005676333840438629476722637189134626565206159794947442549588155962485884562239895738265024295739578695834796427810095412842888401159276765814718464</span><br><span class="line"></span><br><span class="line">c=22371088752722216457725632164373582195669473128756299754645443284929524768654545905154985577175225182544638209286885657892360668965805613727315024761409924679131145149936406239774150607378706790494820180586939668429812955766507811860718575149988809217701964019618239260041070894375952033566803105327100696642244951676616707205397327491933042019560545721027871057909242509336729865025061616686254481161431063503607378134616485979961926628954536592552923269161255759846497309277397441639921544384778106116567555705005440627393593876072210594939647990615797269482726733444406876986888296295032722008287447468255108089357</span><br><span class="line"></span><br><span class="line">n=26406507468595611843852094067483173843988114465094045314324958205247973393878612589146897816881236818219902539975703710689353618174826904300589643161784341674436810639999244652231756242284615955258973430337702733454791782484002773967293198343866259490519754466626455660967042613249021854707331393440280088268816341057924652807723419166490363777181753297185283416885627445213950857480287818564281651822264024891956284486733856518809532470029519647769749231421957169481281821885757924521580543834665554242403238567286205389138437021157096962185096308108489101554724344868500500476691994206988217768341711716527866730487</span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))  #构造多项式环</span><br><span class="line"></span><br><span class="line">f = p_high+x            #</span><br><span class="line"></span><br><span class="line">roots = f.small_roots(X=2^256,beta=0.4,epsilon=1)  #后面的两个参数都是默认的，</span><br><span class="line"></span><br><span class="line">print(roots)</span><br><span class="line"></span><br><span class="line">\#[34617643142235695556586808773805798019055870312898061509976159971261415964273]</span><br><span class="line"></span><br><span class="line">p=p_high+int(roots[0])</span><br><span class="line"></span><br><span class="line">q=n//p</span><br><span class="line"></span><br><span class="line">phi=(p-1)*(q-1)</span><br><span class="line"></span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line"></span><br><span class="line">m=pow(c,d,n)</span><br><span class="line"></span><br><span class="line">print(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="已知p高bit位但泄露位数不够">1.2、已知p高bit位但泄露位数不够</h2><p>上面也说过我们必须知道泄露位数的一半才能打cooper，那么这就不使用于下面这题</p><figure><imgsrc="C:\Users\ROG\Desktop\blog\source\img\cooper\image-20250422160400020.png"alt="image-20250422160400020" /><figcaption aria-hidden="true">image-20250422160400020</figcaption></figure><p>这是我测试的数据，这种情况是不足以恢复p的，必须要知道144位才能恢复</p><p>但是136bit和144bit只差了8bit,也就是8个二进制数，那么爆破也就是最好的办法了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p= getPrime(<span class="number">256</span>)</span><br><span class="line">leak_p = p &gt;&gt; <span class="number">120</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;leak_p =&quot;</span>,leak_p)</span><br><span class="line">q = getPrime(<span class="number">256</span>)</span><br><span class="line">n = p*q</span><br><span class="line">c= <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>,c)</span><br><span class="line"><span class="comment"># leak_p = 57303545022436031674172379509633863887077</span></span><br><span class="line"><span class="comment"># n = 6290400850108673527783456723558868077251853788073859360516042680251422818079380463161520548743184302018140978345372703177688378631564416901363981788817257</span></span><br><span class="line"><span class="comment"># c = 3018879496435827891565409624549580574355607699876796814908055868300197064252462047054251836059387617618529706009316747223510404878163964048672091931778452</span></span><br></pre></td></tr></table></figure><p>对于这道题目来说，p是256bit的数，也就是高位泄露了136位，</p><p>八位二进制数最大时255，那么我们直接开始爆破就好</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">from sage.all import *</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = 6290400850108673527783456723558868077251853788073859360516042680251422818079380463161520548743184302018140978345372703177688378631564416901363981788817257</span><br><span class="line">c = 3018879496435827891565409624549580574355607699876796814908055868300197064252462047054251836059387617618529706009316747223510404878163964048672091931778452</span><br><span class="line">e = 65537</span><br><span class="line">pbits = 256</span><br><span class="line"></span><br><span class="line"># leak_p = 57303545022436031674172379509633863887077</span><br><span class="line"></span><br><span class="line"># print(hex(leak_p&lt;&lt;8))</span><br><span class="line"></span><br><span class="line"># leak_p = 0xa8666553ec59acad3ed8208f060abba8e500</span><br><span class="line"></span><br><span class="line">for i in range(1, 127):</span><br><span class="line">    leak_p = 0xa8666553ec59acad3ed8208f060abba8e500</span><br><span class="line">    leak_p = leak_p + int(hex(i),16)</span><br><span class="line"></span><br><span class="line">#     print(leak_p)</span><br><span class="line"></span><br><span class="line">    kbits = pbits - leak_p.nbits()  # 设置界的 bit上限</span><br><span class="line"></span><br><span class="line">#     print(kbits)</span><br><span class="line"></span><br><span class="line">    p_high = leak_p &lt;&lt; kbits</span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    f = p_high + x</span><br><span class="line">    roots = f.small_roots(X=2^kbits, beta=0.4)  #计算模多项式的小整数根</span><br><span class="line"></span><br><span class="line">    if(roots):</span><br><span class="line">        print(&#x27;roots =&#x27;,roots)</span><br><span class="line">        p = p_high + int(roots[0])</span><br><span class="line">        q = n//int(p)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        phi = (p-1)*(q-1)</span><br><span class="line">        d = invert(e,phi)</span><br><span class="line">        flag = int(pow(c,d,n))</span><br><span class="line">        print(long_to_bytes(flag))</span><br></pre></td></tr></table></figure><h2 id="已知p的低位攻击">1.3、已知p的低位攻击</h2><p>既然已知高位能恢复原先的p，那么如果我们知道p的低位呢</p><p>答案很明显也是可以的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p*q</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p =&quot;</span>, p&amp;((<span class="number">1</span>&lt;&lt;<span class="number">560</span>) - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 21595945409392994055049935446570173194131443801801845658035469673666023560594683551197545038999238700810747167248724184844583697034436158042499504967916978621608536213230969406811902366916932032050583747070735750876593573387957847683066895725722366706359818941065483471589153682177234707645138490589285500875222568286916243861325846262164331536570517513524474322519145470883352586121892275861245291051589531534179640139953079522307426687782419075644619898733819937782418589025945603603989100805716550707637938272890461563518245458692411433603442554397633470070254229240718705126327921819662662201896576503865953330533</span></span><br><span class="line"><span class="string">c = 1500765718465847687738186396037558689777598727005427859690647229619648539776087318379834790898189767401195002186003548094137654979353798325221367220839665289140547664641612525534203652911807047718681392766077895625388064095459224402032253429115181543725938853591119977152518616563668740574496233135226296439754690903570240135657268737729815911404733486976376064060345507410815912670147466261149162470191619474107592103882894806322239740349433710606063058160148571050855845964674224651003832579701204330216602742005466066589981707592861990283864753628591214636813639371477417319679603330973431803849304579330791040664</span></span><br><span class="line"><span class="string">p = 1426723861968216959675536598409491243380171101180592446441649834738166786277745723654950385796320682900434611832789544257790278878742420696344225394624591657752431494779</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>还是一样的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p&amp;((1&lt;&lt;560) - 1)</span><br></pre></td></tr></table></figure><p>我们可以知道p的低位</p><p>从代码中我们可以知道p是1024bit的，p泄露的低位是560位,那么从上面的理论中我们是可以恢复p的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">import gmpy2</span><br><span class="line"></span><br><span class="line">n = 21595945409392994055049935446570173194131443801801845658035469673666023560594683551197545038999238700810747167248724184844583697034436158042499504967916978621608536213230969406811902366916932032050583747070735750876593573387957847683066895725722366706359818941065483471589153682177234707645138490589285500875222568286916243861325846262164331536570517513524474322519145470883352586121892275861245291051589531534179640139953079522307426687782419075644619898733819937782418589025945603603989100805716550707637938272890461563518245458692411433603442554397633470070254229240718705126327921819662662201896576503865953330533</span><br><span class="line"></span><br><span class="line">c = 1500765718465847687738186396037558689777598727005427859690647229619648539776087318379834790898189767401195002186003548094137654979353798325221367220839665289140547664641612525534203652911807047718681392766077895625388064095459224402032253429115181543725938853591119977152518616563668740574496233135226296439754690903570240135657268737729815911404733486976376064060345507410815912670147466261149162470191619474107592103882894806322239740349433710606063058160148571050855845964674224651003832579701204330216602742005466066589981707592861990283864753628591214636813639371477417319679603330973431803849304579330791040664</span><br><span class="line"></span><br><span class="line">p_low = 1426723861968216959675536598409491243380171101180592446441649834738166786277745723654950385796320682900434611832789544257790278878742420696344225394624591657752431494779</span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"></span><br><span class="line">f = x*2^560+p_low</span><br><span class="line"></span><br><span class="line">f = f.monic()</span><br><span class="line"></span><br><span class="line">kbit=1024-560  # 用于设置根X的界限</span><br><span class="line"></span><br><span class="line">roots=f.small_roots(X=2^kbit,beta=0.4,epsilon=0.015)</span><br><span class="line"></span><br><span class="line">p = int(2^560*roots[0] + p_low)</span><br><span class="line"></span><br><span class="line">q = n // p</span><br><span class="line"></span><br><span class="line">assert p*q == n</span><br><span class="line"></span><br><span class="line">e=65537</span><br><span class="line"></span><br><span class="line">d=gmpy2.invert(e,(p-1)*(q-1))</span><br><span class="line"></span><br><span class="line">m=pow(c,int(d),n)</span><br><span class="line"></span><br><span class="line">print(long_to_bytes(int(m)))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还是一样的思路</p><h2 id="已知明文m的高位攻击">2.1已知明文m的高位攻击</h2><p>在RSA加密中，如果明文泄露了我们能直接恢复吗，答案明显是可以的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="number">49448440304854831648796534024125601382006282873198989997965557974794200333763817072355620545318651927253247674282578472637671741164408087215327482745901235293974786619481946963756529643023816474028709984009212852065178750039594108019217271743973042473197736068985706708503716012186147977316095727799381598075488417125</span></span><br><span class="line">n = <span class="number">28847074924932453349543409136399812128594610949367020026474778343570858319481313455200890189364023790182887175049408105958843453263073050626086662142940263874460213271683958427975341123423883215407111909499389249677340455477004237510991188529190235171007660645641687224704887400900068278836154730644879715422040757103147552875954913961588149167053461868101745063648215554184664115626793497487765708744642552805937987823454039925728887745567746569963466846339068171354494330823482202581747310450407677264654959638952096601645772638052521701110952634257302519671771900589919411338060623904602870338988690057676936333193</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">m_high = ((m &gt;&gt; <span class="number">88</span>) &lt;&lt; <span class="number">88</span>)</span><br><span class="line">m_high = <span class="number">0x666c61677b343833323734383733383438777975727975737238796538727938323372000000000000000000</span></span><br></pre></td></tr></table></figure><p>这里可以看到我们知道m高88位泄露，那么只要符合上面的条件我们就能恢复出m</p><p>基本过程一样，无非是构造多项式过程不一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">c = 49448440304854831648796534024125601382006282873198989997965557974794200333763817072355620545318651927253247674282578472637671741164408087215327482745901235293974786619481946963756529643023816474028709984009212852065178750039594108019217271743973042473197736068985706708503716012186147977316095727799381598075488417125</span><br><span class="line"></span><br><span class="line">n = 28847074924932453349543409136399812128594610949367020026474778343570858319481313455200890189364023790182887175049408105958843453263073050626086662142940263874460213271683958427975341123423883215407111909499389249677340455477004237510991188529190235171007660645641687224704887400900068278836154730644879715422040757103147552875954913961588149167053461868101745063648215554184664115626793497487765708744642552805937987823454039925728887745567746569963466846339068171354494330823482202581747310450407677264654959638952096601645772638052521701110952634257302519671771900589919411338060623904602870338988690057676936333193</span><br><span class="line"></span><br><span class="line">e = 3</span><br><span class="line"></span><br><span class="line">m_high = 0x666c61677b343833323734383733383438777975727975737238796538727938320000000000000000000000</span><br><span class="line"></span><br><span class="line">kbits = 88</span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"></span><br><span class="line">f = (m_high+x)**e-c</span><br><span class="line"></span><br><span class="line">f = f.monic()</span><br><span class="line"></span><br><span class="line">root = f.small_roots(X=2^88,beta=0.5)</span><br><span class="line"></span><br><span class="line">print(root)</span><br><span class="line"></span><br><span class="line">m=m_high+int(root[0])</span><br><span class="line"></span><br><span class="line">print(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="已知明文m的低位攻击">2.2已知明文m的低位攻击</h2><p>那么m的低位也是一样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line"><span class="keyword">assert</span> GCD(<span class="number">3</span>, (p-<span class="number">1</span>)*(q-<span class="number">1</span>)) != <span class="number">1</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">40</span></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">b&#x27;DASCTF&#123;&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> flag.endswith(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line">n = p*q</span><br><span class="line">m = bytes_to_long(flag[<span class="number">7</span>:-<span class="number">1</span>]+<span class="string">b&#x27;12345678900987654321&#x27;</span>)</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;m =&quot;</span>, m&amp;((<span class="number">1</span>&lt;&lt;<span class="number">350</span>)-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 78143938921360185614860462235112355256968995028076215097413461371745388165946555700961349927305255136527151965763804585057604387898421720879593387223895933656350645970498558271551701970896688207206809537892771605339961799334047604053282371439410751334173463317244016213693285842193635136764938802757014669091</span></span><br><span class="line"><span class="string">m = 1906077032611187208365446696459387107800629785754941498024021333398862239730761050657886407994645536780849</span></span><br><span class="line"><span class="string">c = 50130000135496687335562420162077023127865865388254124043997590968769445787929013990729805222613912997653046528125102370938788632651827553831996692788561639714991297669155839231144254658035090111092408296896778962224040765239997700906745359526477039359317216610131441370663885646599680838617778727787254679678</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>这里一样就不多说了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from gmpy2 import *</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">n = 78143938921360185614860462235112355256968995028076215097413461371745388165946555700961349927305255136527151965763804585057604387898421720879593387223895933656350645970498558271551701970896688207206809537892771605339961799334047604053282371439410751334173463317244016213693285842193635136764938802757014669091</span><br><span class="line">m_low = 1906077032611187208365446696459387107800629785754941498024021333398862239730761050657886407994645536780849</span><br><span class="line">c = 50130000135496687335562420162077023127865865388254124043997590968769445787929013990729805222613912997653046528125102370938788632651827553831996692788561639714991297669155839231144254658035090111092408296896778962224040765239997700906745359526477039359317216610131441370663885646599680838617778727787254679678</span><br><span class="line"></span><br><span class="line">e = 3</span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"></span><br><span class="line">f = (x*2^350 + m_low)**e - c  # 构造的模多项式</span><br><span class="line">f = f.monic()</span><br><span class="line">root = f.small_roots(X=2^66,beta=0.5)[0]   # 计算模多项式的小整数根</span><br><span class="line">print(&#x27;root =&#x27;,root)</span><br><span class="line"></span><br><span class="line">m=root*2^350+m_low</span><br><span class="line">print(long_to_bytes(int(m)))</span><br></pre></td></tr></table></figure><p>当<code>beta=0.4</code>时，在未知位数少于等于227bit时，可以恢复p</p><p>当<code>beta=0.4,epsilon=0.01</code>时，在未知位数少于等于248bit时，可以恢复p</p><h1 id="拓展">拓展</h1><h2 id="p泄露位数不够">1.1P泄露位数不够</h2><h3 id="tgctf2025-ezrsa">TGCTF2025 EZRSA</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genarate_emojiiiiii_prime</span>(<span class="params">nbits, base=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p = getPrime(base // <span class="number">32</span> * <span class="number">32</span>) <span class="keyword">if</span> base &gt;= <span class="number">3</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbits // <span class="number">8</span> // <span class="number">4</span> - base // <span class="number">32</span>):</span><br><span class="line">            p = (p &lt;&lt; <span class="number">32</span>) + get_random_emojiiiiii() <span class="comment"># 猜一猜</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(p):</span><br><span class="line">            <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag.encode()+ <span class="string">&quot;&quot;</span>.join([long_to_bytes(get_random_emojiiiiii()).decode() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]).encode())</span><br><span class="line">p = genarate_emojiiiiii_prime(<span class="number">512</span>, <span class="number">224</span>)</span><br><span class="line">q = genarate_emojiiiiii_prime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="string">&quot;💯&quot;</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, bytes_to_long(e.encode()), n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p0 =&quot;</span>, long_to_bytes(p % <span class="number">2</span> ** <span class="number">256</span>).decode())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>, c)</span><br><span class="line"></span><br><span class="line">p0 = <span class="string">&#x27;😘😾😂😋😶😾😳😷&#x27;</span></span><br><span class="line">n = <span class="number">156583691355552921614631145152732482393176197132995684056861057354110068341462353935267384379058316405283253737394317838367413343764593681931500132616527754658531492837010737718142600521325345568856010357221012237243808583944390972551218281979735678709596942275013178851539514928075449007568871314257800372579</span></span><br><span class="line">c = <span class="number">47047259652272336203165844654641527951135794808396961300275905227499051240355966018762052339199047708940870407974724853429554168419302817757183570945811400049095628907115694231183403596602759249583523605700220530849961163557032168735648835975899744556626132330921576826526953069435718888223260480397802737401</span></span><br></pre></td></tr></table></figure><p>这里搞了点抽象看起来花里胡哨的，但是本质就是p的泄露</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p = (p &lt;&lt; 32) + get_random_emojiiiiii()</span><br><span class="line">p = genarate_emojiiiiii_prime(512, 224)</span><br><span class="line">p0 = &#x27;😘😾😂😋😶😾😳😷&#x27;</span><br><span class="line">print(&quot;p0 =&quot;, long_to_bytes(p % 2 ** 256).decode())</span><br></pre></td></tr></table></figure><p>我们从题目中可以知道的是p是512bit的，以及<spanclass="math inline"><em>p</em><sub>0</sub></span>,想要打cooper就要知道这里的<spanclass="math inline"><em>p</em><sub>0</sub></span>有多少位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = genarate_emojiiiiii_prime(512, 224)</span><br></pre></td></tr></table></figure><p>这里我们看出p的结构</p><p>这里一个emoji是四个字节，那么也就是说我们知道了其中的256位，但是p是512位的，那么也就打不了cooper，我们还差8bit，那么当泄露的字节来到了288bit，我们就可以打cooper了</p><p>之后e,phi不互素，直接有限域开方就好</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">p0_ = 108837065531980906150333850570890620719343963272506332719822248235755953428663</span><br><span class="line">n = 156583691355552921614631145152732482393176197132995684056861057354110068341462353935267384379058316405283253737394317838367413343764593681931500132616527754658531492837010737718142600521325345568856010357221012237243808583944390972551218281979735678709596942275013178851539514928075449007568871314257800372579</span><br><span class="line">c = 47047259652272336203165844654641527951135794808396961300275905227499051240355966018762052339199047708940870407974724853429554168419302817757183570945811400049095628907115694231183403596602759249583523605700220530849961163557032168735648835975899744556626132330921576826526953069435718888223260480397802737401</span><br><span class="line"></span><br><span class="line">a=4036991100</span><br><span class="line"></span><br><span class="line">from tqdm import tqdm</span><br><span class="line">for i in tqdm(range(100)):</span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    f = x * 2^288 + p0_ + (a+i)*2^256</span><br><span class="line">    f = f.monic()</span><br><span class="line">    roots = f.small_roots(X=2^225, beta=0.4,epsilon=0.04)</span><br><span class="line"></span><br><span class="line">    if roots:</span><br><span class="line">        x = roots[0]</span><br><span class="line">        p_candidate = int(x * 2^288 + p0_ + (a+i)*2^256)</span><br><span class="line">        if n % p_candidate == 0:</span><br><span class="line">            print(&quot;Found p:&quot;, p_candidate)</span><br><span class="line">            q_candidate = n // p_candidate</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line">from gmpy2 import *</span><br><span class="line">from random import *</span><br><span class="line">from libnum import *</span><br><span class="line"></span><br><span class="line">p=int(p_candidate)</span><br><span class="line">q=int(q_candidate)</span><br><span class="line">e=int(4036989615)</span><br><span class="line"></span><br><span class="line">print(p,q,n%p,n%q)</span><br><span class="line"></span><br><span class="line">print(GCD(e,(p-1)*(q-1)))</span><br><span class="line">print(GCD(e,(p-1)))</span><br><span class="line">print(GCD(e,(q-1)))</span><br><span class="line"></span><br><span class="line">d=inverse(e//GCD(e,(p-1)*(q-1)),(p-1)*(q-1))</span><br><span class="line">c=pow(c,d,n)</span><br><span class="line"></span><br><span class="line">R.&lt;y&gt;=Zmod(p)[]</span><br><span class="line">f=y^15-c</span><br><span class="line">f=f.monic()</span><br><span class="line">m1=f.roots()</span><br><span class="line"></span><br><span class="line">R.&lt;z&gt;=Zmod(q)[]</span><br><span class="line">f=z^15-c</span><br><span class="line">f=f.monic()</span><br><span class="line">m2=f.roots()</span><br><span class="line"></span><br><span class="line">for i in m1:</span><br><span class="line">    for j in m2:</span><br><span class="line">        m=solve_crt([int(i[0]),int(j[0])],[int(p),int(q)])</span><br><span class="line">        print(long_to_bytes(int(m)))</span><br><span class="line">        if b&#x27;TGCTF&#x27; in long_to_bytes(int(m)):</span><br><span class="line">            print(long_to_bytes(int(m)).decode())</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="p泄露位数不够且无法爆破">1.2p泄露位数不够且无法爆破</h2><h3 id="hgame-2023">HGAME 2023</h3><p>这里为什么说无法爆破呢，因为要爆破的数量级太大</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">create_keypair</span>(<span class="params">nbits</span>):</span><br><span class="line">    p = getPrime(nbits // <span class="number">2</span>)</span><br><span class="line">    q = getPrime(nbits // <span class="number">2</span>)</span><br><span class="line">    N = p*q</span><br><span class="line">    phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    d = inverse(e, phi)</span><br><span class="line">    leak = p &gt;&gt; <span class="number">253</span></span><br><span class="line">    <span class="keyword">return</span> N, e, d, leak</span><br><span class="line"></span><br><span class="line"><span class="comment">#N = 115093328038628808000295235261362405802946414639474481950854274471056071400567939760489029514405676751158500439316121705879898379961723340037451609143927918592230719040332243486155308305995684632393529193889098207326916292333323740045854874108499021528070619818564785319040208958162851719315919939795936617311</span></span><br><span class="line"><span class="comment">#e = 65537</span></span><br><span class="line"><span class="comment">#leak = 724556813270353646000965587597160596427818318026275239319104891346445173041116</span></span><br></pre></td></tr></table></figure><p>这里是p的高位泄露</p><p>这里有253bit未知，根据定理只能有225bit未知，也就是说28bit要爆破也就是<spanclass="math inline">2<sup>28</sup></span>,那么这就是相当大的数据了</p><p>那么有什么解决办法呢</p><p>位爆破+调节参数扩大格的范围</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">from tqdm import *</span><br><span class="line"></span><br><span class="line">n = 68340867186438223292118569682710524595966327481168801678255800028919163918249557519447553078528255888326840419621716908729880235244230459900539486879943421761586611726942757775742624070088176246368128990077459966006579285028594729801017390816903003704541109757846868073362640037019813128220657114558520107057</span><br><span class="line"></span><br><span class="line">pbits = 512</span><br><span class="line"></span><br><span class="line">for i in trange(2**5):</span><br><span class="line">p4 = 531320819410375258952658395582915285878636410772332266245849790153420724865787&lt;&lt;(253-248)</span><br><span class="line">p4 = p4 + i</span><br><span class="line">kbits = pbits - p4.nbits()</span><br><span class="line">p4 = p4 &lt;&lt; kbits</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x + p4</span><br><span class="line">roots = f.small_roots(X=2^kbits, beta=0.4, epsilon=0.01)</span><br><span class="line">if roots:        </span><br><span class="line">p = p4+int(roots[0]) </span><br><span class="line">if n%p==0:</span><br><span class="line">print(i,p)</span><br><span class="line">break</span><br><span class="line">            </span><br><span class="line">q = n//p</span><br><span class="line">e = 65537</span><br><span class="line">c = 0x29d543c73f4175f22440eef5954184e9d740cd3785011d560431861ccf6c4ff380d46ad948f9888e8cac2f5e38ce5e994f023d7195b78439b90d53ad23a730cc99b1b75dae1aba416cb6e645c5d135de906be54f344daba47a10492183d03211bfbaa45c09be2bb1913b1453e0538db95c56140cb78dd9c43d21f8312245ef7d</span><br><span class="line">f = (p-1)*(q-1)</span><br><span class="line">d = inverse_mod(e,f)</span><br><span class="line">m = pow(c,d,n)</span><br><span class="line">print(bytes.fromhex(hex(m)[2:]))</span><br><span class="line"></span><br><span class="line"># b&#x27;now_you_know_how_to_use_coppersmith&#x27;</span><br></pre></td></tr></table></figure><h3 id="xgame2024">0xGame2024</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">N = p * q</span><br><span class="line"></span><br><span class="line">h = q &gt;&gt; <span class="number">253</span></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;N = <span class="subst">&#123;N&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e = <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;h = <span class="subst">&#123;h&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">N = 135500646574582511239845764710311769260801998982429500680171919823431178899526463566215834234383331374445093363969218810906991784569340270510936759183504496584225937614940086329775325893307453919055830270986601152002191368431527285285313669979358099782497422114870417519470053198217401297960844455029559146309</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">c = 41763956818640145556632229720626372656921875856507389014855753965024986594502113237270745517422792354256348958542864591249410500750410658988509136242435502259172258432676502846729088278202750721760451160668653746019965695721844819587671602925551448624324524027931677927410810126647175483982178300855471710099</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">h = 918578024558168836638919636090777586135497638818209533615420650282292168631485</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>这里就是原题搬家了，这里就不再多说了</p><h2 id="p泄露的位数够但需要调整参数">1.3P泄露的位数够但需要调整参数</h2><h3 id="mini-l-ctf-ezfactor">Mini L-CTF Ezfactor</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p.bit_length() == q.bit_length() == <span class="number">768</span></span><br><span class="line"></span><br><span class="line">gift = p&gt;&gt;<span class="number">360</span></span><br><span class="line"></span><br><span class="line">gift = <span class="number">484571358830397929370234740984952703033447536470079158146615136255872598113610957918395761289775053764210538009624146851126</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">1612520630363003059353142253089981533043311564255746310310940263864745479492015266264329953981958844235674179099410756219312942121244956701500870363219075525408783798007163550423573845701695879459236385567459569561236623909034945892869546441146006017614916909993115637827270568507869830024659905586004136946481048074461682125996261736024637375095977789425181258537482384460658359276300923155102288360474915802803118320144780824862629986882661190674127696656788827</span></span><br></pre></td></tr></table></figure><p>这里可以看到p是768bit，知道的高位是438bit，根据定理我们是可以直接打cooper的，可是实际测试我们发现无法恢复p</p><p>那么我们现在能做的就是调整参数了，问题随之而来，究竟如何调参呢？</p><p>当<code>beta=0.4</code>时，在未知位数少于等于227bit时，可以恢复p</p><p>当<code>beta=0.4,epsilon=0.01</code>时，在未知位数少于等于248bit时，可以恢复p</p><p>之前说过的，而我们现在未知的位数是330bit，那么beta肯定要往上调，不过具体的原理倒不是很清楚，以后再慢慢研究吧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import*</span><br><span class="line"></span><br><span class="line">n = 1612520630363003059353142253089981533043311564255746310310940263864745479492015266264329953981958844235674179099410756219312942121244956701500870363219075525408783798007163550423573845701695879459236385567459569561236623909034945892869546441146006017614916909993115637827270568507869830024659905586004136946481048074461682125996261736024637375095977789425181258537482384460658359276300923155102288360474915802803118320144780824862629986882661190674127696656788827</span><br><span class="line"></span><br><span class="line">ph = 484571358830397929370234740984952703033447536470079158146615136255872598113610957918395761289775053764210538009624146851126</span><br><span class="line"></span><br><span class="line">phh = ph*(2**360)</span><br><span class="line"></span><br><span class="line">e = 107851261855564315073903829182423950546788346138259394246439657948476619948171</span><br><span class="line"></span><br><span class="line">kbits = 360 </span><br><span class="line"></span><br><span class="line">PR = PolynomialRing(Zmod(n),names = (&#x27;x&#x27;));(x,) = PR._first_ngens(1)</span><br><span class="line"></span><br><span class="line">f = x + phh</span><br><span class="line"></span><br><span class="line">p = f.small_roots(X = 2**360,beta = 0.45,epsilon = 0.02)[0] + phh</span><br><span class="line"></span><br><span class="line">print(p)</span><br></pre></td></tr></table></figure><h2 id="其他形式的泄露">1.4其他形式的泄露</h2><h3 id="litctf-babyxor">2023LitCTF Babyxor</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag)==<span class="number">32</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c1 = p^m</span><br><span class="line">c2 = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c1 = <span class="subst">&#123;c1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c2 = <span class="subst">&#123;c2&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n = 139167681803392690594490403105432649693546256181767408269202101512534988406137879788255103631885736461742577594980136624933914700779445704490217419248411578290305101891222576080645870988658334799437317221565839991979543660824098367011942169305111105129234902517835649895908656770416774539906212596072334423407</span></span><br><span class="line"><span class="string">c1 = 11201139662236758800406931253538295757259990870588609533820056210585752522925690049252488581929717556881067021381940083808024384402885422258545946243513996</span></span><br><span class="line"><span class="string">c2 = 112016152270171196606652761990170033221036025260883289104273504703557624964071464062375228351458191745141525003775876044271210498526920529385038130932141551598616579917681815276713386113932345056134302042399379895915706991873687943357627747262597883603999621939794450743982662393955266685255577026078256473601</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>这里并没有明确给出p的高位，但是我们仔细分析题目给出的条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">len(flag)=32</span><br></pre></td></tr></table></figure><p>那么就是说flag是32字节也就是256bit，在看到p是512bit，那么p^m也就是p的低位丢失了，换句话说p的高位还是原来的高位，那不就是p的高位泄露</p><p>在看到cooper定理要求，这里显然是不满足的我们还需要爆破8位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">from tqdm import *</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">n = 139167681803392690594490403105432649693546256181767408269202101512534988406137879788255103631885736461742577594980136624933914700779445704490217419248411578290305101891222576080645870988658334799437317221565839991979543660824098367011942169305111105129234902517835649895908656770416774539906212596072334423407</span><br><span class="line">c1 = 11201139662236758800406931253538295757259990870588609533820056210585752522925690049252488581929717556881067021381940083808024384402885422258545946243513996</span><br><span class="line">c2 = 112016152270171196606652761990170033221036025260883289104273504703557624964071464062375228351458191745141525003775876044271210498526920529385038130932141551598616579917681815276713386113932345056134302042399379895915706991873687943357627747262597883603999621939794450743982662393955266685255577026078256473601</span><br><span class="line">e = 65537</span><br><span class="line">pbits = 512</span><br><span class="line"></span><br><span class="line">p_high = c1 &gt;&gt; 256</span><br><span class="line">for i in trange(2**8):</span><br><span class="line">    p4 = p_high &lt;&lt; 8#这里需要先爆破8位，使得知道264位以后再恢复p</span><br><span class="line">    p4 = p4 + i</span><br><span class="line">    kbits = pbits - p4.nbits()</span><br><span class="line">    p4 = p4 &lt;&lt; kbits</span><br><span class="line">    R.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    f = x + p4</span><br><span class="line">    res = f.small_roots(X=2^kbits, beta=0.4, epsilon=0.01)</span><br><span class="line">    if res != []:</span><br><span class="line">        p = p4 + int(x[0])</span><br><span class="line">        q = n // p</span><br><span class="line">        d = gmpy2.invert(e,(p-1)*(q-1))</span><br><span class="line">        m = pow(c2,d,n)</span><br><span class="line">        print(long_to_bytes(int(m)))</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">#LitCTF&#123;oh!!!!coppersmith_is_fun&#125;</span><br></pre></td></tr></table></figure><h2 id="明文的高位泄露">1.5 明文的高位泄露</h2><h3 id="反方向的密码-相思">反方向的密码 相思</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hash</span>(<span class="params">x</span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> hashlib.sha256(x.encode()).digest()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">message</span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> message + <span class="built_in">hash</span>(<span class="built_in">str</span>(<span class="built_in">len</span>(message)))</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(pad(flag))</span><br><span class="line"></span><br><span class="line">p = getStrongPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">q = getStrongPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(m, e, n))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 120440199294949712392334113337541924034371176306546446428347114627162894108760435789068328282135879182130546564535108930827440004987170619301799710272329673259390065147556073101312748104743572369383346039000998822862286001416166288971531241789864076857299162050026949096919395896174243383291126202796610039053</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 143413213355903851638663645270518081058249439863120739973910994223793329606595495141951165221740599158773181585002460087410975579141155680671886930801733174300593785562287068287654547100320094291092508723488470015821072834947151827362715749438612812148855627557719115676595686347541785037035334177162406305243</span></span><br></pre></td></tr></table></figure><p>感觉是道比较有意思的高位泄露，与其它题目不同的是，这并没有直接给出m的高位</p><p>看到加密等式 <spanclass="math display"><em>C</em> = (<em>m</em>||<em>h</em>(<em>l</em><em>e</em><em>n</em>(<em>m</em>)))<sup>3</sup> mod  <em>n</em></span>再观察题目给出的条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashlib.sha256(x.encode()).digest()</span><br></pre></td></tr></table></figure><p>既然这里是用sha256加密，那么加密后的结果一定就是32字节的结果,通常来说flag长度在30-40位左右<spanclass="math display"><em>C</em> = (256<sup>32</sup><em>m</em> + <em>h</em>)<sup>3</sup> mod  <em>n</em></span>那么我们来打cooper</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">from tqdm import *</span><br><span class="line"></span><br><span class="line">def hash(x):</span><br><span class="line"></span><br><span class="line">  return hashlib.sha256(x.encode()).digest()</span><br><span class="line"></span><br><span class="line">e = 3</span><br><span class="line"></span><br><span class="line">c = 120440199294949712392334113337541924034371176306546446428347114627162894108760435789068328282135879182130546564535108930827440004987170619301799710272329673259390065147556073101312748104743572369383346039000998822862286001416166288971531241789864076857299162050026949096919395896174243383291126202796610039053</span><br><span class="line"></span><br><span class="line">n = 143413213355903851638663645270518081058249439863120739973910994223793329606595495141951165221740599158773181585002460087410975579141155680671886930801733174300593785562287068287654547100320094291092508723488470015821072834947151827362715749438612812148855627557719115676595686347541785037035334177162406305243</span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"></span><br><span class="line">for length in trange(20,50):</span><br><span class="line"></span><br><span class="line">  suffix = bytes_to_long(hash(str(length)))</span><br><span class="line"></span><br><span class="line">  f = (256^32*x + suffix)^3 - c</span><br><span class="line"></span><br><span class="line">  f = f.monic()</span><br><span class="line"></span><br><span class="line">  res = f.small_roots(X=256^length,beta=1,epsilon=0.05)</span><br><span class="line"></span><br><span class="line">  if(res != []):</span><br><span class="line"></span><br><span class="line">    print(long_to_bytes(int(res[0])))</span><br><span class="line"></span><br><span class="line">    break</span><br></pre></td></tr></table></figure><p>当然这里的flag头我们是知道所以还有另一种写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">c = 120440199294949712392334113337541924034371176306546446428347114627162894108760435789068328282135879182130546564535108930827440004987170619301799710272329673259390065147556073101312748104743572369383346039000998822862286001416166288971531241789864076857299162050026949096919395896174243383291126202796610039053</span><br><span class="line"></span><br><span class="line">n = 143413213355903851638663645270518081058249439863120739973910994223793329606595495141951165221740599158773181585002460087410975579141155680671886930801733174300593785562287068287654547100320094291092508723488470015821072834947151827362715749438612812148855627557719115676595686347541785037035334177162406305243</span><br><span class="line"></span><br><span class="line">def hash(x):</span><br><span class="line"></span><br><span class="line">  return hashlib.sha256(x.encode()).digest()</span><br><span class="line"></span><br><span class="line">for i in range(10,40):                  #i代表&#123;&#125;中未知数的个数</span><br><span class="line"></span><br><span class="line">  prefix = bytes_to_long(b&quot;XYCTF&#123;&quot;) * 256^(32 + 1 + i)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  pad = hash(str(i+7))</span><br><span class="line"></span><br><span class="line">  low = bytes_to_long(b&quot;&#125;&quot; + pad)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  R.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  f = (prefix + x*256^33 + low)^3 - c</span><br><span class="line"></span><br><span class="line">  f = f.monic()</span><br><span class="line"></span><br><span class="line">  res = f.small_roots(X=256^i)</span><br><span class="line"></span><br><span class="line">  if res != []:</span><br><span class="line"></span><br><span class="line">    m = prefix + int(res[0])*256^33 + low</span><br><span class="line"></span><br><span class="line">    print(long_to_bytes(int(m)))</span><br></pre></td></tr></table></figure><h2 id="已知dq的低位攻击">1.6已知dq的低位攻击</h2><p>这个倒不是很常见</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n = 0xd7152506aa9cec05e5335d6b46f5491407c3199fd51091f1f6030d3762b9e03f49c9dcdc075054e0cc148b974b41854bd93b4ee16a2a876ee62005e80ef806b7aa3b64b1bf9b1fa773e353d0cdb9ff9783ddd5f5e67499ad10f361e938d00b82a6a4c42a0535c5e76721798e86b45cd4b8d03b0d7e75c2be8766a1e843bdc641</span><br><span class="line">e = 0x10001</span><br><span class="line">dq_low = 0xc90bcecf1cbab3358585e8a041d1b1</span><br><span class="line">qinvp = 0xe3016cb3609c1d643c167439c3b938b881f4237f24860d3b1cb85a626d5ccd4726964e0f8270d6c4df9ebfebcc538e4ee5e1a7b7368ede51ec6ae917f78eb598</span><br></pre></td></tr></table></figure><p>分析条件，我们知道dq的低位，e，n</p><p>那么这里dq满足打cooper的条件，然后就是dq泄露的板子打</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#sage</span><br><span class="line">from gmpy2 import *</span><br><span class="line">from tqdm import tqdm</span><br><span class="line">from sage.all import *</span><br><span class="line"></span><br><span class="line">n = 0xd7152506aa9cec05e5335d6b46f5491407c3199fd51091f1f6030d3762b9e03f49c9dcdc075054e0cc148b974b41854bd93b4ee16a2a876ee62005e80ef806b7aa3b64b1bf9b1fa773e353d0cdb9ff9783ddd5f5e67499ad10f361e938d00b82a6a4c42a0535c5e76721798e86b45cd4b8d03b0d7e75c2be8766a1e843bdc641</span><br><span class="line">e = 0x10001</span><br><span class="line">dq_low = 0xc90bcecf1cbab3358585e8a041d1b1</span><br><span class="line">qinvp = 0xe3016cb3609c1d643c167439c3b938b881f4237f24860d3b1cb85a626d5ccd4726964e0f8270d6c4df9ebfebcc538e4ee5e1a7b7368ede51ec6ae917f78eb598</span><br><span class="line"></span><br><span class="line">t = qinvp</span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">dq = (2^120*x + dq_low)</span><br><span class="line">kbit = 512 - 120  # 用于设置根X的界限</span><br><span class="line"></span><br><span class="line">for k in tqdm(range(e,1,-1)):</span><br><span class="line">    f = t*pow(e*dq - 1,2) + k*(2*t-1)*(e*dq - 1) + pow(k,2)*(t-1)  # 构造的模多项式</span><br><span class="line">    f = f.monic()</span><br><span class="line">    root = f.small_roots(X=2^kbit,beta=0.5)   # 计算模多项式的小整数根</span><br><span class="line">    if root:</span><br><span class="line">        dq = 2^120*root[0] + dq_low</span><br><span class="line">        print(&#x27;k =&#x27;,k)</span><br><span class="line">        q = int((e*dq - 1)//k + 1)</span><br><span class="line">        p = n//q</span><br><span class="line">        if p*q == n:</span><br><span class="line">            print(&#x27;dq =&#x27;,dq)</span><br><span class="line">            print(&#x27;p =&#x27;,p)</span><br><span class="line">            print(&#x27;q =&#x27;,q)</span><br><span class="line">            break</span><br></pre></td></tr></table></figure><h3 id="二元cooper">二元cooper</h3><p>那么在介绍完了coppersmith定理之后下面介绍二元cooper</p><p>这里对二元cooper的原理就不多说什么了，可以参考其他师傅们的blog，这里主要还是自己对题目的理解</p><p>放个二元coop而求小根的代码</p><p>m为移位（shifts），d 为多项式中的最高幂</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">import itertools</span><br><span class="line">def small_roots(f, bounds, m=1, d=None):</span><br><span class="line">    if not d:</span><br><span class="line">        d = f.degree()</span><br><span class="line"></span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line"></span><br><span class="line">    f /= f.coefficients().pop(0)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">    G = Sequence([], f.parent())</span><br><span class="line">    for i in range(m + 1):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        for shifts in itertools.product(range(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(map(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line"></span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">    factors = [monomial(*bounds) for monomial in monomials]</span><br><span class="line">    for i, factor in enumerate(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    for i, factor in enumerate(factors):</span><br><span class="line">        B.rescale_col(i, 1 / factor)</span><br><span class="line"></span><br><span class="line">    H = Sequence([], f.parent().change_ring(QQ))</span><br><span class="line">    for h in filter(None, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        if I.dimension() == -1:</span><br><span class="line">            H.pop()</span><br><span class="line">        elif I.dimension() == 0:</span><br><span class="line">            roots = []</span><br><span class="line">            for root in I.variety(ring=ZZ):</span><br><span class="line">                root = tuple(R(root[var]) for var in f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            return roots</span><br><span class="line"></span><br><span class="line">    return []</span><br></pre></td></tr></table></figure><h3 id="ciscn-2021华南small">2.1 [CISCN 2021华南]small</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">import random, hashlib</span><br><span class="line"></span><br><span class="line">from Crypto.Util.number import getPrime</span><br><span class="line"></span><br><span class="line">from secret import x, y, flag</span><br><span class="line"></span><br><span class="line">BITS = 70</span><br><span class="line"></span><br><span class="line">assert(2**BITS &lt; x &lt; 2**(BITS+1))</span><br><span class="line"></span><br><span class="line">assert(2**BITS &lt; y &lt; 2**(BITS+1))</span><br><span class="line"></span><br><span class="line">m = str(x) + str(y)</span><br><span class="line"></span><br><span class="line">h = hashlib.sha256()</span><br><span class="line"></span><br><span class="line">h.update(m.encode())</span><br><span class="line"></span><br><span class="line">assert(flag == &quot;flag&#123;&quot; + h.hexdigest() + &quot;&#125;&quot;)</span><br><span class="line"></span><br><span class="line">p = getPrime(512)</span><br><span class="line"></span><br><span class="line">a = getPrime(510)</span><br><span class="line"></span><br><span class="line">b = getPrime(510)</span><br><span class="line"></span><br><span class="line">c = (1 + a * x * y ** 2 + b * x ** 2 * y) % p</span><br><span class="line"></span><br><span class="line">print(&quot;p = &quot; + str(p))</span><br><span class="line"></span><br><span class="line">print(&quot;a = &quot; + str(a))</span><br><span class="line"></span><br><span class="line">print(&quot;b = &quot; + str(b))</span><br><span class="line"></span><br><span class="line">print(&quot;c = &quot; + str(c))</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">p = 8813834626918693034209829623386418111935369643440896703895290043343199520112218432639643684400534953548489779045914955504743423765099014797611981422650409</span><br><span class="line"></span><br><span class="line">a = 2817275225516767613658440250260394873529274896419346861054126128919212362519165468003171950475070788320195398302803745633617864408366174315471102773073469</span><br><span class="line"></span><br><span class="line">b = 1763620527779958060718182646420541623477856799630691559360944374374235694750950917040727594731391703184965719358552775151767735359739899063298735788999711</span><br><span class="line"></span><br><span class="line">c = 2298790980294663527827702586525963981886518365072523836572440106026473419042192180086308154346777239817235315513418426401278994450805667292449334757693881</span><br></pre></td></tr></table></figure><p>这里的加密很简单</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c = (1 + a * x * y ** 2 + b * x ** 2 * y) % p</span><br></pre></td></tr></table></figure><p>根据题目中的条件我们只有x,y是不知道的</p><p>一个方程两个未知数，那么直接打二元cooper</p><p>这里的构造思路和cooper是一样的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line"></span><br><span class="line">import itertools</span><br><span class="line"></span><br><span class="line">def small_roots(f, bounds, m=1, d=None):</span><br><span class="line"></span><br><span class="line">  if not d:</span><br><span class="line"></span><br><span class="line">    d = f.degree()</span><br><span class="line"></span><br><span class="line">  R = f.base_ring()</span><br><span class="line"></span><br><span class="line">  N = R.cardinality()</span><br><span class="line"></span><br><span class="line">  f /= f.coefficients().pop(0)</span><br><span class="line"></span><br><span class="line">  f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">  G = Sequence([], f.parent())</span><br><span class="line"></span><br><span class="line">  for i in range(m + 1):</span><br><span class="line"></span><br><span class="line">    base = N ^ (m - i) * f ^ i</span><br><span class="line"></span><br><span class="line">    for shifts in itertools.product(range(d), repeat=f.nvariables()):</span><br><span class="line"></span><br><span class="line">      g = base * prod(map(power, f.variables(), shifts))</span><br><span class="line"></span><br><span class="line">      G.append(g)</span><br><span class="line"></span><br><span class="line">  B, monomials = G.coefficient_matrix()</span><br><span class="line"></span><br><span class="line">  monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">  factors = [monomial(*bounds) for monomial in monomials]</span><br><span class="line"></span><br><span class="line">  for i, factor in enumerate(factors):</span><br><span class="line"></span><br><span class="line">    B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">  B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">  B = B.change_ring(QQ)</span><br><span class="line"></span><br><span class="line">  for i, factor in enumerate(factors):</span><br><span class="line"></span><br><span class="line">    B.rescale_col(i, 1 / factor)</span><br><span class="line"></span><br><span class="line">  H = Sequence([], f.parent().change_ring(QQ))</span><br><span class="line"></span><br><span class="line">  for h in filter(None, B * monomials):</span><br><span class="line"></span><br><span class="line">    H.append(h)</span><br><span class="line"></span><br><span class="line">    I = H.ideal()</span><br><span class="line"></span><br><span class="line">    if I.dimension() == -1:</span><br><span class="line"></span><br><span class="line">      H.pop()</span><br><span class="line"></span><br><span class="line">    elif I.dimension() == 0:</span><br><span class="line"></span><br><span class="line">      roots = []</span><br><span class="line"></span><br><span class="line">      for root in I.variety(ring=ZZ):</span><br><span class="line"></span><br><span class="line">        root = tuple(R(root[var]) for var in f.variables())</span><br><span class="line"></span><br><span class="line">        roots.append(root)</span><br><span class="line"></span><br><span class="line">      return roots</span><br><span class="line"></span><br><span class="line">  return []</span><br><span class="line"></span><br><span class="line">p = 8813834626918693034209829623386418111935369643440896703895290043343199520112218432639643684400534953548489779045914955504743423765099014797611981422650409</span><br><span class="line"></span><br><span class="line">a = 2817275225516767613658440250260394873529274896419346861054126128919212362519165468003171950475070788320195398302803745633617864408366174315471102773073469</span><br><span class="line"></span><br><span class="line">b = 1763620527779958060718182646420541623477856799630691559360944374374235694750950917040727594731391703184965719358552775151767735359739899063298735788999711</span><br><span class="line"></span><br><span class="line">c = 2298790980294663527827702586525963981886518365072523836572440106026473419042192180086308154346777239817235315513418426401278994450805667292449334757693881</span><br><span class="line"></span><br><span class="line">R.&lt;x,y&gt; = PolynomialRing(Zmod(p))</span><br><span class="line"></span><br><span class="line">f = (1 + a * x * y ** 2 + b * x ** 2 * y)-c</span><br><span class="line"></span><br><span class="line">res = small_roots(f,(2^70,2^64),m=2,d=5)</span><br><span class="line"></span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">\#[(2109960504722998994279, 1693812585349439720973)]</span><br></pre></td></tr></table></figure><p>这是比较简单的一题</p><h3 id="srctf-leak-revenge">2.2 SRCTF leak revenge</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from secret import flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(512)</span><br><span class="line">q = getPrime(512)</span><br><span class="line">n = p * q</span><br><span class="line">e = getPrime(64)</span><br><span class="line">dp = inverse(e, p - 1)</span><br><span class="line">print(f&quot;n = &#123;n&#125;&quot;)</span><br><span class="line">print(f&quot;e = &#123;e&#125;&quot;)</span><br><span class="line">print(f&quot;dph = &#123;dp &gt;&gt; 115 &lt;&lt;115&#125;&quot;)</span><br><span class="line">print(f&quot;c = &#123;pow(m,e,n)&#125;&quot;)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">n = 99808598778276923350368946118829564161543192771741967304113142692217693457972421525964898372688505220132024575461230316318177765543298394717753949509523080306599063058808987337840085569950414884529534449801215600413303898393849792345972321407524999652571659221193654323489992751031985715286873931985408130197</span><br><span class="line">e = 9550490518460184889</span><br><span class="line">dph = 4239371595915398923623854132330356869028911602649930928560125044718768467773415379438150660838271530302945945606708178367182566660953659123879375907323904</span><br><span class="line">c = 18661814437233106799783882536249538287931377372915334052147813302071480339780465378376553936510407532657463793836895065758256947765504246845601788497861702555369338586376572381147331367628136147491699775987490116748428373153021965663362046971594255692960097313870139384700219810117047587229718472407783734575</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><p>dp泄露最后我们是需要遍历e的，但是这里的e太大，无法遍历求解，所以打个二元cooper</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">import gmpy2</span><br><span class="line">import itertools</span><br><span class="line"></span><br><span class="line">def small_roots(f, bounds, m=1, d=None):</span><br><span class="line">    if not d:</span><br><span class="line">        d = f.degree()</span><br><span class="line">        print(d)</span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line">    f /= f.coefficients().pop(0)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line">    G = Sequence([], f.parent())</span><br><span class="line">    for i in range(m + 1):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        for shifts in itertools.product(range(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(map(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line">    factors = [monomial(*bounds) for monomial in monomials]</span><br><span class="line">    for i, factor in enumerate(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    for i, factor in enumerate(factors):</span><br><span class="line">        B.rescale_col(i, 1 / factor)</span><br><span class="line">    H = Sequence([], f.parent().change_ring(QQ))</span><br><span class="line">    for h in filter(None, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        if I.dimension() == -1:</span><br><span class="line">            H.pop()</span><br><span class="line">        elif I.dimension() == 0:</span><br><span class="line">            roots = []</span><br><span class="line">            for root in I.variety(ring=ZZ):</span><br><span class="line">                root = tuple(R(root[var]) for var in f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            return roots</span><br><span class="line">    return []</span><br><span class="line"></span><br><span class="line">n = 99808598778276923350368946118829564161543192771741967304113142692217693457972421525964898372688505220132024575461230316318177765543298394717753949509523080306599063058808987337840085569950414884529534449801215600413303898393849792345972321407524999652571659221193654323489992751031985715286873931985408130197</span><br><span class="line">e = 9550490518460184889</span><br><span class="line">c = 18661814437233106799783882536249538287931377372915334052147813302071480339780465378376553936510407532657463793836895065758256947765504246845601788497861702555369338586376572381147331367628136147491699775987490116748428373153021965663362046971594255692960097313870139384700219810117047587229718472407783734575</span><br><span class="line">leak = 4239371595915398923623854132330356869028911602649930928560125044718768467773415379438150660838271530302945945606708178367182566660953659123879375907323904</span><br><span class="line"></span><br><span class="line">R.&lt;x,y&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = e * (leak + x) + (y - 1)</span><br><span class="line">res = small_roots(f,(2^115,2^64),m=2,d=5)</span><br><span class="line">print(res)</span><br><span class="line">for root in res:</span><br><span class="line">    dp_low = root[0]</span><br><span class="line">    dp = leak + dp_low</span><br><span class="line">    tmp = pow(2,e*dp,n) - 2</span><br><span class="line">    p = gmpy2.gcd(tmp,n)</span><br><span class="line">    q = n // p</span><br><span class="line">    d = inverse(e,(p-1)*(q-1))</span><br><span class="line">    m = pow(c,d,n)</span><br><span class="line">    print(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line">    # SRCTF&#123;00adb8189e3580577be8b97d1da8e205d0b64d4e65570547d7a67850fad1e4a2&#125;</span><br></pre></td></tr></table></figure><h3 id="complex_signin">2.3Complex_signin</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">from Crypto.Cipher import ChaCha20</span><br><span class="line"></span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">from secret import flag</span><br><span class="line"></span><br><span class="line">class Complex:</span><br><span class="line"></span><br><span class="line"> def __init__(self, re, im):</span><br><span class="line"></span><br><span class="line">  self.re = re</span><br><span class="line"></span><br><span class="line">  self.im = im</span><br><span class="line"></span><br><span class="line"> def __mul__(self, c):</span><br><span class="line"></span><br><span class="line">  re_ = self.re * c.re - self.im * c.im</span><br><span class="line"></span><br><span class="line">  im_ = self.re * c.im + self.im * c.re</span><br><span class="line"></span><br><span class="line">  return Complex(re_, im_)</span><br><span class="line"></span><br><span class="line"> def __eq__(self, c):</span><br><span class="line"></span><br><span class="line">  return self.re == c.re and self.im == c.im</span><br><span class="line"></span><br><span class="line"> def __rshift__(self, m):</span><br><span class="line"></span><br><span class="line">  return Complex(self.re &gt;&gt; m, self.im &gt;&gt; m)</span><br><span class="line"></span><br><span class="line"> def __lshift__(self, m):</span><br><span class="line"></span><br><span class="line">  return Complex(self.re &lt;&lt; m, self.im &lt;&lt; m)</span><br><span class="line"></span><br><span class="line"> def __str__(self):</span><br><span class="line"></span><br><span class="line">  if self.im == 0:</span><br><span class="line"></span><br><span class="line">   return str(self.re)</span><br><span class="line"></span><br><span class="line">  elif self.re == 0:</span><br><span class="line"></span><br><span class="line">   if abs(self.im) == 1:</span><br><span class="line"></span><br><span class="line">    return f&quot;&#123;&#x27;-&#x27; if self.im &lt; 0 else &#x27;&#x27;&#125;i&quot;</span><br><span class="line"></span><br><span class="line">   else:</span><br><span class="line"></span><br><span class="line">    return f&quot;&#123;self.im&#125;i&quot;</span><br><span class="line"></span><br><span class="line">  else:</span><br><span class="line"></span><br><span class="line">   return f&quot;&#123;self.re&#125; &#123;&#x27;+&#x27; if self.im &gt; 0 else &#x27;-&#x27;&#125; &#123;abs(self.im)&#125;i&quot;</span><br><span class="line"></span><br><span class="line"> def tolist(self):</span><br><span class="line"></span><br><span class="line">  return [self.re, self.im]</span><br><span class="line"></span><br><span class="line">def complex_pow(c, exp, n):</span><br><span class="line"></span><br><span class="line"> result = Complex(1, 0)</span><br><span class="line"></span><br><span class="line"> while exp &gt; 0:</span><br><span class="line"></span><br><span class="line">  if exp &amp; 1:</span><br><span class="line"></span><br><span class="line">   result = result * c</span><br><span class="line"></span><br><span class="line">   result.re = result.re % n</span><br><span class="line"></span><br><span class="line">   result.im = result.im % n</span><br><span class="line"></span><br><span class="line">  c = c * c</span><br><span class="line"></span><br><span class="line">  c.re = c.re % n</span><br><span class="line"></span><br><span class="line">  c.im = c.im % n</span><br><span class="line"></span><br><span class="line">  exp &gt;&gt;= 1</span><br><span class="line"></span><br><span class="line"> return result</span><br><span class="line"></span><br><span class="line">bits = 128</span><br><span class="line"></span><br><span class="line">p = getPrime(1024)</span><br><span class="line"></span><br><span class="line">q = getPrime(1024)</span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">m = Complex(getRandomRange(1, n), getRandomRange(1, n))</span><br><span class="line"></span><br><span class="line">e = 3</span><br><span class="line"></span><br><span class="line">c = complex_pow(m, e, n)</span><br><span class="line"></span><br><span class="line">print(f&quot;n = &#123;n&#125;&quot;)</span><br><span class="line"></span><br><span class="line">print(f&quot;mh = &#123;(m &gt;&gt; bits &lt;&lt; bits).tolist()&#125;&quot;)</span><br><span class="line"></span><br><span class="line">print(f&quot;C = &#123;c.tolist()&#125;&quot;)</span><br><span class="line"></span><br><span class="line">print(f&quot;enc = &#123;ChaCha20.new(key=hashlib.sha256(str(m.re + m.im).encode()).digest(), nonce=b&#x27;Pr3d1ctmyxjj&#x27;).encrypt(flag)&#125;&quot;)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">n = 24240993137357567658677097076762157882987659874601064738608971893024559525024581362454897599976003248892339463673241756118600994494150721789525924054960470762499808771760690211841936903839232109208099640507210141111314563007924046946402216384360405445595854947145800754365717704762310092558089455516189533635318084532202438477871458797287721022389909953190113597425964395222426700352859740293834121123138183367554858896124509695602915312917886769066254219381427385100688110915129283949340133524365403188753735534290512113201932620106585043122707355381551006014647469884010069878477179147719913280272028376706421104753</span><br><span class="line"></span><br><span class="line">mh = [3960604425233637243960750976884707892473356737965752732899783806146911898367312949419828751012380013933993271701949681295313483782313836179989146607655230162315784541236731368582965456428944524621026385297377746108440938677401125816586119588080150103855075450874206012903009942468340296995700270449643148025957527925452034647677446705198250167222150181312718642480834399766134519333316989347221448685711220842032010517045985044813674426104295710015607450682205211098779229647334749706043180512861889295899050427257721209370423421046811102682648967375219936664246584194224745761842962418864084904820764122207293014016, 15053801146135239412812153100772352976861411085516247673065559201085791622602365389885455357620354025972053252939439247746724492130435830816513505615952791448705492885525709421224584364037704802923497222819113629874137050874966691886390837364018702981146413066712287361010611405028353728676772998972695270707666289161746024725705731676511793934556785324668045957177856807914741189938780850108643929261692799397326838812262009873072175627051209104209229233754715491428364039564130435227582042666464866336424773552304555244949976525797616679252470574006820212465924134763386213550360175810288209936288398862565142167552]</span><br><span class="line"></span><br><span class="line">C = [5300743174999795329371527870190100703154639960450575575101738225528814331152637733729613419201898994386548816504858409726318742419169717222702404409496156167283354163362729304279553214510160589336672463972767842604886866159600567533436626931810981418193227593758688610512556391129176234307448758534506432755113432411099690991453452199653214054901093242337700880661006486138424743085527911347931571730473582051987520447237586885119205422668971876488684708196255266536680083835972668749902212285032756286424244284136941767752754078598830317271949981378674176685159516777247305970365843616105513456452993199192823148760, 21112179095014976702043514329117175747825140730885731533311755299178008997398851800028751416090265195760178867626233456642594578588007570838933135396672730765007160135908314028300141127837769297682479678972455077606519053977383739500664851033908924293990399261838079993207621314584108891814038236135637105408310569002463379136544773406496600396931819980400197333039720344346032547489037834427091233045574086625061748398991041014394602237400713218611015436866842699640680804906008370869021545517947588322083793581852529192500912579560094015867120212711242523672548392160514345774299568940390940653232489808850407256752]</span><br><span class="line"></span><br><span class="line">enc = b&#x27;\x9c\xc4n\x8dF\xd9\x9e\xf4\x05\x82!\xde\xfe\x012$\xd0\x8c\xaf\xfb\rEb(\x04)\xa1\xa6\xbaI2J\xd2\xb2\x898\x11\xe6x\xa9\x19\x00pn\xf6rs- \xd2\xd1\xbe\xc7\xf51.\xd4\xd2 \xe7\xc6\xca\xe5\x19\xbe&#x27;</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>拿到题目我们先审计一波代码</p><p>想要恢复明文我们需要先获取到m的实部和虚部，然后解密ChaCha20加密，对于最后一步的解密是很简单的，关键就是恢复m的实部和虚部</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">m = Complex(getRandomRange(1, n), getRandomRange(1, n))</span><br><span class="line"></span><br><span class="line">mh = &#123;(m &gt;&gt; bits &lt;&lt; bits).tolist()&#125;</span><br></pre></td></tr></table></figure><p>这里的m是个复数，而且这里很明显是m的高位泄露</p><p>那么接下来要干的事就很清晰了</p><p>既然是在复数域下，那我们就有</p><p><spanclass="math display"><em>m</em> = <em>r</em><em>e</em> + <em>i</em><em>m</em> * <em>i</em></span></p>那么这里的高位泄露就可以表示为 $$<p><spanclass="math display"><em>加</em><em>密</em><em>过</em><em>程</em><em>非</em><em>常</em><em>简</em><em>单</em></span>c=m^{3} $$</p><p>那么这里就是复数的立方了 <spanclass="math display"><em>m</em><sup>3</sup> = (re + im ⋅ <em>i</em>)<sup>3</sup> = (re<sup>3</sup> − 3 ⋅ re ⋅ im<sup>2</sup>) + (3 ⋅ re<sup>2</sup> ⋅ im − im<sup>3</sup>) ⋅ <em>i</em></span>这里出题的预期是解结式然后cooper，但是二元cooper可以直接出了,那么我们只用利用实部来列方程就好</p><p>我们设re的低位是x,im的虚部是y，则有方程 <spanclass="math display"><em>c</em> = (<em>r</em><em>e</em> + <em>x</em>)<sup>3</sup> − 3 * （<em>r</em><em>e</em> + <em>x</em>） * (<em>i</em><em>m</em> + <em>y</em>)<sup>2</sup></span>这里利用二元cooper解出x,y我们就可以成功恢复m了</p><p>接下来就是解ChaCha20了。这个没啥说的了</p><p>这里对系数稍微解释一下m是移位，也就是格的维度，d代表的是方程中最高系数的幂</p><p>对于128位的泄露，通常我们m=2或者3，这里最高次幂是3，毫无疑问的d=3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">from sage.all import *</span><br><span class="line"></span><br><span class="line">from Crypto.Cipher import ChaCha20</span><br><span class="line"></span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">import itertools</span><br><span class="line"></span><br><span class="line">def small_roots(f, bounds, m=1, d=None):</span><br><span class="line"></span><br><span class="line"> if not d:</span><br><span class="line"></span><br><span class="line">  d = f.degree()</span><br><span class="line"></span><br><span class="line"> R = f.base_ring()</span><br><span class="line"></span><br><span class="line"> N = R.cardinality()</span><br><span class="line"></span><br><span class="line"> f /= f.coefficients().pop(0)</span><br><span class="line"></span><br><span class="line"> f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line"> G = Sequence([], f.parent())</span><br><span class="line"></span><br><span class="line"> for i in range(m + 1):</span><br><span class="line"></span><br><span class="line">  base = N ^ (m - i) * f ^ i</span><br><span class="line"></span><br><span class="line">  for shifts in itertools.product(range(d), repeat=f.nvariables()):</span><br><span class="line"></span><br><span class="line">   g = base * prod(map(power, f.variables(), shifts))</span><br><span class="line"></span><br><span class="line">   G.append(g)</span><br><span class="line"></span><br><span class="line"> B, monomials = G.coefficient_matrix()</span><br><span class="line"></span><br><span class="line"> monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line"> factors = [monomial(*bounds) for monomial in monomials]</span><br><span class="line"></span><br><span class="line"> for i, factor in enumerate(factors):</span><br><span class="line"></span><br><span class="line">  B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line"> B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line"> B = B.change_ring(QQ)</span><br><span class="line"></span><br><span class="line"> for i, factor in enumerate(factors):</span><br><span class="line"></span><br><span class="line">  B.rescale_col(i, 1 / factor)</span><br><span class="line"></span><br><span class="line"> H = Sequence([], f.parent().change_ring(QQ))</span><br><span class="line"></span><br><span class="line"> for h in filter(None, B * monomials):</span><br><span class="line"></span><br><span class="line">  H.append(h)</span><br><span class="line"></span><br><span class="line">  I = H.ideal()</span><br><span class="line"></span><br><span class="line">  if I.dimension() == -1:</span><br><span class="line"></span><br><span class="line">   H.pop()</span><br><span class="line"></span><br><span class="line">  elif I.dimension() == 0:</span><br><span class="line"></span><br><span class="line">   roots = []</span><br><span class="line"></span><br><span class="line">   for root in I.variety(ring=ZZ):</span><br><span class="line"></span><br><span class="line">    root = tuple(R(root[var]) for var in f.variables())</span><br><span class="line"></span><br><span class="line">    roots.append(root)</span><br><span class="line"></span><br><span class="line">   return roots</span><br><span class="line"></span><br><span class="line"> return []</span><br><span class="line"></span><br><span class="line">n = 24240993137357567658677097076762157882987659874601064738608971893024559525024581362454897599976003248892339463673241756118600994494150721789525924054960470762499808771760690211841936903839232109208099640507210141111314563007924046946402216384360405445595854947145800754365717704762310092558089455516189533635318084532202438477871458797287721022389909953190113597425964395222426700352859740293834121123138183367554858896124509695602915312917886769066254219381427385100688110915129283949340133524365403188753735534290512113201932620106585043122707355381551006014647469884010069878477179147719913280272028376706421104753</span><br><span class="line"></span><br><span class="line">mh = [3960604425233637243960750976884707892473356737965752732899783806146911898367312949419828751012380013933993271701949681295313483782313836179989146607655230162315784541236731368582965456428944524621026385297377746108440938677401125816586119588080150103855075450874206012903009942468340296995700270449643148025957527925452034647677446705198250167222150181312718642480834399766134519333316989347221448685711220842032010517045985044813674426104295710015607450682205211098779229647334749706043180512861889295899050427257721209370423421046811102682648967375219936664246584194224745761842962418864084904820764122207293014016, 15053801146135239412812153100772352976861411085516247673065559201085791622602365389885455357620354025972053252939439247746724492130435830816513505615952791448705492885525709421224584364037704802923497222819113629874137050874966691886390837364018702981146413066712287361010611405028353728676772998972695270707666289161746024725705731676511793934556785324668045957177856807914741189938780850108643929261692799397326838812262009873072175627051209104209229233754715491428364039564130435227582042666464866336424773552304555244949976525797616679252470574006820212465924134763386213550360175810288209936288398862565142167552]</span><br><span class="line"></span><br><span class="line">C = [5300743174999795329371527870190100703154639960450575575101738225528814331152637733729613419201898994386548816504858409726318742419169717222702404409496156167283354163362729304279553214510160589336672463972767842604886866159600567533436626931810981418193227593758688610512556391129176234307448758534506432755113432411099690991453452199653214054901093242337700880661006486138424743085527911347931571730473582051987520447237586885119205422668971876488684708196255266536680083835972668749902212285032756286424244284136941767752754078598830317271949981378674176685159516777247305970365843616105513456452993199192823148760, 21112179095014976702043514329117175747825140730885731533311755299178008997398851800028751416090265195760178867626233456642594578588007570838933135396672730765007160135908314028300141127837769297682479678972455077606519053977383739500664851033908924293990399261838079993207621314584108891814038236135637105408310569002463379136544773406496600396931819980400197333039720344346032547489037834427091233045574086625061748398991041014394602237400713218611015436866842699640680804906008370869021545517947588322083793581852529192500912579560094015867120212711242523672548392160514345774299568940390940653232489808850407256752]</span><br><span class="line"></span><br><span class="line">enc = b&#x27;\x9c\xc4n\x8dF\xd9\x9e\xf4\x05\x82!\xde\xfe\x012$\xd0\x8c\xaf\xfb\rEb(\x04)\xa1\xa6\xbaI2J\xd2\xb2\x898\x11\xe6x\xa9\x19\x00pn\xf6rs- \xd2\xd1\xbe\xc7\xf51.\xd4\xd2 \xe7\xc6\xca\xe5\x19\xbe&#x27;</span><br><span class="line"></span><br><span class="line">mh_re,mh_im=mh</span><br><span class="line"></span><br><span class="line">R.&lt;x,y&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"></span><br><span class="line">f = (mh_re+x)^3-3*(mh_re+x)*(mh_im+y)^2 - C[0]</span><br><span class="line"></span><br><span class="line">res=small_roots(f,(2^128,2^128),m=2,d=3)  </span><br><span class="line"></span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">m_re=mh_re+int(res[0][0])</span><br><span class="line"></span><br><span class="line">m_im=mh_im+int(res[0][1])</span><br><span class="line"></span><br><span class="line">flag = ChaCha20.new(key=hashlib.sha256(str(m_re + m_im).encode()).digest(), nonce=b&#x27;Pr3d1ctmyxjj&#x27;).decrypt(enc).decode()</span><br><span class="line"></span><br><span class="line">print(flag)</span><br><span class="line"></span><br><span class="line">#[(200140573956551184845123803212115015633, 62109784561410747979732334460991877433)]</span><br><span class="line"></span><br><span class="line">#XYCTF&#123;Welcome_to_XYCTF_Now_let_us_together_play_Crypto_challenge&#125;</span><br></pre></td></tr></table></figure><h3 id="趣题">趣题</h3><h4 id="知道部分高低位">知道部分高，低位</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p, q = getPrime(<span class="number">1024</span>), getPrime(<span class="number">1024</span>)</span><br><span class="line">N = p * q</span><br><span class="line">p0 = p ^ (bytes_to_long(flag)&lt;&lt;<span class="number">444</span>)     </span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, <span class="number">65537</span>, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(flag))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c=&#x27;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;N=&#x27;</span>,N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p0=&#x27;</span>,p0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 54    </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c= 6187845844052645335477666563187579997555293403110620879123121166924703361821847984760733842049752886698011561451715570810292323756091403783920480396052120046379755571530451812078574368413924390017994278703794257118954968480994077586245800902748815905644287545189605031883291488844527496906890127546594960138582150272568163575590734246290813150131949296550974206595456421136190026954855755623761557179760444906148376433584795779131477110538212742401420633087881506416368853221110426491868881029814841479615979710066371796507692025126150957315754738584387325388998533227577023142894876376702128870643448600352603905149</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># N= 14195810221536708489210274086946022255792382922322850338983263099316341767896809249586174293795778082892237356582757544364274847341220303582304283372889068290282580493623042441421715338444710303281638639785784613434328659529884972238348336971186339482788748316527376410510261228354155806341136524162787121212184386900663470590652770503564816948407257603737938414126069053610568675347826390537145556511048774030823322301932088595499671755944744816524811272617200683384649389274196659297432212847319503330409792704612575414010711158873031786577877685578976140462539734553598745329712188216200905451774357282278403189943</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p0= 111984935426070810628244029907949697819351004665202173622240566580193974673163315128983603277856218378729883402496424467491406698035050254407170555432448523469880166015507303737468316933545613178461925283040643344197452758878116752692499745309765526523083790825015522124083482964296662782850606081657447935191</span></span><br></pre></td></tr></table></figure><p>这里我们会发现m左移了444位后和p异或，那么也就意味着p的低444位是不变的，因为这里左移过后就是0</p><figure><imgsrc="C:\Users\ROG\Desktop\blog\source\img\image-20250507141049448.png"alt="image-20250507141049448" /><figcaption aria-hidden="true">image-20250507141049448</figcaption></figure><p>但是这里的p是1024位的，只知道444位的话我们还打不了cooper</p><p>根据flag长度是54，转成int数据就432bit，左移444位后是876位，异或之后，p的高(1024- 876) = 148位也是不变的。所以我们有了p的部分高位和低位</p><p>已知592位我们就可以打cooper了</p><p>第一步肯定是先要求出p知道的高位和低位了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">phigh = p0 &gt;&gt; <span class="number">876</span> &lt;&lt;<span class="number">876</span></span><br><span class="line"></span><br><span class="line">tmp = <span class="built_in">int</span>(<span class="string">&quot;1&quot;</span> * <span class="number">444</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">plow = p0 &amp; tmp</span><br></pre></td></tr></table></figure><p>后面的cooper还是跟之前的一样即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line"></span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">p0 = 111984935426070810628244029907949697819351004665202173622240566580193974673163315128983603277856218378729883402496424467491406698035050254407170555432448523469880166015507303737468316933545613178461925283040643344197452758878116752692499745309765526523083790825015522124083482964296662782850606081657447935191</span><br><span class="line"></span><br><span class="line">c = 6187845844052645335477666563187579997555293403110620879123121166924703361821847984760733842049752886698011561451715570810292323756091403783920480396052120046379755571530451812078574368413924390017994278703794257118954968480994077586245800902748815905644287545189605031883291488844527496906890127546594960138582150272568163575590734246290813150131949296550974206595456421136190026954855755623761557179760444906148376433584795779131477110538212742401420633087881506416368853221110426491868881029814841479615979710066371796507692025126150957315754738584387325388998533227577023142894876376702128870643448600352603905149</span><br><span class="line"></span><br><span class="line">n = 14195810221536708489210274086946022255792382922322850338983263099316341767896809249586174293795778082892237356582757544364274847341220303582304283372889068290282580493623042441421715338444710303281638639785784613434328659529884972238348336971186339482788748316527376410510261228354155806341136524162787121212184386900663470590652770503564816948407257603737938414126069053610568675347826390537145556511048774030823322301932088595499671755944744816524811272617200683384649389274196659297432212847319503330409792704612575414010711158873031786577877685578976140462539734553598745329712188216200905451774357282278403189943</span><br><span class="line"></span><br><span class="line">e = 65537</span><br><span class="line"></span><br><span class="line">phigh = p0 &gt;&gt; 876 &lt;&lt;876</span><br><span class="line"></span><br><span class="line">tmp = int(&quot;1&quot; * 444,2)</span><br><span class="line"></span><br><span class="line">plow = p0 &amp; tmp</span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"></span><br><span class="line">f = phigh + x*2**444 + plow    # x*2**444 将x移动到正确的位置</span><br><span class="line"></span><br><span class="line">f = f.monic()</span><br><span class="line"></span><br><span class="line">res = f.small_roots(X=2^432,beta=0.4)</span><br><span class="line"></span><br><span class="line">if res != []:</span><br><span class="line"></span><br><span class="line">  p = int(phigh + res[0]*2**444+plow)</span><br><span class="line"></span><br><span class="line">  print(&quot;p =&quot;,p)</span><br><span class="line"></span><br><span class="line">  q = n // p</span><br><span class="line"></span><br><span class="line">  d = gmpy2.invert(e,(p-1)*(q-1))</span><br><span class="line"></span><br><span class="line">  m = pow(c,d,n)</span><br><span class="line"></span><br><span class="line">  print(long_to_bytes(int(m)))</span><br></pre></td></tr></table></figure><h4 id="minil-2025-rsasign">MiniL 2025 rsasign</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import bytes_to_long, getPrime, inverse</span><br><span class="line"></span><br><span class="line">from secret import flag</span><br><span class="line"></span><br><span class="line">def genKeys(nbits):</span><br><span class="line"></span><br><span class="line">  e = 0x10001</span><br><span class="line"></span><br><span class="line">  p = getPrime(nbits // 2)</span><br><span class="line"></span><br><span class="line">  q = getPrime(nbits // 2)</span><br><span class="line"></span><br><span class="line">  n = p * q</span><br><span class="line"></span><br><span class="line">  phi = n - (p + q) + 1</span><br><span class="line"></span><br><span class="line">  d = inverse(e, phi)</span><br><span class="line"></span><br><span class="line">  pubkey = (n, e)</span><br><span class="line"></span><br><span class="line">  prikey = (d, p, q)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  return pubkey, prikey</span><br><span class="line"></span><br><span class="line">def encrypt(msg, pubkey):</span><br><span class="line"></span><br><span class="line">  m = bytes_to_long(msg)</span><br><span class="line"></span><br><span class="line">  n, e = pubkey</span><br><span class="line"></span><br><span class="line">  c = pow(m, e, n)</span><br><span class="line"></span><br><span class="line">  return c</span><br><span class="line"></span><br><span class="line">def get_gift(prikey):</span><br><span class="line"></span><br><span class="line">  a = bytes_to_long(b&#x27;miniL&#x27;)</span><br><span class="line"></span><br><span class="line">  b = bytes_to_long(b&#x27;mini7&#x27;)</span><br><span class="line"></span><br><span class="line">  p, q = prikey[1:]</span><br><span class="line"></span><br><span class="line">  phi = (p - 1)*(q - 1)</span><br><span class="line"></span><br><span class="line">  giftp = p + a</span><br><span class="line"></span><br><span class="line">  giftq = q + b</span><br><span class="line"></span><br><span class="line">  gift = pow((giftp + giftq + a*b), 2, phi)</span><br><span class="line"></span><br><span class="line">  return gift &gt;&gt; 740</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line"></span><br><span class="line">  nbits = 1024</span><br><span class="line"></span><br><span class="line">  pubkey, prikey = genKeys(nbits)</span><br><span class="line"></span><br><span class="line">  c = encrypt(flag, pubkey)</span><br><span class="line"></span><br><span class="line">  gift = get_gift(prikey)</span><br><span class="line"></span><br><span class="line">  with open(&#x27;output.txt&#x27;, &#x27;a&#x27;) as f:</span><br><span class="line"></span><br><span class="line">    f.write(&#x27;pubkey = &#x27; + str(pubkey) + &#x27;\n&#x27;)</span><br><span class="line"></span><br><span class="line">    f.write(&#x27;c = &#x27; + str(c) + &#x27;\n&#x27;)</span><br><span class="line"></span><br><span class="line">    f.write(&#x27;gift = &#x27; + str(gift) + &#x27;\n&#x27;)</span><br><span class="line"></span><br><span class="line">pubkey = (65537,103894244981844985537754880154957043605938484102562158690722531081787219519424572416881754672377601851964416424759136080204870893054485062449999897173374210892603308440838199225926262799093152616430249061743215665167990978654674200171059005559869946978592535720766431524243942662028069102576083861914106412399)</span><br><span class="line"></span><br><span class="line">c = 50810871938251627005285090837280618434273429940089654925377752488011128518767341675465435906094867261596016363149398900195250354993172711611856393548098646094748785774924511077105061611095328649875874203921275281780733446616807977350320544877201182003521199057295967111877565671671198186635360508565083698058</span><br><span class="line"></span><br><span class="line">gift = 2391232579794490071131297275577300947901582900418236846514147804369797358429972790212</span><br></pre></td></tr></table></figure><p>首先题目给出的是gift的高位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gift = pow((giftp + giftq + a*b), 2, phi)</span><br></pre></td></tr></table></figure><p>看到gift的线性关系，可以先展开 <spanclass="math display"><em>g</em><em>i</em><em>f</em><em>t</em> = (<em>p</em> + <em>a</em> + <em>q</em> + <em>b</em> + <em>a</em> * <em>b</em>)<sup>2</sup> mod  <em>p</em><em>h</em><em>i</em></span>这里<spanclass="math inline"><em>p</em><em>h</em><em>i</em> = <em>n</em> − (<em>p</em> + <em>q</em>) + 1</span></p><p>因此我们可以认为phi的高位就是n的高位，所以可以直接用 n 代替phi，解得(p+q)的高位</p><p>现在知道了p*q，（p+q）的高位，那么解方程可以得到的p或者q的高位，这里我们解结式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">from gmpy2 import gmpy2</span><br><span class="line"></span><br><span class="line">\#from sage.matrix.matrix2 import Matrix</span><br><span class="line"></span><br><span class="line">def resultant(f1, f2, var):</span><br><span class="line"></span><br><span class="line">  return Matrix.determinant(f1.sylvester_matrix(f2, var))</span><br><span class="line"></span><br><span class="line">n=103894244981844985537754880154957043605938484102562158690722531081787219519424572416881754672377601851964416424759136080204870893054485062449999897173374210892603308440838199225926262799093152616430249061743215665167990978654674200171059005559869946978592535720766431524243942662028069102576083861914106412399</span><br><span class="line"></span><br><span class="line">gift =2391232579794490071131297275577300947901582900418236846514147804369797358429972790212</span><br><span class="line"></span><br><span class="line">gift=gift&lt;&lt;740</span><br><span class="line"></span><br><span class="line">p, q = QQ[&#x27;x, y&#x27;].gens()</span><br><span class="line"></span><br><span class="line">f = n-p*q</span><br><span class="line"></span><br><span class="line">g = (p+q)**2-4*(n-(p+q)+1) - gift</span><br><span class="line"></span><br><span class="line">h = f.resultant(g, q)</span><br><span class="line"></span><br><span class="line">print([f, g])</span><br><span class="line"></span><br><span class="line">print([h, factor(h)])</span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(RealField(1000))</span><br><span class="line"></span><br><span class="line">h = PR(h)</span><br><span class="line"></span><br><span class="line">print(h)</span><br><span class="line"></span><br><span class="line">res =h.monic().roots()</span><br><span class="line"></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p>得到了p的高位，下面自然是来打cooper，这里p泄露了229位，可以打cooper</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">import gmpy2</span><br><span class="line"></span><br><span class="line">c = 50810871938251627005285090837280618434273429940089654925377752488011128518767341675465435906094867261596016363149398900195250354993172711611856393548098646094748785774924511077105061611095328649875874203921275281780733446616807977350320544877201182003521199057295967111877565671671198186635360508565083698058</span><br><span class="line"></span><br><span class="line">n=103894244981844985537754880154957043605938484102562158690722531081787219519424572416881754672377601851964416424759136080204870893054485062449999897173374210892603308440838199225926262799093152616430249061743215665167990978654674200171059005559869946978592535720766431524243942662028069102576083861914106412399</span><br><span class="line"></span><br><span class="line">p=8501639590121977595053523738818375259679414794730106020578368658056270529108719142843616239876180609592408042971719162819965092838486348749800524648844787</span><br><span class="line"></span><br><span class="line">p_high=p&gt;&gt;229&lt;&lt;229</span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"></span><br><span class="line">f = p_high+x</span><br><span class="line"></span><br><span class="line">res = f.small_roots(X = 2^229,beta=0.4,epsilon=0.01)</span><br><span class="line"></span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">if res != 0:</span><br><span class="line"></span><br><span class="line">  p = p_high+int(res[0])</span><br><span class="line"></span><br><span class="line">  q = n//p</span><br><span class="line"></span><br><span class="line">  phi = (p-1)*(q-1)</span><br><span class="line"></span><br><span class="line">  d = gmpy2.invert(65537,phi)</span><br><span class="line"></span><br><span class="line">  m= pow(c,d,n)</span><br><span class="line"></span><br><span class="line">  print(long_to_bytes(m))</span><br><span class="line">#[119002501248222579736269858969778348009982530327788722167912373692341]</span><br><span class="line">#b&#x27;miniL&#123;D0_Y@U_Li)e_T&amp;@_RRRSA??&#125;&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
